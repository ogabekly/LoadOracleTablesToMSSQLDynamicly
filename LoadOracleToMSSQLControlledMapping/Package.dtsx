<?xml version="1.0"?>
<DTS:Executable xmlns:DTS="www.microsoft.com/SqlServer/Dts"
  DTS:refId="Package"
  DTS:CreationDate="7/2/2024 10:33:10 AM"
  DTS:CreationName="Microsoft.Package"
  DTS:CreatorComputerName="NB-GM0E0HMC"
  DTS:CreatorName="IPOTEKA\SaidnazarovOA"
  DTS:DTSID="{5D2C0D94-5081-44AD-AED9-599D90978C7A}"
  DTS:ExecutableType="Microsoft.Package"
  DTS:LastModifiedProductVersion="16.0.5556.0"
  DTS:LocaleID="1033"
  DTS:ObjectName="Package"
  DTS:PackageType="5"
  DTS:VersionBuild="53"
  DTS:VersionGUID="{EEF871B3-866F-42F4-85BF-56FFCD2589B7}">
  <DTS:Property
    DTS:Name="PackageFormatVersion">8</DTS:Property>
  <DTS:PackageParameters>
    <DTS:PackageParameter
      DTS:CreationName=""
      DTS:DataType="8"
      DTS:DTSID="{B553E749-B687-4375-BA83-6F1449D6CDB5}"
      DTS:ObjectName="LogTableName">
      <DTS:Property
        DTS:DataType="8"
        DTS:Name="ParameterValue">LOG.CSOracleToSTG</DTS:Property>
    </DTS:PackageParameter>
    <DTS:PackageParameter
      DTS:CreationName=""
      DTS:DataType="8"
      DTS:DTSID="{58D68D47-AF09-4CC7-8E50-C2C61ECF0122}"
      DTS:ObjectName="MappingControlTableName">
      <DTS:Property
        DTS:DataType="8"
        DTS:Name="ParameterValue">CTRL.MappingOracleToSTG</DTS:Property>
    </DTS:PackageParameter>
    <DTS:PackageParameter
      DTS:CreationName=""
      DTS:DataType="8"
      DTS:DTSID="{091EF26A-2E53-4F93-8095-B76A1DE55518}"
      DTS:ObjectName="MasterControlTableName">
      <DTS:Property
        DTS:DataType="8"
        DTS:Name="ParameterValue">CTRL.MasterOracleToSTG</DTS:Property>
    </DTS:PackageParameter>
    <DTS:PackageParameter
      DTS:CreationName=""
      DTS:DataType="8"
      DTS:DTSID="{F55E157C-E062-4702-A75D-44663D2B8707}"
      DTS:ObjectName="OracleConnectionString">
      <DTS:Property
        DTS:DataType="8"
        DTS:Name="ParameterValue">User Id=fillin;Password=fillin;Data Source=fillin</DTS:Property>
    </DTS:PackageParameter>
    <DTS:PackageParameter
      DTS:CreationName=""
      DTS:DataType="8"
      DTS:DTSID="{F76F0B34-B08B-46CE-B239-4369BEB3488B}"
      DTS:ObjectName="SQLServerConnectionString">
      <DTS:Property
        DTS:DataType="8"
        DTS:Name="ParameterValue">Data Source=fillin;Initial Catalog=filin;Integrated Security=True;TrustServerCertificate=True;</DTS:Property>
    </DTS:PackageParameter>
  </DTS:PackageParameters>
  <DTS:Variables />
  <DTS:Executables>
    <DTS:Executable
      DTS:refId="Package\Script v-5"
      DTS:CreationName="Microsoft.ScriptTask"
      DTS:Description="Script Task"
      DTS:DTSID="{0627ca70-50e4-46cc-b803-83123fb668c9}"
      DTS:ExecutableType="Microsoft.ScriptTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="Script v-5"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <ScriptProject
          Name="ST_9412d6971c9344bebc55939f3eea8256"
          VSTAMajorVersion="16"
          VSTAMinorVersion="0"
          Language="CSharp"
          ReadOnlyVariables="System::ClusterID,System::ClusterNodeCount,System::ContainerStartTime,System::CreationName,System::LocaleID,System::ParentContainerGUID,System::TaskID,System::TaskName,System::TaskTransactionOption,System::CancelEvent,System::CreationDate,System::CreatorComputerName,System::CreatorName,System::ExecutionInstanceGUID,System::FailedConfigurations,System::IgnoreConfigurationsOnLoad,System::InteractiveMode,System::LastModifiedProductVersion,System::MachineName,System::OfflineMode,System::PackageID,System::PackageName,System::ProductVersion,System::ServerExecutionID,System::StartTime,System::UserName,System::VersionBuild,System::VersionComments,System::VersionGUID,System::VersionMajor,System::VersionMinor,$Package::LogTableName,$Package::MappingControlTableName,$Package::MasterControlTableName,$Package::OracleConnectionString,$Package::SQLServerConnectionString">
          <ProjectItem
            Name="Properties\AssemblyInfo.cs"
            Encoding="UTF8"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("ST_1e823dcd85bb4b9580689d919333b656")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("ST_1e823dcd85bb4b9580689d919333b656")]
[assembly: AssemblyCopyright("Copyright @  2024")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.*")]]]></ProjectItem>
          <ProjectItem
            Name="Properties\Resources.resx"
            Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></ProjectItem>
          <ProjectItem
            Name="ScriptMain.cs"
            Encoding="UTF8"><![CDATA[#region Help: Introduction to the script task
/* The Script Task allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services control flow. 
 * 
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script task. */
#endregion

#region Namespaces
using System;
using System.Data;
using Microsoft.SqlServer.Dts.Runtime;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Oracle.ManagedDataAccess.Client;
using System.Data.SqlClient;
using System.IO;
#endregion

namespace ST_55c9b5057b574cf0a53a59ad88cd5f3a
{
    [Microsoft.SqlServer.Dts.Tasks.ScriptTask.SSISScriptTaskEntryPointAttribute]
    public partial class ScriptMain : Microsoft.SqlServer.Dts.Tasks.ScriptTask.VSTARTScriptObjectModelBase
    {
        private string loadID;

        public void Main()
        {
            loadID = (string)Dts.Variables["System::ExecutionInstanceGUID"].Value;

            // Use package parameters instead of variables
            string oracleConnectionString = (string)Dts.Variables["$Package::OracleConnectionString"].Value;
            string sqlServerConnectionString = (string)Dts.Variables["$Package::SQLServerConnectionString"].Value;
            string masterControlTableName = (string)Dts.Variables["$Package::MasterControlTableName"].Value;
            string mappingControlTableName = (string)Dts.Variables["$Package::MappingControlTableName"].Value;
            string logTableName = (string)Dts.Variables["$Package::LogTableName"].Value;

            try
            {
                LogStep("Start", "Process started", "", false, sqlServerConnectionString, logTableName);

                // Step 1: Read control table from SQL Server
                DataTable controlTable = new DataTable();

                using (SqlConnection sqlConnection = new SqlConnection(sqlServerConnectionString))
                {
                    sqlConnection.Open();
                    using (SqlCommand sqlCommand = new SqlCommand($"SELECT * FROM {masterControlTableName} WHERE IsActive = 1", sqlConnection))
                    {
                        using (SqlDataAdapter sqlDataAdapter = new SqlDataAdapter(sqlCommand))
                        {
                            sqlDataAdapter.Fill(controlTable);
                        }
                    }
                    sqlConnection.Close();
                }
                LogStep("Read Control Table", "Control table read successfully", "", false, sqlServerConnectionString, logTableName);

                // Process each active source table
                foreach (DataRow masterRow in controlTable.Rows)
                {
                    string sourceTableName = masterRow["SourceTableName"].ToString();
                    string sourceQuery = masterRow["SourceQuery"].ToString();
                    string sourceFilterCondition = masterRow["SourceFilterCondition"].ToString();
                    string targetTableName = masterRow["TargetTableName"].ToString();

                    DataTable sourceDataTable = new DataTable();

                    try
                    {
                        // Step 2: Read data from Oracle
                        using (OracleConnection oracleConnection = new OracleConnection(oracleConnectionString))
                        {
                            oracleConnection.Open();

                            if (!string.IsNullOrEmpty(sourceQuery))
                            {
                                // Use SourceQuery if provided
                                using (OracleCommand oracleCommand = new OracleCommand(sourceQuery, oracleConnection))
                                {
                                    using (OracleDataReader reader = oracleCommand.ExecuteReader())
                                    {
                                        sourceDataTable.Load(reader);
                                    }
                                }
                            }
                            else
                            {
                                // Construct query based on mapping table if SourceQuery is null
                                using (SqlConnection sqlConnection = new SqlConnection(sqlServerConnectionString))
                                {
                                    sqlConnection.Open();
                                    DataTable mappingTable = new DataTable();
                                    using (SqlCommand sqlCommand = new SqlCommand($"SELECT * FROM {mappingControlTableName} WHERE MasterId = @MasterId AND IsActive = 1", sqlConnection))
                                    {
                                        sqlCommand.Parameters.AddWithValue("@MasterId", masterRow["Id"]);
                                        using (SqlDataAdapter sqlDataAdapter = new SqlDataAdapter(sqlCommand))
                                        {
                                            sqlDataAdapter.Fill(mappingTable);
                                        }
                                    }

                                    // Build the query to select and convert columns from Oracle
                                    StringBuilder selectQueryBuilder = new StringBuilder();
                                    selectQueryBuilder.Append("SELECT ");
                                    foreach (DataRow mappingRow in mappingTable.Rows)
                                    {
                                        string sourceColumnName = mappingRow["SourceColumnName"].ToString();
                                        string sourceDataType = mappingRow["SourceDataType"].ToString();
                                        string sourceCustomConvert = mappingRow["SourceCustomConvert"].ToString();

                                        if (!string.IsNullOrEmpty(sourceCustomConvert))
                                        {
                                            selectQueryBuilder.Append($"{sourceCustomConvert} AS {sourceColumnName}, ");
                                        }
                                        else if (string.IsNullOrEmpty(sourceDataType))
                                        {
                                            selectQueryBuilder.Append($"{sourceColumnName}, ");
                                        }
                                        else
                                        {
                                            selectQueryBuilder.Append($"CAST({sourceColumnName} AS {sourceDataType}) AS {sourceColumnName}, ");
                                        }
                                    }
                                    selectQueryBuilder.Length -= 2; // Remove the last comma and space
                                    selectQueryBuilder.Append($" FROM {sourceTableName}");

                                    // Add the SourceFilterCondition if provided
                                    if (!string.IsNullOrEmpty(sourceFilterCondition))
                                    {
                                        selectQueryBuilder.Append($" {sourceFilterCondition}");
                                    }

                                    File.WriteAllText(@"C:\Users\SaidnazarovOA\OneDrive - Ipoteka Bank\Documents\SQLStaging\LastRanQuery.txt", selectQueryBuilder.ToString());

                                    using (OracleCommand oracleCommand = new OracleCommand(selectQueryBuilder.ToString(), oracleConnection))
                                    {
                                        using (OracleDataReader reader = oracleCommand.ExecuteReader())
                                        {
                                            sourceDataTable.Load(reader);
                                        }
                                    }
                                }
                            }
                            oracleConnection.Close();
                        }
                        LogStep("Read Source Data", $"Data read successfully from {sourceTableName}", "", false, sqlServerConnectionString, logTableName);

                        // Step 3: Drop and create target table in SQL Server
                        CreateTargetTable(sqlServerConnectionString, targetTableName, masterRow["Id"].ToString(), mappingControlTableName);
                        LogStep("Create Target Table", $"Target table {targetTableName} created successfully", "", false, sqlServerConnectionString, logTableName);

                        // Step 4: Insert data into SQL Server using SqlBulkCopy
                        using (SqlConnection sqlConnection = new SqlConnection(sqlServerConnectionString))
                        {
                            sqlConnection.Open();
                            using (SqlBulkCopy sqlBulkCopy = new SqlBulkCopy(sqlConnection))
                            {
                                sqlBulkCopy.DestinationTableName = targetTableName;

                                // Get column mappings from the control table
                                DataTable mappingTable = new DataTable();
                                using (SqlCommand sqlCommand = new SqlCommand($"SELECT * FROM {mappingControlTableName} WHERE MasterId = @MasterId AND IsActive = 1", sqlConnection))
                                {
                                    sqlCommand.Parameters.AddWithValue("@MasterId", masterRow["Id"]);
                                    using (SqlDataAdapter sqlDataAdapter = new SqlDataAdapter(sqlCommand))
                                    {
                                        sqlDataAdapter.Fill(mappingTable);
                                    }
                                }

                                // Add column mappings
                                foreach (DataRow mappingRow in mappingTable.Rows)
                                {
                                    string sourceColumn = mappingRow["SourceColumnName"].ToString();
                                    string targetColumn = mappingRow["TargetColumnName"].ToString();
                                    sqlBulkCopy.ColumnMappings.Add(sourceColumn, targetColumn);
                                }

                                sqlBulkCopy.WriteToServer(sourceDataTable);
                            }
                            sqlConnection.Close();
                        }
                        LogStep("Insert Data", $"Data inserted successfully into {targetTableName}", "", false, sqlServerConnectionString, logTableName);
                    }
                    catch (Exception ex)
                    {
                        LogStep("Error", $"Error processing {sourceTableName}", ex.Message, true, sqlServerConnectionString, logTableName);
                        throw; // Re-throw the exception to stop the execution
                    }
                }

                LogStep("End", "Process completed successfully", "", false, sqlServerConnectionString, logTableName);
                Dts.TaskResult = (int)ScriptResults.Success;
            }
            catch (Exception ex)
            {
                LogStep("Critical Error", "Critical error occurred", ex.Message, true, sqlServerConnectionString, logTableName);
                Dts.TaskResult = (int)ScriptResults.Failure;
            }
        }

        private void LogStep(string stepName, string stepMessage, string stepErrorMessage, bool isError, string connectionString, string logTableName)
        {
            using (SqlConnection sqlConnection = new SqlConnection(connectionString))
            {
                sqlConnection.Open();
                using (SqlCommand sqlCommand = new SqlCommand($"INSERT INTO {logTableName} (StepName, StepMessage, StepErrorMessage, LoadID, IsError) VALUES (@StepName, @StepMessage, @StepErrorMessage, @LoadID, @IsError)", sqlConnection))
                {
                    sqlCommand.Parameters.AddWithValue("@StepName", stepName);
                    sqlCommand.Parameters.AddWithValue("@StepMessage", stepMessage);
                    sqlCommand.Parameters.AddWithValue("@StepErrorMessage", stepErrorMessage);
                    sqlCommand.Parameters.AddWithValue("@LoadID", loadID);
                    sqlCommand.Parameters.AddWithValue("@IsError", isError ? 1 : 0);
                    sqlCommand.ExecuteNonQuery();
                }
                sqlConnection.Close();
            }
        }

        private void CreateTargetTable(string sqlServerConnectionString, string targetTableName, string masterId, string mappingControlTableName)
        {
            using (SqlConnection sqlConnection = new SqlConnection(sqlServerConnectionString))
            {
                sqlConnection.Open();
                StringBuilder createTableQuery = new StringBuilder();

                // Drop the target table if it already exists
                createTableQuery.Append($"IF OBJECT_ID('{targetTableName}', 'U') IS NOT NULL DROP TABLE {targetTableName}; ");

                // Create the target table
                createTableQuery.Append($"CREATE TABLE {targetTableName} (");

                // Get the columns and their target data types from the mapping table
                using (SqlCommand sqlCommand = new SqlCommand($"SELECT * FROM {mappingControlTableName} WHERE MasterId = @MasterId AND IsActive = 1", sqlConnection))
                {
                    sqlCommand.Parameters.AddWithValue("@MasterId", masterId);
                    using (SqlDataReader reader = sqlCommand.ExecuteReader())
                    {
                        while (reader.Read())
                        {
                            string targetColumnName = reader["TargetColumnName"].ToString();
                            string targetDataType = reader["TargetDataType"].ToString();
                            createTableQuery.Append($"{targetColumnName} {targetDataType}, ");
                        }
                    }
                }

                createTableQuery.Append($"[LoadTimestamp] [DATETIME] DEFAULT GETDATE(), ");
                createTableQuery.Append($"[LoadID] [uniqueidentifier] DEFAULT '{loadID}', ");
                createTableQuery.Length -= 2; // Remove the last comma and space
                createTableQuery.Append(");");

                using (SqlCommand sqlCommand = new SqlCommand(createTableQuery.ToString(), sqlConnection))
                {
                    sqlCommand.ExecuteNonQuery();
                }
                sqlConnection.Close();
            }
        }

        #region ScriptResults declaration
        enum ScriptResults
        {
            Success = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Success,
            Failure = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Failure
        };
        #endregion
    }
}]]></ProjectItem>
          <ProjectItem
            Name="ST_9412d6971c9344bebc55939f3eea8256.csproj"
            Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?><Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003"><PropertyGroup><ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids><Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration><Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform><ProductVersion>8.0.30703</ProductVersion><SchemaVersion>2.0</SchemaVersion><ProjectGuid>{80D1B549-EA7D-420F-8032-C6067FBF29BE}</ProjectGuid><OutputType>Library</OutputType><AppDesignerFolder>Properties</AppDesignerFolder><RootNamespace>ST_1e823dcd85bb4b9580689d919333b656</RootNamespace><AssemblyName>ST_9412d6971c9344bebc55939f3eea8256</AssemblyName><TargetFrameworkVersion>v4.7</TargetFrameworkVersion><FileAlignment>512</FileAlignment><ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>true</ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch><TargetFrameworkProfile></TargetFrameworkProfile></PropertyGroup><PropertyGroup Condition=" '$(Configuration)' == 'Debug' "><DebugSymbols>true</DebugSymbols><DebugType>full</DebugType><Optimize>false</Optimize><OutputPath>.\bin\Debug\</OutputPath><EnableUnmanagedDebugging>false</EnableUnmanagedDebugging><DefineConstants>DEBUG;TRACE</DefineConstants><ErrorReport>prompt</ErrorReport><WarningLevel>4</WarningLevel></PropertyGroup><PropertyGroup Condition=" '$(Configuration)' == 'Release' "><DebugSymbols>false</DebugSymbols><Optimize>true</Optimize><OutputPath>.\bin\Release\</OutputPath><EnableUnmanagedDebugging>false</EnableUnmanagedDebugging><DefineConstants>TRACE</DefineConstants><ErrorReport>prompt</ErrorReport><WarningLevel>4</WarningLevel></PropertyGroup><ItemGroup><Reference Include="Oracle.ManagedDataAccess, Version=4.122.19.1, Culture=neutral, PublicKeyToken=89b483f429c47342, processorArchitecture=MSIL" /><Reference Include="System" /><Reference Include="System.Data" /><Reference Include="System.Windows.Forms" /><Reference Include="System.Xml" /><Reference Include="Microsoft.SqlServer.ManagedDTS, Version=16.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" /><Reference Include="Microsoft.SqlServer.ScriptTask, Version=16.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" /></ItemGroup><ItemGroup><AppDesigner Include="Properties\" /><Compile Include="Properties\AssemblyInfo.cs"><SubType>Code</SubType></Compile><EmbeddedResource Include="Properties\Resources.resx"><Generator>ResXFileCodeGenerator</Generator><LastGenOutput>Resources.Designer.cs</LastGenOutput></EmbeddedResource><Compile Include="Properties\Resources.Designer.cs"><AutoGen>True</AutoGen><DependentUpon>Resources.resx</DependentUpon></Compile><None Include="Properties\Settings.settings"><Generator>SettingsSingleFileGenerator</Generator><LastGenOutput>Settings.Designer.cs</LastGenOutput></None><Compile Include="Properties\Settings.Designer.cs"><AutoGen>True</AutoGen><DependentUpon>Settings.settings</DependentUpon></Compile><Compile Include="ScriptMain.cs"><SubType>Code</SubType></Compile></ItemGroup><ItemGroup><WCFMetadata Include="Connected Services\" /></ItemGroup><!-- Include the build rules for a C# project.--><Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" /><ProjectExtensions><VisualStudio><FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}"><ProjectProperties HostName="VSTAHostName" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="cs" TemplatesPath="" /><Host Name="ScriptTask" /><ProjectClient><HostIdentifier>SSIS_ST160</HostIdentifier></ProjectClient></FlavorProperties></VisualStudio></ProjectExtensions></Project>]]></ProjectItem>
          <ProjectItem
            Name="Project"
            Encoding="UTF16LE"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="4.0" schemaVersion="1.0">
  <msb:PropertyGroup>
    <msb:CodeName>ST_bfa81641850148538cb0d111248fe08d</msb:CodeName>
    <msb:Language>msBuild</msb:Language>
    <msb:DisplayName>ST_bfa81641850148538cb0d111248fe08d</msb:DisplayName>
    <msb:ProjectId>{9A291242-BD6E-45B1-A304-21D2C6C2F2D4}</msb:ProjectId>
  </msb:PropertyGroup>
  <msb:ItemGroup>
    <msb:Project Include="ST_9412d6971c9344bebc55939f3eea8256.csproj" />
    <msb:File Include="ScriptMain.cs" />
    <msb:File Include="Properties\Settings.settings" />
    <msb:File Include="Properties\AssemblyInfo.cs" />
    <msb:File Include="Properties\Resources.resx" />
    <msb:File Include="Properties\Resources.Designer.cs" />
    <msb:File Include="Properties\Settings.Designer.cs" />
  </msb:ItemGroup>
</c:Project>]]></ProjectItem>
          <ProjectItem
            Name="Properties\Settings.Designer.cs"
            Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_1e823dcd85bb4b9580689d919333b656.Properties.Settings.get_Default():ST_1e823dcd85bb4b9580689d919333b656.Properties.Sett" +
    "ings")]

namespace ST_1e823dcd85bb4b9580689d919333b656.Properties {
    
    
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
    }
}]]></ProjectItem>
          <ProjectItem
            Name="Properties\Settings.settings"
            Encoding="UTF8"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></ProjectItem>
          <ProjectItem
            Name="Properties\Resources.Designer.cs"
            Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_1e823dcd85bb4b9580689d919333b656.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_1e823dcd85bb4b9580689d919333b656.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_1e823dcd85bb4b9580689d919333b656.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace ST_1e823dcd85bb4b9580689d919333b656.Properties {
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if ((resourceMan == null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ST_1e823dcd85bb4b9580689d919333b656.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
    }
}]]></ProjectItem>
          <BinaryItem
            Name="ST_bfa81641850148538cb0d111248fe08d.dll">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
I34AAEQGAABsCQAAI1N0cmluZ3MAAAAAsA8AABwKAAAjVVMAzBkAABAAAAAjR1VJRAAAANwZAACA
AgAAI0Jsb2IAAAAAAAAAAgAAAVcdogEJAwAAAPoBMwAWAAABAAAAOQAAAAUAAAAHAAAACwAAAAsA
AABCAAAAAgAAABAAAAADAAAAAgAAAAMAAAAEAAAAAQAAAAYAAAABAAAAAQAAAAAAOgUBAAAAAAAG
AIMDXwcGABIEXwcGAM8CTAcPANMHAAAGAPwCwgUGAGYDwgUGAEcDwgUGAPkDwgUGAKMDwgUGALwD
wgUGABMDwgUGAC4DTQQKANcD6QQKACUC6QQOAB8BbAAOAD4G5ggOANQA5ggOAAAH5ggGACUHOwgO
ACoJbAASAC0GxggSAMYAxggSAJYGxggGAMMGEQkGAEQBcAUOAD8J5ggGAEwGcAUOAKcG5ggGAHcF
cAUGALICTAcGAKQIcAUGANUGfwcGAGkGrQUWAIICJAUWAOMCJAUWAFwCmAUGAJcCXwcKABIF6QQa
ABUI0AEaADsB0AEGAK0EcAUOACAGVgYOAPIGVgYOAA4GbAAOAEECbAAOAH0GbAAOAPcF5ggOAOUG
5ggGAHQBFwAOANQF5ggOAGcE5ggGAAEAcAUOALwAVgYOAIkGVgYGAPABcAUGAFABcAUGADYJwgUA
AAAABwAAAAAAAQABAAEAEACNBUgAOQABAAEAAAAQAIYH4gd9AAIABQAAARAAMgjiB5EABAAJAAMB
AACGCAAAdQAFAAwAAQAQAGUBEQB8BWgBEQAVAm0BEQDmAHIBBgZAAHYBVoB2CHkBVoD1AXkBUCAA
AAAAhgCTBQYAAQD8KAAAAACBAHUGfQEBANwpAAAAAIEAKQGHAQcAsCsAAAAAhhg/BwYACwC4KwAA
AACDGD8HBgALAMArAAAAAJMI0QaPAQsA7CsAAAAAkwj9AZUBCwDzKwAAAACTCAkCmwELAPsrAAAA
AJYIqwiiAQwAAiwAAAAAhhg/BwYADAAKLAAAAACRGEUHpwEMAAAAAQDHAQAAAgACAQAAAwAOAQAA
BAAdBwAABQCaBAAABgB5AQAAAQCABAAAAgC3AQAAAwClAAAABACGAQAAAQBHBAkAPwcBABEAPwcG
ABkAPwcKACkAPwcQADEAPwcQADkAPwcQAEEAPwcQAEkAPwcQAFEAPwcQAFkAPwcQAGEAPwcQAGkA
PwcGAPEAPwcGABkBPwcVACkBPwcGAHEAfghhADEBEQhnADkBZwVtAEEBMAR0AHkAPwcGAIEAPwcQ
AFEBiAUGAEkBnQh4AIkAPwd/AJEAPweGAFkBYgWMAMkAegIGAFEBdAIGAHkAlAiSAGkBMQeYAJkA
/Ah0AKEAZwWdAPkAqwSiAKkAPwcQAEkBWwmmALEAPwerALEAtQayAHkAswC3AIkATgi+AHkBOgTE
AMEAPwcGAMEA3wDMAEkBnQjSAEkBnQjaAEkBnQjgAJkACAnmAMEAtATqAMEAvwQBAIkBHQnuANEA
Pwf0ANEAngEQANEAHwj6AJEBuAAAAdEADwcIAdkA9gCiADEBtwgBAKkBSwnqAIkAtQYkAbEBZwWd
ALEBrgDmAHEAPwcGAPkAPwcGALkBYgEpAbkBMgkyAQEBPwc4ASEBPwcGAAgAGABbAQgAHABgASkA
cwDkAS4ACwC8AS4AEwDFAS4AGwDkAS4AIwDtAS4AKwAWAi4AMwAWAi4AOwAWAi4AQwDtAS4ASwAc
Ai4AUwAWAi4AWwAzAkMAYwBgAUkAcwDkAWMAawBgAYEAewBgARwADgEVAQMAAQAEAAMAAADVBqsB
AAAdArEBAACvCLcBAgAGAAMAAgAHAAUAAQAIAAUAAgAJAAcABIAAAAEAAAD8IotPAAAAAAAAgQAA
AAQAAAAAAAAAAAAAAEABeAAAAAAAEAAAAAAAAAAAAAAASQHKBAAAAAAEAAAAAAAAAAAAAABAAWwA
AAAAAAQAegATAAEAAAAAAFIBXQgAAAAABAAAAAAAAAAAAAAAQAFwBQAAAAAQAAAAAAAAAAAAAABJ
ASEAAAAAAAAAAAABAAAAkAcAAAUAAgAAAABJbnQzMgA8TW9kdWxlPgBsb2FkSUQAU3lzdGVtLklP
AE1pY3Jvc29mdC5TcWxTZXJ2ZXIuTWFuYWdlZERUUwB2YWx1ZV9fAFNUXzU1YzliNTA1N2I1NzRj
ZjBhNTNhNTlhZDg4Y2Q1ZjNhAFN5c3RlbS5EYXRhAG1zY29ybGliAFNUX2JmYTgxNjQxODUwMTQ4
NTM4Y2IwZDExMTI0OGZlMDhkAG1hc3RlcklkAFJlYWQATG9hZABBZGQARGJDb21tYW5kAE9yYWNs
ZUNvbW1hbmQAU3FsQ29tbWFuZABBcHBlbmQAZGVmYXVsdEluc3RhbmNlAGdldF9NZXNzYWdlAHN0
ZXBNZXNzYWdlAHN0ZXBFcnJvck1lc3NhZ2UARGF0YVRhYmxlAENyZWF0ZVRhcmdldFRhYmxlAFZh
cmlhYmxlAElEaXNwb3NhYmxlAFJ1bnRpbWVUeXBlSGFuZGxlAEdldFR5cGVGcm9tSGFuZGxlAEZp
bGUAbG9nVGFibGVOYW1lAG1hcHBpbmdDb250cm9sVGFibGVOYW1lAHNldF9EZXN0aW5hdGlvblRh
YmxlTmFtZQB0YXJnZXRUYWJsZU5hbWUAc3RlcE5hbWUATWljcm9zb2Z0LlNxbFNlcnZlci5EdHMu
UnVudGltZQBUeXBlAEZhaWx1cmUAZ2V0X0N1bHR1cmUAc2V0X0N1bHR1cmUAcmVzb3VyY2VDdWx0
dXJlAFZTVEFSVFNjcmlwdE9iamVjdE1vZGVsQmFzZQBJbnRlcm5hbERhdGFDb2xsZWN0aW9uQmFz
ZQBBcHBsaWNhdGlvblNldHRpbmdzQmFzZQBDbG9zZQBEaXNwb3NlAEVkaXRvckJyb3dzYWJsZVN0
YXRlAENvbXBpbGVyR2VuZXJhdGVkQXR0cmlidXRlAERlYnVnZ2VyTm9uVXNlckNvZGVBdHRyaWJ1
dGUARGVidWdnYWJsZUF0dHJpYnV0ZQBFZGl0b3JCcm93c2FibGVBdHRyaWJ1dGUAQXNzZW1ibHlU
aXRsZUF0dHJpYnV0ZQBBc3NlbWJseVRyYWRlbWFya0F0dHJpYnV0ZQBUYXJnZXRGcmFtZXdvcmtB
dHRyaWJ1dGUAQXNzZW1ibHlDb25maWd1cmF0aW9uQXR0cmlidXRlAEFzc2VtYmx5RGVzY3JpcHRp
b25BdHRyaWJ1dGUAQ29tcGlsYXRpb25SZWxheGF0aW9uc0F0dHJpYnV0ZQBBc3NlbWJseVByb2R1
Y3RBdHRyaWJ1dGUAQXNzZW1ibHlDb3B5cmlnaHRBdHRyaWJ1dGUAU1NJU1NjcmlwdFRhc2tFbnRy
eVBvaW50QXR0cmlidXRlAEFzc2VtYmx5Q29tcGFueUF0dHJpYnV0ZQBSdW50aW1lQ29tcGF0aWJp
bGl0eUF0dHJpYnV0ZQBnZXRfVmFsdWUAQWRkV2l0aFZhbHVlAHZhbHVlAFN5c3RlbS5SdW50aW1l
LlZlcnNpb25pbmcAU3FsQnVsa0NvcHlDb2x1bW5NYXBwaW5nAHNxbFNlcnZlckNvbm5lY3Rpb25T
dHJpbmcAY29ubmVjdGlvblN0cmluZwBUb1N0cmluZwBnZXRfTGVuZ3RoAHNldF9MZW5ndGgATWlj
cm9zb2Z0LlNxbFNlcnZlci5TY3JpcHRUYXNrAE1pY3Jvc29mdC5TcWxTZXJ2ZXIuRHRzLlRhc2tz
LlNjcmlwdFRhc2sAU2NyaXB0T2JqZWN0TW9kZWwAU3lzdGVtLkNvbXBvbmVudE1vZGVsAFNUX2Jm
YTgxNjQxODUwMTQ4NTM4Y2IwZDExMTI0OGZlMDhkLmRsbABGaWxsAGdldF9JdGVtAFN5c3RlbQBF
bnVtAHJlc291cmNlTWFuAE9wZW4AU2NyaXB0TWFpbgBTeXN0ZW0uQ29uZmlndXJhdGlvbgBTeXN0
ZW0uR2xvYmFsaXphdGlvbgBTeXN0ZW0uUmVmbGVjdGlvbgBTcWxCdWxrQ29weUNvbHVtbk1hcHBp
bmdDb2xsZWN0aW9uAFNxbFBhcmFtZXRlckNvbGxlY3Rpb24ARGF0YVJvd0NvbGxlY3Rpb24ARGJD
b25uZWN0aW9uAE9yYWNsZUNvbm5lY3Rpb24AU3FsQ29ubmVjdGlvbgBFeGNlcHRpb24AU3lzdGVt
LkRhdGEuQ29tbW9uAEN1bHR1cmVJbmZvAExvZ1N0ZXAASURhdGFSZWFkZXIARGJEYXRhUmVhZGVy
AE9yYWNsZURhdGFSZWFkZXIAU3FsRGF0YVJlYWRlcgBFeGVjdXRlUmVhZGVyAFN0cmluZ0J1aWxk
ZXIAZ2V0X1Jlc291cmNlTWFuYWdlcgBTcWxQYXJhbWV0ZXIARGJEYXRhQWRhcHRlcgBTcWxEYXRh
QWRhcHRlcgBXcml0ZVRvU2VydmVyAGlzRXJyb3IASUVudW1lcmF0b3IAR2V0RW51bWVyYXRvcgAu
Y3RvcgAuY2N0b3IAU3lzdGVtLkRpYWdub3N0aWNzAFN5c3RlbS5SdW50aW1lLkNvbXBpbGVyU2Vy
dmljZXMAU3lzdGVtLlJlc291cmNlcwBTVF8xZTgyM2RjZDg1YmI0Yjk1ODA2ODlkOTE5MzMzYjY1
Ni5Qcm9wZXJ0aWVzLlJlc291cmNlcy5yZXNvdXJjZXMARGVidWdnaW5nTW9kZXMAU1RfMWU4MjNk
Y2Q4NWJiNGI5NTgwNjg5ZDkxOTMzM2I2NTYuUHJvcGVydGllcwBnZXRfVmFyaWFibGVzAGdldF9D
b2x1bW5NYXBwaW5ncwBTZXR0aW5ncwBTeXN0ZW0uQ29sbGVjdGlvbnMAZ2V0X1BhcmFtZXRlcnMA
T3JhY2xlLk1hbmFnZWREYXRhQWNjZXNzAFN1Y2Nlc3MAZ2V0X0R0cwBTY3JpcHRSZXN1bHRzAGdl
dF9Sb3dzAENvbmNhdABPYmplY3QAZ2V0X0RlZmF1bHQAc2V0X1Rhc2tSZXN1bHQAT3JhY2xlLk1h
bmFnZWREYXRhQWNjZXNzLkNsaWVudABTeXN0ZW0uRGF0YS5TcWxDbGllbnQAZ2V0X0N1cnJlbnQA
TW92ZU5leHQAU3lzdGVtLlRleHQAV3JpdGVBbGxUZXh0AERhdGFSb3cAZ2V0X0Fzc2VtYmx5AFNx
bEJ1bGtDb3B5AEV4ZWN1dGVOb25RdWVyeQBJc051bGxPckVtcHR5AAAAAAA7UwB5AHMAdABlAG0A
OgA6AEUAeABlAGMAdQB0AGkAbwBuAEkAbgBzAHQAYQBuAGMAZQBHAFUASQBEAABBJABQAGEAYwBr
AGEAZwBlADoAOgBPAHIAYQBjAGwAZQBDAG8AbgBuAGUAYwB0AGkAbwBuAFMAdAByAGkAbgBnAABH
JABQAGEAYwBrAGEAZwBlADoAOgBTAFEATABTAGUAcgB2AGUAcgBDAG8AbgBuAGUAYwB0AGkAbwBu
AFMAdAByAGkAbgBnAABBJABQAGEAYwBrAGEAZwBlADoAOgBNAGEAcwB0AGUAcgBDAG8AbgB0AHIA
bwBsAFQAYQBiAGwAZQBOAGEAbQBlAABDJABQAGEAYwBrAGEAZwBlADoAOgBNAGEAcABwAGkAbgBn
AEMAbwBuAHQAcgBvAGwAVABhAGIAbABlAE4AYQBtAGUAAC0kAFAAYQBjAGsAYQBnAGUAOgA6AEwA
bwBnAFQAYQBiAGwAZQBOAGEAbQBlAAALUwB0AGEAcgB0AAAfUAByAG8AYwBlAHMAcwAgAHMAdABh
AHIAdABlAGQAAAEAHVMARQBMAEUAQwBUACAAKgAgAEYAUgBPAE0AIAAAJyAAVwBIAEUAUgBFACAA
SQBzAEEAYwB0AGkAdgBlACAAPQAgADEAACVSAGUAYQBkACAAQwBvAG4AdAByAG8AbAAgAFQAYQBi
AGwAZQAAP0MAbwBuAHQAcgBvAGwAIAB0AGEAYgBsAGUAIAByAGUAYQBkACAAcwB1AGMAYwBlAHMA
cwBmAHUAbABsAHkAAB9TAG8AdQByAGMAZQBUAGEAYgBsAGUATgBhAG0AZQAAF1MAbwB1AHIAYwBl
AFEAdQBlAHIAeQAAK1MAbwB1AHIAYwBlAEYAaQBsAHQAZQByAEMAbwBuAGQAaQB0AGkAbwBuAAAf
VABhAHIAZwBlAHQAVABhAGIAbABlAE4AYQBtAGUAAFkgAFcASABFAFIARQAgAE0AYQBzAHQAZQBy
AEkAZAAgAD0AIABAAE0AYQBzAHQAZQByAEkAZAAgAEEATgBEACAASQBzAEEAYwB0AGkAdgBlACAA
PQAgADEAABNAAE0AYQBzAHQAZQByAEkAZAAABUkAZAAAD1MARQBMAEUAQwBUACAAACFTAG8AdQBy
AGMAZQBDAG8AbAB1AG0AbgBOAGEAbQBlAAAdUwBvAHUAcgBjAGUARABhAHQAYQBUAHkAcABlAAAn
UwBvAHUAcgBjAGUAQwB1AHMAdABvAG0AQwBvAG4AdgBlAHIAdAAACSAAQQBTACAAAAUsACAAAAtD
AEEAUwBUACgAAAspACAAQQBTACAAAA0gAEYAUgBPAE0AIAAAAyAAAICpQwA6AFwAVQBzAGUAcgBz
AFwAUwBhAGkAZABuAGEAegBhAHIAbwB2AE8AQQBcAE8AbgBlAEQAcgBpAHYAZQAgAC0AIABJAHAA
bwB0AGUAawBhACAAQgBhAG4AawBcAEQAbwBjAHUAbQBlAG4AdABzAFwAUwBRAEwAUwB0AGEAZwBp
AG4AZwBcAEwAYQBzAHQAUgBhAG4AUQB1AGUAcgB5AC4AdAB4AHQAASFSAGUAYQBkACAAUwBvAHUA
cgBjAGUAIABEAGEAdABhAAA5RABhAHQAYQAgAHIAZQBhAGQAIABzAHUAYwBjAGUAcwBzAGYAdQBs
AGwAeQAgAGYAcgBvAG0AIAAAJ0MAcgBlAGEAdABlACAAVABhAHIAZwBlAHQAIABUAGEAYgBsAGUA
ABtUAGEAcgBnAGUAdAAgAHQAYQBiAGwAZQAgAAArIABjAHIAZQBhAHQAZQBkACAAcwB1AGMAYwBl
AHMAcwBmAHUAbABsAHkAACFUAGEAcgBnAGUAdABDAG8AbAB1AG0AbgBOAGEAbQBlAAAXSQBuAHMA
ZQByAHQAIABEAGEAdABhAABBRABhAHQAYQAgAGkAbgBzAGUAcgB0AGUAZAAgAHMAdQBjAGMAZQBz
AHMAZgB1AGwAbAB5ACAAaQBuAHQAbwAgAAALRQByAHIAbwByAAAjRQByAHIAbwByACAAcAByAG8A
YwBlAHMAcwBpAG4AZwAgAAAHRQBuAGQAAD1QAHIAbwBjAGUAcwBzACAAYwBvAG0AcABsAGUAdABl
AGQAIABzAHUAYwBjAGUAcwBzAGYAdQBsAGwAeQAAHUMAcgBpAHQAaQBjAGEAbAAgAEUAcgByAG8A
cgAAL0MAcgBpAHQAaQBjAGEAbAAgAGUAcgByAG8AcgAgAG8AYwBjAHUAcgByAGUAZAAAGUkATgBT
AEUAUgBUACAASQBOAFQATwAgAACBBSAAKABTAHQAZQBwAE4AYQBtAGUALAAgAFMAdABlAHAATQBl
AHMAcwBhAGcAZQAsACAAUwB0AGUAcABFAHIAcgBvAHIATQBlAHMAcwBhAGcAZQAsACAATABvAGEA
ZABJAEQALAAgAEkAcwBFAHIAcgBvAHIAKQAgAFYAQQBMAFUARQBTACAAKABAAFMAdABlAHAATgBh
AG0AZQAsACAAQABTAHQAZQBwAE0AZQBzAHMAYQBnAGUALAAgAEAAUwB0AGUAcABFAHIAcgBvAHIA
TQBlAHMAcwBhAGcAZQAsACAAQABMAG8AYQBkAEkARAAsACAAQABJAHMARQByAHIAbwByACkAABNA
AFMAdABlAHAATgBhAG0AZQAAGUAAUwB0AGUAcABNAGUAcwBzAGEAZwBlAAAjQABTAHQAZQBwAEUA
cgByAG8AcgBNAGUAcwBzAGEAZwBlAAAPQABMAG8AYQBkAEkARAAAEUAASQBzAEUAcgByAG8AcgAA
HUkARgAgAE8AQgBKAEUAQwBUAF8ASQBEACgAJwABPycALAAgACcAVQAnACkAIABJAFMAIABOAE8A
VAAgAE4AVQBMAEwAIABEAFIATwBQACAAVABBAEIATABFACAAAQU7ACAAABtDAFIARQBBAFQARQAg
AFQAQQBCAEwARQAgAAAFIAAoAAAdVABhAHIAZwBlAHQARABhAHQAYQBUAHkAcABlAABdWwBMAG8A
YQBkAFQAaQBtAGUAcwB0AGEAbQBwAF0AIABbAEQAQQBUAEUAVABJAE0ARQBdACAARABFAEYAQQBV
AEwAVAAgAEcARQBUAEQAQQBUAEUAKAApACwAIAAAS1sATABvAGEAZABJAEQAXQAgAFsAdQBuAGkA
cQB1AGUAaQBkAGUAbgB0AGkAZgBpAGUAcgBdACAARABFAEYAQQBVAEwAVAAgACcAAQcnACwAIAAB
BSkAOwAAcVMAVABfADEAZQA4ADIAMwBkAGMAZAA4ADUAYgBiADQAYgA5ADUAOAAwADYAOAA5AGQA
OQAxADkAMwAzADMAYgA2ADUANgAuAFAAcgBvAHAAZQByAHQAaQBlAHMALgBSAGUAcwBvAHUAcgBj
AGUAcwAAAAAArDhZxsvNbE+pDmJs8+vdKQAEIAEBCAMgAAEFIAEBEREEIAEBDgYgAQERgIlEBygO
Dg4ODhI9EkESRRJJEk0SUQ4ODg4SPRJVElkSXRJBEj0SYRJFEkkSTQ4ODhJlElkSXRJBEmkSPRJF
EkkODhJtEm0FIAASgJkFIAASgJ0GIAESgKEcAyAAHAYAAw4ODg4GIAIBDhJBBSABARJFBSABCBI9
BSAAEoCxBCAAEk0EIAEcDgMgAA4EAAECDgYgAgEOElUEIAASXQYgAQESgLkFIAASgL0HIAISgMEO
HAUgARJhDgcABA4ODg4OBQACDg4OBQABDh0OAyAAAgMgAAgFAAIBDg4FIAEBEkEFIAASgMkHIAIS
gM0ODgUgAQESPQYHAhJBEkUOBwcSQRJhEkUScQ4OEkUEIAAScQgAARKA3RGA4QUgABKA5QcgAgEO
EoDlCLd6XFYZNOCJCImEXc2AgMyRCIm0g/QpxHNCBAAAAAAEAQAAAAIGDgQGEoCBBAYSgIUDBhIQ
AgYIAwYRFAkgBgEODg4CDg4HIAQBDg4ODgUAABKAgQUAABKAhQYAAQESgIUEAAASEAMAAAEFCAAS
gIEFCAASgIUECAASEAgBAAgAAAAAAB4BAAEAVAIWV3JhcE5vbkV4Y2VwdGlvblRocm93cwEIAQAC
AAAAAAAoAQAjU1RfMWU4MjNkY2Q4NWJiNGI5NTgwNjg5ZDkxOTMzM2I2NTYAAAUBAAAAABYBABFD
b3B5cmlnaHQgQCAgMjAyNAAASQEAGi5ORVRGcmFtZXdvcmssVmVyc2lvbj12NC43AQBUDhRGcmFt
ZXdvcmtEaXNwbGF5TmFtZRIuTkVUIEZyYW1ld29yayA0LjcAAAC0AAAAzsrvvgEAAACRAAAAbFN5
c3RlbS5SZXNvdXJjZXMuUmVzb3VyY2VSZWFkZXIsIG1zY29ybGliLCBWZXJzaW9uPTQuMC4wLjAs
IEN1bHR1cmU9bmV1dHJhbCwgUHVibGljS2V5VG9rZW49Yjc3YTVjNTYxOTM0ZTA4OSNTeXN0ZW0u
UmVzb3VyY2VzLlJ1bnRpbWVSZXNvdXJjZVNldAIAAAAAAAAAAAAAAFBBRFBBRFC0AAAAVEkAAAAA
AAAAAAAAbkkAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGBJAAAAAAAAAAAAAAAAX0NvckRsbE1h
aW4AbXNjb3JlZS5kbGwAAAAAAP8lACAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAEAAAABgA
AIAAAAAAAAAAAAAAAAAAAAEAAQAAADAAAIAAAAAAAAAAAAAAAAAAAAEAAAAAAEgAAABYYAAAGgQA
AAAAAAAAAAAAGgQ0AAAAVgBTAF8AVgBFAFIAUwBJAE8ATgBfAEkATgBGAE8AAAAAAL0E7/4AAAEA
AAABAItP/CIAAAEAi0/8Ij8AAAAAAAAABAAAAAIAAAAAAAAAAAAAAAAAAABEAAAAAQBWAGEAcgBG
AGkAbABlAEkAbgBmAG8AAAAAACQABAAAAFQAcgBhAG4AcwBsAGEAdABpAG8AbgAAAAAAAACwBHoD
AAABAFMAdAByAGkAbgBnAEYAaQBsAGUASQBuAGYAbwAAAFYDAAABADAAMAAwADAAMAA0AGIAMAAA
ABoAAQABAEMAbwBtAG0AZQBuAHQAcwAAAAAAAAAiAAEAAQBDAG8AbQBwAGEAbgB5AE4AYQBtAGUA
AAAAAAAAAABwACQAAQBGAGkAbABlAEQAZQBzAGMAcgBpAHAAdABpAG8AbgAAAAAAUwBUAF8AMQBl
ADgAMgAzAGQAYwBkADgANQBiAGIANABiADkANQA4ADAANgA4ADkAZAA5ADEAOQAzADMAMwBiADYA
NQA2AAAAPgAPAAEARgBpAGwAZQBWAGUAcgBzAGkAbwBuAAAAAAAxAC4AMAAuADgAOQA1ADYALgAy
ADAAMwA2ADMAAAAAAHAAKAABAEkAbgB0AGUAcgBuAGEAbABOAGEAbQBlAAAAUwBUAF8AYgBmAGEA
OAAxADYANAAxADgANQAwADEANAA4ADUAMwA4AGMAYgAwAGQAMQAxADEAMgA0ADgAZgBlADAAOABk
AC4AZABsAGwAAABIABIAAQBMAGUAZwBhAGwAQwBvAHAAeQByAGkAZwBoAHQAAABDAG8AcAB5AHIA
aQBnAGgAdAAgAEAAIAAgADIAMAAyADQAAAAqAAEAAQBMAGUAZwBhAGwAVAByAGEAZABlAG0AYQBy
AGsAcwAAAAAAAAAAAHgAKAABAE8AcgBpAGcAaQBuAGEAbABGAGkAbABlAG4AYQBtAGUAAABTAFQA
XwBiAGYAYQA4ADEANgA0ADEAOAA1ADAAMQA0ADgANQAzADgAYwBiADAAZAAxADEAMQAyADQAOABm
AGUAMAA4AGQALgBkAGwAbAAAAGgAJAABAFAAcgBvAGQAdQBjAHQATgBhAG0AZQAAAAAAUwBUAF8A
MQBlADgAMgAzAGQAYwBkADgANQBiAGIANABiADkANQA4ADAANgA4ADkAZAA5ADEAOQAzADMAMwBi
ADYANQA2AAAAQgAPAAEAUAByAG8AZAB1AGMAdABWAGUAcgBzAGkAbwBuAAAAMQAuADAALgA4ADkA
NQA2AC4AMgAwADMANgAzAAAAAABGAA8AAQBBAHMAcwBlAG0AYgBsAHkAIABWAGUAcgBzAGkAbwBu
AAAAMQAuADAALgA4ADkANQA2AC4AMgAwADMANgAzAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAADAAAAIA5AAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==</BinaryItem>
        </ScriptProject>
      </DTS:ObjectData>
    </DTS:Executable>
  </DTS:Executables>
  <DTS:DesignTimeProperties><![CDATA[<?xml version="1.0"?>
<!--This CDATA section contains the layout information of the package. The section includes information such as (x,y) coordinates, width, and height.-->
<!--If you manually edit this section and make a mistake, you can delete it. -->
<!--The package will still be able to load normally but the previous layout information will be lost and the designer will automatically re-arrange the elements on the design surface.-->
<Objects
  Version="8">
  <!--Each node below will contain properties that do not affect runtime behavior.-->
  <Package
    design-time-name="Package">
    <LayoutInfo>
      <GraphLayout
        Capacity="4" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph" xmlns:assembly="http://schemas.microsoft.com/winfx/2006/xaml">
        <NodeLayout
          Size="125,42"
          Id="Package\Script v-5"
          TopLeft="221,234" />
        <AnnotationLayout
          Text="s"
          ParentId="Package"
          FontInfo="{assembly:Null}"
          Size="34,40"
          Id="c3976998-c501-4001-b351-c0a60a128741"
          TopLeft="5.5,15.5" />
        <AnnotationLayout
          Text="s"
          ParentId="Package"
          FontInfo="{assembly:Null}"
          Size="34,40"
          Id="c652613a-3b41-402b-9983-bb421a05778f"
          TopLeft="446,15.5" />
      </GraphLayout>
    </LayoutInfo>
  </Package>
</Objects>]]></DTS:DesignTimeProperties>
</DTS:Executable>