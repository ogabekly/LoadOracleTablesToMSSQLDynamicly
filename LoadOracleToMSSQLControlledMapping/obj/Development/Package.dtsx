<?xml version="1.0"?>
<DTS:Executable xmlns:DTS="www.microsoft.com/SqlServer/Dts"
  DTS:refId="Package"
  DTS:CreationDate="7/2/2024 10:33:10 AM"
  DTS:CreationName="Microsoft.Package"
  DTS:CreatorComputerName="NB-GM0E0HMC"
  DTS:CreatorName="IPOTEKA\SaidnazarovOA"
  DTS:DTSID="{5D2C0D94-5081-44AD-AED9-599D90978C7A}"
  DTS:ExecutableType="Microsoft.Package"
  DTS:LastModifiedProductVersion="16.0.5467.0"
  DTS:LocaleID="1033"
  DTS:ObjectName="Package"
  DTS:PackageType="5"
  DTS:VersionBuild="50"
  DTS:VersionGUID="{E147ECA2-4D76-4B27-94FD-588C132F55D0}">
  <DTS:Property
    DTS:Name="PackageFormatVersion">8</DTS:Property>
  <DTS:PackageParameters>
    <DTS:PackageParameter
      DTS:CreationName=""
      DTS:DataType="8"
      DTS:DTSID="{B553E749-B687-4375-BA83-6F1449D6CDB5}"
      DTS:ObjectName="LogTableName">
      <DTS:Property
        DTS:DataType="8"
        DTS:Name="ParameterValue">LOG.CSOracleToSTG</DTS:Property>
    </DTS:PackageParameter>
    <DTS:PackageParameter
      DTS:CreationName=""
      DTS:DataType="8"
      DTS:DTSID="{58D68D47-AF09-4CC7-8E50-C2C61ECF0122}"
      DTS:ObjectName="MappingControlTableName">
      <DTS:Property
        DTS:DataType="8"
        DTS:Name="ParameterValue">CTRL.MappingOracleToSTG</DTS:Property>
    </DTS:PackageParameter>
    <DTS:PackageParameter
      DTS:CreationName=""
      DTS:DataType="8"
      DTS:DTSID="{091EF26A-2E53-4F93-8095-B76A1DE55518}"
      DTS:ObjectName="MasterControlTableName">
      <DTS:Property
        DTS:DataType="8"
        DTS:Name="ParameterValue">CTRL.MasterOracleToSTG</DTS:Property>
    </DTS:PackageParameter>
    <DTS:PackageParameter
      DTS:CreationName=""
      DTS:DataType="8"
      DTS:DTSID="{F55E157C-E062-4702-A75D-44663D2B8707}"
      DTS:ObjectName="OracleConnectionString">
      <DTS:Property
        DTS:DataType="8"
        DTS:Name="ParameterValue">User Id=birjan;Password=Rfv,fi01;Data Source=192.168.81.99:1521/orcl1</DTS:Property>
    </DTS:PackageParameter>
    <DTS:PackageParameter
      DTS:CreationName=""
      DTS:DataType="8"
      DTS:DTSID="{F76F0B34-B08B-46CE-B239-4369BEB3488B}"
      DTS:ObjectName="SQLServerConnectionString">
      <DTS:Property
        DTS:DataType="8"
        DTS:Name="ParameterValue">Data Source=172.17.17.22,54312;Initial Catalog=BRDB;Integrated Security=True;TrustServerCertificate=True;</DTS:Property>
    </DTS:PackageParameter>
  </DTS:PackageParameters>
  <DTS:Variables />
  <DTS:Executables>
    <DTS:Executable
      DTS:refId="Package\NEwlogiv v-1"
      DTS:CreationName="Microsoft.ScriptTask"
      DTS:Description="Script Task"
      DTS:Disabled="True"
      DTS:DTSID="{3f7f604f-da4b-46dc-813d-76c1d817cb9f}"
      DTS:ExecutableType="Microsoft.ScriptTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="NEwlogiv v-1"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <ScriptProject
          Name="ST_f356411c8ec94e8ba6e347a43432af26"
          VSTAMajorVersion="16"
          VSTAMinorVersion="0"
          Language="CSharp">
          <ProjectItem
            Name="Properties\Resources.resx"
            Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></ProjectItem>
          <ProjectItem
            Name="ST_f356411c8ec94e8ba6e347a43432af26.csproj"
            Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?><Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003"><PropertyGroup><ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids><Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration><Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform><ProductVersion>8.0.30703</ProductVersion><SchemaVersion>2.0</SchemaVersion><ProjectGuid>{80D1B549-EA7D-420F-8032-C6067FBF29BE}</ProjectGuid><OutputType>Library</OutputType><AppDesignerFolder>Properties</AppDesignerFolder><RootNamespace>ST_1e823dcd85bb4b9580689d919333b656</RootNamespace><AssemblyName>ST_f356411c8ec94e8ba6e347a43432af26</AssemblyName><TargetFrameworkVersion>v4.7</TargetFrameworkVersion><FileAlignment>512</FileAlignment><ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>true</ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch><TargetFrameworkProfile></TargetFrameworkProfile></PropertyGroup><PropertyGroup Condition=" '$(Configuration)' == 'Debug' "><DebugSymbols>true</DebugSymbols><DebugType>full</DebugType><Optimize>false</Optimize><OutputPath>.\bin\Debug\</OutputPath><EnableUnmanagedDebugging>false</EnableUnmanagedDebugging><DefineConstants>DEBUG;TRACE</DefineConstants><ErrorReport>prompt</ErrorReport><WarningLevel>4</WarningLevel></PropertyGroup><PropertyGroup Condition=" '$(Configuration)' == 'Release' "><DebugSymbols>false</DebugSymbols><Optimize>true</Optimize><OutputPath>.\bin\Release\</OutputPath><EnableUnmanagedDebugging>false</EnableUnmanagedDebugging><DefineConstants>TRACE</DefineConstants><ErrorReport>prompt</ErrorReport><WarningLevel>4</WarningLevel></PropertyGroup><ItemGroup><Reference Include="Oracle.ManagedDataAccess, Version=4.122.19.1, Culture=neutral, PublicKeyToken=89b483f429c47342, processorArchitecture=MSIL" /><Reference Include="System" /><Reference Include="System.Data" /><Reference Include="System.Windows.Forms" /><Reference Include="System.Xml" /><Reference Include="Microsoft.SqlServer.ManagedDTS, Version=16.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" /><Reference Include="Microsoft.SqlServer.ScriptTask, Version=16.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" /></ItemGroup><ItemGroup><AppDesigner Include="Properties\" /><Compile Include="Properties\AssemblyInfo.cs"><SubType>Code</SubType></Compile><EmbeddedResource Include="Properties\Resources.resx"><Generator>ResXFileCodeGenerator</Generator><LastGenOutput>Resources.Designer.cs</LastGenOutput></EmbeddedResource><Compile Include="Properties\Resources.Designer.cs"><AutoGen>True</AutoGen><DependentUpon>Resources.resx</DependentUpon></Compile><None Include="Properties\Settings.settings"><Generator>SettingsSingleFileGenerator</Generator><LastGenOutput>Settings.Designer.cs</LastGenOutput></None><Compile Include="Properties\Settings.Designer.cs"><AutoGen>True</AutoGen><DependentUpon>Settings.settings</DependentUpon></Compile><Compile Include="ScriptMain.cs"><SubType>Code</SubType></Compile></ItemGroup><ItemGroup><WCFMetadata Include="Connected Services\" /></ItemGroup><!-- Include the build rules for a C# project.--><Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" /><ProjectExtensions><VisualStudio><FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}"><ProjectProperties HostName="VSTAHostName" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="cs" TemplatesPath="" /><Host Name="ScriptTask" /><ProjectClient><HostIdentifier>SSIS_ST160</HostIdentifier></ProjectClient></FlavorProperties></VisualStudio></ProjectExtensions></Project>]]></ProjectItem>
          <ProjectItem
            Name="Properties\Settings.Designer.cs"
            Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_1e823dcd85bb4b9580689d919333b656.Properties.Settings.get_Default():ST_1e823dcd85bb4b9580689d919333b656.Properties.Sett" +
    "ings")]

namespace ST_1e823dcd85bb4b9580689d919333b656.Properties {
    
    
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
    }
}]]></ProjectItem>
          <ProjectItem
            Name="ScriptMain.cs"
            Encoding="UTF8"><![CDATA[#region Help: Introduction to the script task
/* The Script Task allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services control flow. 
 * 
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script task. */
#endregion

#region Namespaces
using System;
using System.Data;
using Microsoft.SqlServer.Dts.Runtime;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Oracle.ManagedDataAccess.Client;
using System.Data.SqlClient;
#endregion

namespace ST_55c9b5057b574cf0a53a59ad88cd5f3a
{
    [Microsoft.SqlServer.Dts.Tasks.ScriptTask.SSISScriptTaskEntryPointAttribute]
    public partial class ScriptMain : Microsoft.SqlServer.Dts.Tasks.ScriptTask.VSTARTScriptObjectModelBase
    {
        public void Main()
        {
            string oracleConnectionString = "User Id=birjan;Password=Rfv,fi01;Data Source=192.168.81.99:1521/orcl1";
            string sqlServerConnectionString = "Data Source=172.17.17.22,54312;Initial Catalog=BRDB;Integrated Security=true;TrustServerCertificate=True;";

            // Step 1: Read control table from SQL Server
            DataTable controlTable = new DataTable();

            using (SqlConnection sqlConnection = new SqlConnection(sqlServerConnectionString))
            {
                sqlConnection.Open();
                using (SqlCommand sqlCommand = new SqlCommand("SELECT * FROM CTRL.MasterOracleToSTG WHERE IsActive = 1", sqlConnection))
                {
                    using (SqlDataAdapter sqlDataAdapter = new SqlDataAdapter(sqlCommand))
                    {
                        sqlDataAdapter.Fill(controlTable);
                    }
                }
                sqlConnection.Close();
            }

            // Process each active source table
            foreach (DataRow masterRow in controlTable.Rows)
            {
                string sourceTableName = masterRow["SourceTableName"].ToString();
                string sourceQuery = masterRow["SourceQuery"].ToString();
                string targetTableName = masterRow["TargetTableName"].ToString();

                DataTable sourceDataTable = new DataTable();

                // Step 2: Read data from Oracle
                using (OracleConnection oracleConnection = new OracleConnection(oracleConnectionString))
                {
                    oracleConnection.Open();

                    if (!string.IsNullOrEmpty(sourceQuery))
                    {
                        // Use SourceQuery if provided
                        using (OracleCommand oracleCommand = new OracleCommand(sourceQuery, oracleConnection))
                        {
                            using (OracleDataReader reader = oracleCommand.ExecuteReader())
                            {
                                sourceDataTable.Load(reader);
                            }
                        }
                    }
                    else
                    {
                        // Construct query based on mapping table if SourceQuery is null
                        using (SqlConnection sqlConnection = new SqlConnection(sqlServerConnectionString))
                        {
                            sqlConnection.Open();
                            DataTable mappingTable = new DataTable();
                            using (SqlCommand sqlCommand = new SqlCommand("SELECT * FROM CTRL.MappingOracleToSTG WHERE MasterId = @MasterId AND IsActive = 1", sqlConnection))
                            {
                                sqlCommand.Parameters.AddWithValue("@MasterId", masterRow["Id"]);
                                using (SqlDataAdapter sqlDataAdapter = new SqlDataAdapter(sqlCommand))
                                {
                                    sqlDataAdapter.Fill(mappingTable);
                                }
                            }

                            // Build the query to select and convert columns from Oracle
                            StringBuilder selectQueryBuilder = new StringBuilder();
                            selectQueryBuilder.Append("SELECT ");
                            foreach (DataRow mappingRow in mappingTable.Rows)
                            {
                                string sourceColumnName = mappingRow["SourceColumnName"].ToString();
                                string sourceDataType = mappingRow["SourceDataType"].ToString();
                                selectQueryBuilder.Append($"CAST({sourceColumnName} AS {sourceDataType}) AS {sourceColumnName}, ");
                            }
                            selectQueryBuilder.Length -= 2; // Remove the last comma and space
                            selectQueryBuilder.Append($" FROM {sourceTableName}");

                            using (OracleCommand oracleCommand = new OracleCommand(selectQueryBuilder.ToString(), oracleConnection))
                            {
                                using (OracleDataReader reader = oracleCommand.ExecuteReader())
                                {
                                    sourceDataTable.Load(reader);
                                }
                            }
                        }
                    }
                    oracleConnection.Close();
                }

                // Step 3: Drop and create target table in SQL Server
                CreateTargetTable(sqlServerConnectionString, targetTableName, masterRow["Id"].ToString());

                // Step 4: Insert data into SQL Server using SqlBulkCopy
                using (SqlConnection sqlConnection = new SqlConnection(sqlServerConnectionString))
                {
                    sqlConnection.Open();
                    using (SqlBulkCopy sqlBulkCopy = new SqlBulkCopy(sqlConnection))
                    {
                        sqlBulkCopy.DestinationTableName = targetTableName;

                        // Get column mappings from the control table
                        DataTable mappingTable = new DataTable();
                        using (SqlCommand sqlCommand = new SqlCommand("SELECT * FROM CTRL.MappingOracleToSTG WHERE MasterId = @MasterId AND IsActive = 1", sqlConnection))
                        {
                            sqlCommand.Parameters.AddWithValue("@MasterId", masterRow["Id"]);
                            using (SqlDataAdapter sqlDataAdapter = new SqlDataAdapter(sqlCommand))
                            {
                                sqlDataAdapter.Fill(mappingTable);
                            }
                        }

                        // Add column mappings
                        foreach (DataRow mappingRow in mappingTable.Rows)
                        {
                            string sourceColumn = mappingRow["SourceColumnName"].ToString();
                            string targetColumn = mappingRow["TargetColumnName"].ToString();
                            sqlBulkCopy.ColumnMappings.Add(sourceColumn, targetColumn);
                        }

                        sqlBulkCopy.WriteToServer(sourceDataTable);
                    }
                    sqlConnection.Close();
                }
            }
            
            Dts.TaskResult = (int)ScriptResults.Success;
        }

        private void CreateTargetTable(string sqlServerConnectionString, string targetTableName, string masterId)
        {
            using (SqlConnection sqlConnection = new SqlConnection(sqlServerConnectionString))
            {
                sqlConnection.Open();
                StringBuilder createTableQuery = new StringBuilder();

                // Drop the target table if it already exists
                createTableQuery.Append($"IF OBJECT_ID('{targetTableName}', 'U') IS NOT NULL DROP TABLE {targetTableName}; ");

                // Create the target table
                createTableQuery.Append($"CREATE TABLE {targetTableName} (");

                // Get the columns and their target data types from the mapping table
                using (SqlCommand sqlCommand = new SqlCommand("SELECT * FROM CTRL.MappingOracleToSTG WHERE MasterId = @MasterId AND IsActive = 1", sqlConnection))
                {
                    sqlCommand.Parameters.AddWithValue("@MasterId", masterId);
                    using (SqlDataReader reader = sqlCommand.ExecuteReader())
                    {
                        while (reader.Read())
                        {
                            string targetColumnName = reader["TargetColumnName"].ToString();
                            string targetDataType = reader["TargetDataType"].ToString();
                            createTableQuery.Append($"{targetColumnName} {targetDataType}, ");
                        }
                    }
                }

                createTableQuery.Length -= 2; // Remove the last comma and space
                createTableQuery.Append(");");

                using (SqlCommand sqlCommand = new SqlCommand(createTableQuery.ToString(), sqlConnection))
                {
                    sqlCommand.ExecuteNonQuery();
                }
                sqlConnection.Close();
            }
        }

        #region ScriptResults declaration
        enum ScriptResults
        {
            Success = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Success,
            Failure = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Failure
        };
        #endregion
    }
}]]></ProjectItem>
          <ProjectItem
            Name="Project"
            Encoding="UTF16LE"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="4.0" schemaVersion="1.0">
  <msb:PropertyGroup>
    <msb:CodeName>ST_1e823dcd85bb4b9580689d919333b656</msb:CodeName>
    <msb:Language>msBuild</msb:Language>
    <msb:DisplayName>ST_1e823dcd85bb4b9580689d919333b656</msb:DisplayName>
    <msb:ProjectId>{2F72F244-D903-4B9C-ABAE-48120524AC70}</msb:ProjectId>
  </msb:PropertyGroup>
  <msb:ItemGroup>
    <msb:Project Include="ST_f356411c8ec94e8ba6e347a43432af26.csproj" />
    <msb:File Include="Properties\Resources.Designer.cs" />
    <msb:File Include="Properties\Settings.settings" />
    <msb:File Include="Properties\AssemblyInfo.cs" />
    <msb:File Include="Properties\Resources.resx" />
    <msb:File Include="Properties\Settings.Designer.cs" />
    <msb:File Include="ScriptMain.cs" />
  </msb:ItemGroup>
</c:Project>]]></ProjectItem>
          <ProjectItem
            Name="Properties\AssemblyInfo.cs"
            Encoding="UTF8"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("ST_1e823dcd85bb4b9580689d919333b656")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("ST_1e823dcd85bb4b9580689d919333b656")]
[assembly: AssemblyCopyright("Copyright @  2024")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.*")]]]></ProjectItem>
          <ProjectItem
            Name="Properties\Settings.settings"
            Encoding="UTF8"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></ProjectItem>
          <ProjectItem
            Name="Properties\Resources.Designer.cs"
            Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_1e823dcd85bb4b9580689d919333b656.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_1e823dcd85bb4b9580689d919333b656.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_1e823dcd85bb4b9580689d919333b656.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace ST_1e823dcd85bb4b9580689d919333b656.Properties {
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if ((resourceMan == null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ST_1e823dcd85bb4b9580689d919333b656.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
    }
}]]></ProjectItem>
          <BinaryItem
            Name="ST_1e823dcd85bb4b9580689d919333b656.dll">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
AgAAAVcdogEJAwAAAPoBMwAWAAABAAAANAAAAAUAAAAGAAAACgAAAAQAAAA9AAAAAgAAABAAAAAC
AAAAAgAAAAMAAAAEAAAAAQAAAAUAAAABAAAAAQAAAAAAZAQBAAAAAAAGAMgCbwYGAFcDbwYGABQC
XAYPAOMGAAAGAEEC7AQGAKsC7AQGAIwC7AQGAD4D7AQGAOgC7AQGAAED7AQGAFgC7AQGAHMCiAMK
ABwDEwQKAGoBEwQOAMAAWgAOAGgF6AcOAJ4A6AcOABgG6AcGADUGPQcOAB8IWgASAFcFyAcSAJAA
yAcSAK4FyAcGANsFEwgGANwAmgQOADQI6AcOAL8F6AcGAKEEmgQGAPcBXAYGAKYHmgQGAO0FjwYG
AIkF1wQWAMcBTgQWACgCTgQWAKEBwgQGANwBbwYOAEoFdgUOAAoGdgUOADgFWgAOAIYBWgAGANcD
mgQOAJUFWgAOACEF6AcOAP0F6AcOAP4E6AcOAKID6AcKADwEEwQOAKEFdgUOAIYAdgUGADUBmgQG
AOgAmgQGACsI7AQAAAAAJQAAAAAAAQABAAEAEAC3BDYAOQABAAEAAAAQAJYG8gZ5AAEABAAAARAA
NAfyBo0AAwAIAAMBAACIBwAAcQAEAAsAEQCmBEIBEQBaAUYBEQCwAEsBBgYuAE8BVoB4B1IBVoA6
AVIBUCAAAAAAhgC9BAYAAQA4JgAAAACBAMoAVgEBANgnAAAAAIYYTwYGAAQA4CcAAAAAgxhPBgYA
BADoJwAAAACTCOkFXQEEABQoAAAAAJMIQgFiAQQAGygAAAAAkwhOAWgBBAAjKAAAAACWCK0HbwEF
ACooAAAAAIYYTwYGAAUAMigAAAAAkRhVBnQBBQAAAAEAuwMAAAIAJQEAAAMAbwAAAAEAggMJAE8G
AQARAE8GBgAZAE8GCgApAE8GEAAxAE8GEAA5AE8GEABBAE8GEABJAE8GEABRAE8GEABZAE8GEABh
AE8GEABpAE8GBgDpAE8GBgARAU8GFQAhAU8GBgB5AE8GBgCBAE8GEAApAbIEBgCJAE8GWACRAE8G
XwAxAYwEZQDJAL8BBgApAbkBBgB5AJYHawBBAUEGcQCZAP4HdgChAJEEegDxANUDfwCpAE8GEABJ
AVAIgwCxAE8GiACxAM0FjwB5AH0AlACJAFAHmwBZAXUDoQDBAE8GBgDBAKkAqQBJAZ8HrwCZAAoI
tQDBAN4DuQDBAOkDAQBJAZ8HvQDRAE8GwwDRAAwBEADRACEHyQBpAYIAzwDRACcG1wBxAIAH3QB5
AbkHAQBJAZ8H8gCJAM0F+QCBAZEEegBJAZ8H/gCBAXgAtQCJAUAIuQBxAE8GBgDxAE8GBgCRAfoA
BgGRAScIDwH5AE8GFQEZAU8GBgAIABQAOAEIABgAPQEpAHMAsAEuAAsAiAEuABMAkQEuABsAsAEu
ACMAuQEuACsA4gEuADMA4gEuADsA4gEuAEMAuQEuAEsA6AEuAFMA4gEuAFsA/wFDAGMAPQFJAHMA
sAFhAHsAPQFjAGsAPQEcAOMAAwABAAQAAwAAAO0FeAEAAGIBfQEAALEHgwECAAUAAwACAAYABQAB
AAcABQACAAgABwAEgAAAAQAAAPUi+nsAAAAAAAABAAAABAAAAAAAAAAAAAAAHQFmAAAAAAAQAAAA
AAAAAAAAAAAmAfQDAAAAAAQAAAAAAAAAAAAAAB0BWgAAAAAABAB6ABMAAQAAAAAALwFfBwAAAAAE
AAAAAAAAAAAAAAAdAZoEAAAAAAAAAAABAAAAoAYAAAUAAgAAAABTVF8xZTgyM2RjZDg1YmI0Yjk1
ODA2ODlkOTE5MzMzYjY1NgA8TW9kdWxlPgB2YWx1ZV9fAFNUXzU1YzliNTA1N2I1NzRjZjBhNTNh
NTlhZDg4Y2Q1ZjNhAFN5c3RlbS5EYXRhAG1zY29ybGliAG1hc3RlcklkAFJlYWQATG9hZABBZGQA
RGJDb21tYW5kAE9yYWNsZUNvbW1hbmQAU3FsQ29tbWFuZABBcHBlbmQAZGVmYXVsdEluc3RhbmNl
AERhdGFUYWJsZQBDcmVhdGVUYXJnZXRUYWJsZQBJRGlzcG9zYWJsZQBSdW50aW1lVHlwZUhhbmRs
ZQBHZXRUeXBlRnJvbUhhbmRsZQBzZXRfRGVzdGluYXRpb25UYWJsZU5hbWUAdGFyZ2V0VGFibGVO
YW1lAFR5cGUARmFpbHVyZQBnZXRfQ3VsdHVyZQBzZXRfQ3VsdHVyZQByZXNvdXJjZUN1bHR1cmUA
VlNUQVJUU2NyaXB0T2JqZWN0TW9kZWxCYXNlAEludGVybmFsRGF0YUNvbGxlY3Rpb25CYXNlAEFw
cGxpY2F0aW9uU2V0dGluZ3NCYXNlAENsb3NlAERpc3Bvc2UARWRpdG9yQnJvd3NhYmxlU3RhdGUA
Q29tcGlsZXJHZW5lcmF0ZWRBdHRyaWJ1dGUARGVidWdnZXJOb25Vc2VyQ29kZUF0dHJpYnV0ZQBE
ZWJ1Z2dhYmxlQXR0cmlidXRlAEVkaXRvckJyb3dzYWJsZUF0dHJpYnV0ZQBBc3NlbWJseVRpdGxl
QXR0cmlidXRlAEFzc2VtYmx5VHJhZGVtYXJrQXR0cmlidXRlAFRhcmdldEZyYW1ld29ya0F0dHJp
YnV0ZQBBc3NlbWJseUNvbmZpZ3VyYXRpb25BdHRyaWJ1dGUAQXNzZW1ibHlEZXNjcmlwdGlvbkF0
dHJpYnV0ZQBDb21waWxhdGlvblJlbGF4YXRpb25zQXR0cmlidXRlAEFzc2VtYmx5UHJvZHVjdEF0
dHJpYnV0ZQBBc3NlbWJseUNvcHlyaWdodEF0dHJpYnV0ZQBTU0lTU2NyaXB0VGFza0VudHJ5UG9p
bnRBdHRyaWJ1dGUAQXNzZW1ibHlDb21wYW55QXR0cmlidXRlAFJ1bnRpbWVDb21wYXRpYmlsaXR5
QXR0cmlidXRlAEFkZFdpdGhWYWx1ZQB2YWx1ZQBTeXN0ZW0uUnVudGltZS5WZXJzaW9uaW5nAFNx
bEJ1bGtDb3B5Q29sdW1uTWFwcGluZwBzcWxTZXJ2ZXJDb25uZWN0aW9uU3RyaW5nAFRvU3RyaW5n
AGdldF9MZW5ndGgAc2V0X0xlbmd0aABNaWNyb3NvZnQuU3FsU2VydmVyLlNjcmlwdFRhc2sATWlj
cm9zb2Z0LlNxbFNlcnZlci5EdHMuVGFza3MuU2NyaXB0VGFzawBTY3JpcHRPYmplY3RNb2RlbABT
eXN0ZW0uQ29tcG9uZW50TW9kZWwAU1RfMWU4MjNkY2Q4NWJiNGI5NTgwNjg5ZDkxOTMzM2I2NTYu
ZGxsAEZpbGwAZ2V0X0l0ZW0AU3lzdGVtAEVudW0AcmVzb3VyY2VNYW4AT3BlbgBTY3JpcHRNYWlu
AFN5c3RlbS5Db25maWd1cmF0aW9uAFN5c3RlbS5HbG9iYWxpemF0aW9uAFN5c3RlbS5SZWZsZWN0
aW9uAFNxbEJ1bGtDb3B5Q29sdW1uTWFwcGluZ0NvbGxlY3Rpb24AU3FsUGFyYW1ldGVyQ29sbGVj
dGlvbgBEYXRhUm93Q29sbGVjdGlvbgBEYkNvbm5lY3Rpb24AT3JhY2xlQ29ubmVjdGlvbgBTcWxD
b25uZWN0aW9uAFN5c3RlbS5EYXRhLkNvbW1vbgBDdWx0dXJlSW5mbwBJRGF0YVJlYWRlcgBEYkRh
dGFSZWFkZXIAT3JhY2xlRGF0YVJlYWRlcgBTcWxEYXRhUmVhZGVyAEV4ZWN1dGVSZWFkZXIAU3Ry
aW5nQnVpbGRlcgBnZXRfUmVzb3VyY2VNYW5hZ2VyAFNxbFBhcmFtZXRlcgBEYkRhdGFBZGFwdGVy
AFNxbERhdGFBZGFwdGVyAFdyaXRlVG9TZXJ2ZXIASUVudW1lcmF0b3IAR2V0RW51bWVyYXRvcgAu
Y3RvcgAuY2N0b3IAU3lzdGVtLkRpYWdub3N0aWNzAFN5c3RlbS5SdW50aW1lLkNvbXBpbGVyU2Vy
dmljZXMAU3lzdGVtLlJlc291cmNlcwBTVF8xZTgyM2RjZDg1YmI0Yjk1ODA2ODlkOTE5MzMzYjY1
Ni5Qcm9wZXJ0aWVzLlJlc291cmNlcy5yZXNvdXJjZXMARGVidWdnaW5nTW9kZXMAU1RfMWU4MjNk
Y2Q4NWJiNGI5NTgwNjg5ZDkxOTMzM2I2NTYuUHJvcGVydGllcwBnZXRfQ29sdW1uTWFwcGluZ3MA
U2V0dGluZ3MAU3lzdGVtLkNvbGxlY3Rpb25zAGdldF9QYXJhbWV0ZXJzAE9yYWNsZS5NYW5hZ2Vk
RGF0YUFjY2VzcwBTdWNjZXNzAGdldF9EdHMAU2NyaXB0UmVzdWx0cwBnZXRfUm93cwBDb25jYXQA
T2JqZWN0AGdldF9EZWZhdWx0AHNldF9UYXNrUmVzdWx0AE9yYWNsZS5NYW5hZ2VkRGF0YUFjY2Vz
cy5DbGllbnQAU3lzdGVtLkRhdGEuU3FsQ2xpZW50AGdldF9DdXJyZW50AE1vdmVOZXh0AFN5c3Rl
bS5UZXh0AERhdGFSb3cAZ2V0X0Fzc2VtYmx5AFNxbEJ1bGtDb3B5AEV4ZWN1dGVOb25RdWVyeQBJ
c051bGxPckVtcHR5AAAAAICLVQBzAGUAcgAgAEkAZAA9AGIAaQByAGoAYQBuADsAUABhAHMAcwB3
AG8AcgBkAD0AUgBmAHYALABmAGkAMAAxADsARABhAHQAYQAgAFMAbwB1AHIAYwBlAD0AMQA5ADIA
LgAxADYAOAAuADgAMQAuADkAOQA6ADEANQAyADEALwBvAHIAYwBsADEAAIDTRABhAHQAYQAgAFMA
bwB1AHIAYwBlAD0AMQA3ADIALgAxADcALgAxADcALgAyADIALAA1ADQAMwAxADIAOwBJAG4AaQB0
AGkAYQBsACAAQwBhAHQAYQBsAG8AZwA9AEIAUgBEAEIAOwBJAG4AdABlAGcAcgBhAHQAZQBkACAA
UwBlAGMAdQByAGkAdAB5AD0AdAByAHUAZQA7AFQAcgB1AHMAdABTAGUAcgB2AGUAcgBDAGUAcgB0
AGkAZgBpAGMAYQB0AGUAPQBUAHIAdQBlADsAAG9TAEUATABFAEMAVAAgACoAIABGAFIATwBNACAA
QwBUAFIATAAuAE0AYQBzAHQAZQByAE8AcgBhAGMAbABlAFQAbwBTAFQARwAgAFcASABFAFIARQAg
AEkAcwBBAGMAdABpAHYAZQAgAD0AIAAxAAAfUwBvAHUAcgBjAGUAVABhAGIAbABlAE4AYQBtAGUA
ABdTAG8AdQByAGMAZQBRAHUAZQByAHkAAB9UAGEAcgBnAGUAdABUAGEAYgBsAGUATgBhAG0AZQAA
gKNTAEUATABFAEMAVAAgACoAIABGAFIATwBNACAAQwBUAFIATAAuAE0AYQBwAHAAaQBuAGcATwBy
AGEAYwBsAGUAVABvAFMAVABHACAAVwBIAEUAUgBFACAATQBhAHMAdABlAHIASQBkACAAPQAgAEAA
TQBhAHMAdABlAHIASQBkACAAQQBOAEQAIABJAHMAQQBjAHQAaQB2AGUAIAA9ACAAMQAAE0AATQBh
AHMAdABlAHIASQBkAAAFSQBkAAAPUwBFAEwARQBDAFQAIAAAIVMAbwB1AHIAYwBlAEMAbwBsAHUA
bQBuAE4AYQBtAGUAAB1TAG8AdQByAGMAZQBEAGEAdABhAFQAeQBwAGUAAAtDAEEAUwBUACgAAAkg
AEEAUwAgAAALKQAgAEEAUwAgAAAFLAAgAAANIABGAFIATwBNACAAACFUAGEAcgBnAGUAdABDAG8A
bAB1AG0AbgBOAGEAbQBlAAAdSQBGACAATwBCAEoARQBDAFQAXwBJAEQAKAAnAAE/JwAsACAAJwBV
ACcAKQAgAEkAUwAgAE4ATwBUACAATgBVAEwATAAgAEQAUgBPAFAAIABUAEEAQgBMAEUAIAABBTsA
IAAAG0MAUgBFAEEAVABFACAAVABBAEIATABFACAAAAUgACgAAB1UAGEAcgBnAGUAdABEAGEAdABh
AFQAeQBwAGUAAAMgAAAFKQA7AABxUwBUAF8AMQBlADgAMgAzAGQAYwBkADgANQBiAGIANABiADkA
NQA4ADAANgA4ADkAZAA5ADEAOQAzADMAMwBiADYANQA2AC4AUAByAG8AcABlAHIAdABpAGUAcwAu
AFIAZQBzAG8AdQByAGMAZQBzAAAAANCUbAie5+ZNg4qdgzcfWf8ABCABAQgDIAABBSABARERBCAB
AQ4GIAEBEYCFOwchDg4SPRJBEkUSSRJNElEODg4SPRJVElkSXRJBEj0SYRJFEkkSTQ4OEmUSWRJd
EkESaRI9EkUSSQ4OBiACAQ4SQQUgAQESRQUgAQgSPQUgABKAnQQgABJNAyAAHAQgARwOAyAADgQA
AQIOBiACAQ4SVQQgABJdBiABARKAqQUgABKArQcgAhKAsQ4cBSABEmEOBQABDh0OAyAAAgMgAAgF
AAIODg4FIAEBEkEFIAASgLUHIAISgLkODgUgAQESPQUgABKAvQ4HBxJBEmESRRJtDg4SRQYAAw4O
Dg4EIAASbQcABA4ODg4OCAABEoDJEYDNBSAAEoDRByACAQ4SgNEIt3pcVhk04IkIiYRdzYCAzJEI
ibSD9CnEc0IEAAAAAAQBAAAAAwYSfQQGEoCBAwYSEAIGCAMGERQGIAMBDg4OBAAAEn0FAAASgIEG
AAEBEoCBBAAAEhADAAABBAgAEn0FCAASgIEECAASEAgBAAgAAAAAAB4BAAEAVAIWV3JhcE5vbkV4
Y2VwdGlvblRocm93cwEIAQACAAAAAAAoAQAjU1RfMWU4MjNkY2Q4NWJiNGI5NTgwNjg5ZDkxOTMz
M2I2NTYAAAUBAAAAABYBABFDb3B5cmlnaHQgQCAgMjAyNAAASQEAGi5ORVRGcmFtZXdvcmssVmVy
c2lvbj12NC43AQBUDhRGcmFtZXdvcmtEaXNwbGF5TmFtZRIuTkVUIEZyYW1ld29yayA0LjcAAAC0
AAAAzsrvvgEAAACRAAAAbFN5c3RlbS5SZXNvdXJjZXMuUmVzb3VyY2VSZWFkZXIsIG1zY29ybGli
LCBWZXJzaW9uPTQuMC4wLjAsIEN1bHR1cmU9bmV1dHJhbCwgUHVibGljS2V5VG9rZW49Yjc3YTVj
NTYxOTM0ZTA4OSNTeXN0ZW0uUmVzb3VyY2VzLlJ1bnRpbWVSZXNvdXJjZVNldAIAAAAAAAAAAAAA
AFBBRFBBRFC0AAAARD4AAAAAAAAAAAAAXj4AAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFA+AAAA
AAAAAAAAAAAAX0NvckRsbE1haW4AbXNjb3JlZS5kbGwAAAAAAP8lACAAEAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAQ
AAAAGAAAgAAAAAAAAAAAAAAAAAAAAQABAAAAMAAAgAAAAAAAAAAAAAAAAAAAAQAAAAAASAAAAFhA
AAAaBAAAAAAAAAAAAAAaBDQAAABWAFMAXwBWAEUAUgBTAEkATwBOAF8ASQBOAEYATwAAAAAAvQTv
/gAAAQAAAAEA+nv1IgAAAQD6e/UiPwAAAAAAAAAEAAAAAgAAAAAAAAAAAAAAAAAAAEQAAAABAFYA
YQByAEYAaQBsAGUASQBuAGYAbwAAAAAAJAAEAAAAVAByAGEAbgBzAGwAYQB0AGkAbwBuAAAAAAAA
ALAEegMAAAEAUwB0AHIAaQBuAGcARgBpAGwAZQBJAG4AZgBvAAAAVgMAAAEAMAAwADAAMAAwADQA
YgAwAAAAGgABAAEAQwBvAG0AbQBlAG4AdABzAAAAAAAAACIAAQABAEMAbwBtAHAAYQBuAHkATgBh
AG0AZQAAAAAAAAAAAHAAJAABAEYAaQBsAGUARABlAHMAYwByAGkAcAB0AGkAbwBuAAAAAABTAFQA
XwAxAGUAOAAyADMAZABjAGQAOAA1AGIAYgA0AGIAOQA1ADgAMAA2ADgAOQBkADkAMQA5ADMAMwAz
AGIANgA1ADYAAAA+AA8AAQBGAGkAbABlAFYAZQByAHMAaQBvAG4AAAAAADEALgAwAC4AOAA5ADQA
OQAuADMAMQA3ADMAOAAAAAAAcAAoAAEASQBuAHQAZQByAG4AYQBsAE4AYQBtAGUAAABTAFQAXwAx
AGUAOAAyADMAZABjAGQAOAA1AGIAYgA0AGIAOQA1ADgAMAA2ADgAOQBkADkAMQA5ADMAMwAzAGIA
NgA1ADYALgBkAGwAbAAAAEgAEgABAEwAZQBnAGEAbABDAG8AcAB5AHIAaQBnAGgAdAAAAEMAbwBw
AHkAcgBpAGcAaAB0ACAAQAAgACAAMgAwADIANAAAACoAAQABAEwAZQBnAGEAbABUAHIAYQBkAGUA
bQBhAHIAawBzAAAAAAAAAAAAeAAoAAEATwByAGkAZwBpAG4AYQBsAEYAaQBsAGUAbgBhAG0AZQAA
AFMAVABfADEAZQA4ADIAMwBkAGMAZAA4ADUAYgBiADQAYgA5ADUAOAAwADYAOAA5AGQAOQAxADkA
MwAzADMAYgA2ADUANgAuAGQAbABsAAAAaAAkAAEAUAByAG8AZAB1AGMAdABOAGEAbQBlAAAAAABT
AFQAXwAxAGUAOAAyADMAZABjAGQAOAA1AGIAYgA0AGIAOQA1ADgAMAA2ADgAOQBkADkAMQA5ADMA
MwAzAGIANgA1ADYAAABCAA8AAQBQAHIAbwBkAHUAYwB0AFYAZQByAHMAaQBvAG4AAAAxAC4AMAAu
ADgAOQA0ADkALgAzADEANwAzADgAAAAAAEYADwABAEEAcwBzAGUAbQBiAGwAeQAgAFYAZQByAHMA
aQBvAG4AAAAxAC4AMAAuADgAOQA0ADkALgAzADEANwAzADgAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwAAAMAAAAcD4AAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</BinaryItem>
        </ScriptProject>
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\OldReplicateMappingTableLogic v-0"
      DTS:CreationName="Microsoft.ScriptTask"
      DTS:Description="Script Task"
      DTS:Disabled="True"
      DTS:DTSID="{AE6DDDD7-46B3-4CC8-9178-3F1A67A1594E}"
      DTS:ExecutableType="Microsoft.ScriptTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="OldReplicateMappingTableLogic v-0"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <ScriptProject
          Name="ST_ceb0a1b3bdbf4152aab579ef63be144e"
          VSTAMajorVersion="16"
          VSTAMinorVersion="0"
          Language="CSharp">
          <ProjectItem
            Name="Properties\AssemblyInfo.cs"
            Encoding="UTF8"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("ST_ceb0a1b3bdbf4152aab579ef63be144e")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("ST_ceb0a1b3bdbf4152aab579ef63be144e")]
[assembly: AssemblyCopyright("Copyright @  2024")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.*")]]]></ProjectItem>
          <ProjectItem
            Name="Properties\Resources.resx"
            Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></ProjectItem>
          <ProjectItem
            Name="ScriptMain.cs"
            Encoding="UTF8"><![CDATA[#region Help:  Introduction to the script task
/* The Script Task allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services control flow. 
 * 
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script task. */
#endregion


#region Namespaces
using System;
using System.Data;
using Microsoft.SqlServer.Dts.Runtime;
using System.Windows.Forms;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.IO;
using Oracle.ManagedDataAccess.Client;
using System.Data.SqlClient;
#endregion

namespace ST_55c9b5057b574cf0a53a59ad88cd5f3a
{
    /// <summary>
    /// ScriptMain is the entry point class of the script.  Do not change the name, attributes,
    /// or parent of this class.
    /// </summary>
	[Microsoft.SqlServer.Dts.Tasks.ScriptTask.SSISScriptTaskEntryPointAttribute]
    public partial class ScriptMain : Microsoft.SqlServer.Dts.Tasks.ScriptTask.VSTARTScriptObjectModelBase
    {
        #region Help:  Using Integration Services variables and parameters in a script
        /* To use a variable in this script, first ensure that the variable has been added to 
         * either the list contained in the ReadOnlyVariables property or the list contained in 
         * the ReadWriteVariables property of this script task, according to whether or not your
         * code needs to write to the variable.  To add the variable, save this script, close this instance of
         * Visual Studio, and update the ReadOnlyVariables and 
         * ReadWriteVariables properties in the Script Transformation Editor window.
         * To use a parameter in this script, follow the same steps. Parameters are always read-only.
         * 
         * Example of reading from a variable:
         *  DateTime startTime = (DateTime) Dts.Variables["System::StartTime"].Value;
         * 
         * Example of writing to a variable:
         *  Dts.Variables["User::myStringVariable"].Value = "new value";
         * 
         * Example of reading from a package parameter:
         *  int batchId = (int) Dts.Variables["$Package::batchId"].Value;
         *  
         * Example of reading from a project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].Value;
         * 
         * Example of reading from a sensitive project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].GetSensitiveValue();
         * */

        #endregion

        #region Help:  Firing Integration Services events from a script
        /* This script task can fire events for logging purposes.
         * 
         * Example of firing an error event:
         *  Dts.Events.FireError(18, "Process Values", "Bad value", "", 0);
         * 
         * Example of firing an information event:
         *  Dts.Events.FireInformation(3, "Process Values", "Processing has started", "", 0, ref fireAgain)
         * 
         * Example of firing a warning event:
         *  Dts.Events.FireWarning(14, "Process Values", "No values received for input", "", 0);
         * */
        #endregion

        #region Help:  Using Integration Services connection managers in a script
        /* Some types of connection managers can be used in this script task.  See the topic 
         * "Working with Connection Managers Programatically" for details.
         * 
         * Example of using an ADO.Net connection manager:
         *  object rawConnection = Dts.Connections["Sales DB"].AcquireConnection(Dts.Transaction);
         *  SqlConnection myADONETConnection = (SqlConnection)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Sales DB"].ReleaseConnection(rawConnection);
         *
         * Example of using a File connection manager
         *  object rawConnection = Dts.Connections["Prices.zip"].AcquireConnection(Dts.Transaction);
         *  string filePath = (string)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Prices.zip"].ReleaseConnection(rawConnection);
         * */
        #endregion


        /// <summary>
        /// This method is called when this script task executes in the control flow.
        /// Before returning from this method, set the value of Dts.TaskResult to indicate success or failure.
        /// To open Help, press F1.
        /// </summary>
        public void Main()
        {
            // TODO: Add your code here
            MessageBox.Show("Hello");

            string oracleConnectionString = "User Id=birjan;Password=Rfv,fi01;Data Source=192.168.81.99:1521/orcl1";
            string sqlServerConnectionString = "Data Source=172.17.17.22,54312;Initial Catalog=BRDB;User ID=ETLUser;Password=p0lice;TrustServerCertificate=True;"; 

            // Step 1: Read control table from SQL Server
            DataTable controlTable = new DataTable();

            using (SqlConnection sqlConnection = new SqlConnection(sqlServerConnectionString))
            {
                sqlConnection.Open();
                using (SqlCommand sqlCommand = new SqlCommand("SELECT * FROM dbo.ReplicateMappingControl", sqlConnection))
                {
                    using (SqlDataAdapter sqlDataAdapter = new SqlDataAdapter(sqlCommand))
                    {
                        sqlDataAdapter.Fill(controlTable);
                    }
                }
                sqlConnection.Close();
            }
            MessageBox.Show("1");
            // Get unique source tables
            HashSet<string> sourceTables = new HashSet<string>();
            foreach (DataRow row in controlTable.Rows)
            {
                string sourceTableName = row["SourceTableName"].ToString();
                sourceTables.Add(sourceTableName);
            }
            MessageBox.Show("2");
            foreach (var sourceTable in sourceTables)
            {
                // Step 2: Read data from Oracle for the current source table
                DataTable dataTable = new DataTable();

                using (OracleConnection oracleConnection = new OracleConnection(oracleConnectionString))
                {
                    oracleConnection.Open();
                    using (OracleCommand oracleCommand = new OracleCommand($"SELECT * FROM {sourceTable}", oracleConnection))
                    {
                        using (OracleDataReader reader = oracleCommand.ExecuteReader())
                        {
                            dataTable.Load(reader);
                        }
                    }
                    oracleConnection.Close();
                }
                MessageBox.Show("3");
                // Get target table name for the current source table
                string targetTable = null;
                foreach (DataRow row in controlTable.Rows)
                {
                    if (row["SourceTableName"].ToString() == sourceTable)
                    {
                        targetTable = row["TargetTableName"].ToString();
                        break;
                    }
                }

                MessageBox.Show("4");

                StringBuilder schemaMessage = new StringBuilder();
                foreach (DataColumn column in dataTable.Columns)
                {
                    schemaMessage.AppendLine($"Column Name: {column.ColumnName}, Data Type: {column.DataType}, Size: {column.MaxLength}");
                }
                MessageBox.Show(schemaMessage.ToString());


                if (targetTable != null)
                {
                    // Step 3: Insert data into SQL Server using SqlBulkCopy
                    using (SqlConnection sqlConnection = new SqlConnection(sqlServerConnectionString))
                    {
                        sqlConnection.Open();
                        using (SqlBulkCopy sqlBulkCopy = new SqlBulkCopy(sqlConnection))
                        {
                            sqlBulkCopy.DestinationTableName = $"{targetTable}";

                            //// Map columns based on control table
                            //foreach (DataRow row in controlTable.Rows)
                            //{
                            //    if (row["SourceTableName"].ToString() == sourceTable)
                            //    {
                            //        string sourceColumn = row["SourceColumnName"].ToString().ToUpper();
                            //        string targetColumn = row["TargetColumnName"].ToString().ToLower();
                            //        sqlBulkCopy.ColumnMappings.Add(sourceColumn, targetColumn);
                            //    }
                            //}

                            sqlBulkCopy.WriteToServer(dataTable);
                        }
                        sqlConnection.Close();
                    }
                }
            }

            MessageBox.Show("Data transfer complete.");

            Dts.TaskResult = (int)ScriptResults.Success;
        }

        #region ScriptResults declaration
        /// <summary>
        /// This enum provides a convenient shorthand within the scope of this class for setting the
        /// result of the script.
        /// 
        /// This code was generated automatically.
        /// </summary>
        enum ScriptResults
        {
            Success = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Success,
            Failure = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Failure
        };
        #endregion

    }
}]]></ProjectItem>
          <ProjectItem
            Name="Properties\Resources.Designer.cs"
            Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_ceb0a1b3bdbf4152aab579ef63be144e.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_ceb0a1b3bdbf4152aab579ef63be144e.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_ceb0a1b3bdbf4152aab579ef63be144e.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace ST_ceb0a1b3bdbf4152aab579ef63be144e.Properties {
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if ((resourceMan == null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ST_ceb0a1b3bdbf4152aab579ef63be144e.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
    }
}]]></ProjectItem>
          <ProjectItem
            Name="Project"
            Encoding="UTF16LE"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="4.0" schemaVersion="1.0">
  <msb:PropertyGroup>
    <msb:CodeName>ST_ceb0a1b3bdbf4152aab579ef63be144e</msb:CodeName>
    <msb:Language>msBuild</msb:Language>
    <msb:DisplayName>ST_ceb0a1b3bdbf4152aab579ef63be144e</msb:DisplayName>
    <msb:ProjectId>{BE168FF8-68B8-4779-8968-35979F5924C4}</msb:ProjectId>
  </msb:PropertyGroup>
  <msb:ItemGroup>
    <msb:Project Include="ST_ceb0a1b3bdbf4152aab579ef63be144e.csproj" />
    <msb:File Include="Properties\Settings.settings" />
    <msb:File Include="Properties\AssemblyInfo.cs" />
    <msb:File Include="Properties\Resources.resx" />
    <msb:File Include="Properties\Resources.Designer.cs" />
    <msb:File Include="Properties\Settings.Designer.cs" />
    <msb:File Include="ScriptMain.cs" />
  </msb:ItemGroup>
</c:Project>]]></ProjectItem>
          <ProjectItem
            Name="Properties\Settings.Designer.cs"
            Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_ceb0a1b3bdbf4152aab579ef63be144e.Properties.Settings.get_Default():ST_ceb0a1b3bdbf4152aab579ef63be144e.Properties.Sett" +
    "ings")]

namespace ST_ceb0a1b3bdbf4152aab579ef63be144e.Properties {
    
    
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
    }
}]]></ProjectItem>
          <ProjectItem
            Name="Properties\Settings.settings"
            Encoding="UTF8"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></ProjectItem>
          <ProjectItem
            Name="ST_ceb0a1b3bdbf4152aab579ef63be144e.csproj"
            Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProductVersion>8.0.30703</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{ABD0BE88-0EA5-42EC-A648-F18509E49400}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>ST_ceb0a1b3bdbf4152aab579ef63be144e</RootNamespace>
    <AssemblyName>ST_ceb0a1b3bdbf4152aab579ef63be144e</AssemblyName>
    <TargetFrameworkVersion>v4.7</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
    <ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>true</ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>
    <TargetFrameworkProfile></TargetFrameworkProfile>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>.\bin\Debug\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DebugSymbols>false</DebugSymbols>
    <Optimize>true</Optimize>
    <OutputPath>.\bin\Release\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="Oracle.ManagedDataAccess, Version=4.122.19.1, Culture=neutral, PublicKeyToken=89b483f429c47342, processorArchitecture=MSIL" />
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
    <Reference Include="Microsoft.SqlServer.ManagedDTS, Version=16.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.ScriptTask, Version=16.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
  </ItemGroup>
  <ItemGroup>
    <AppDesigner Include="Properties\" />
    <Compile Include="Properties\AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <EmbeddedResource Include="Properties\Resources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
    <Compile Include="Properties\Resources.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Resources.resx</DependentUpon>
    </Compile>
    <None Include="Properties\Settings.settings">
      <Generator>SettingsSingleFileGenerator</Generator>
      <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <Compile Include="Properties\Settings.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Settings.settings</DependentUpon>
    </Compile>
    <Compile Include="ScriptMain.cs">
      <SubType>Code</SubType>
    </Compile>
  </ItemGroup>
  <!-- Include the build rules for a C# project.-->
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <ProjectExtensions>
    <VisualStudio>
      <FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}">
        <ProjectProperties HostName="VSTAHostName" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="cs" TemplatesPath="" />
        <Host Name="ScriptTask" />
        <ProjectClient>
          <HostIdentifier>SSIS_ST160</HostIdentifier>
        </ProjectClient>
      </FlavorProperties>
    </VisualStudio>
  </ProjectExtensions>
</Project>]]></ProjectItem>
          <BinaryItem
            Name="ST_ceb0a1b3bdbf4152aab579ef63be144e.dll">TVqQAAMAAAAEAAAA//8AALgAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAgAAAAA4fug4AtAnNIbgBTM0hVGhpcyBwcm9ncmFtIGNhbm5vdCBiZSBydW4gaW4gRE9TIG1v
ZGUuDQ0KJAAAAAAAAABQRQAATAEDAGPjg2YAAAAAAAAAAOAAIiALATAAABoAAAAIAAAAAAAAJjkA
AAAgAAAAQAAAAAAAEAAgAAAAAgAABAAAAAAAAAAGAAAAAAAAAACAAAAAAgAAAAAAAAMAYIUAABAA
ABAAAAAAEAAAEAAAAAAAABAAAAAAAAAAAAAAANQ4AABPAAAAAEAAAHgEAAAAAAAAAAAAAAAAAAAA
AAAAAGAAAAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAIAAACAAAAAAAAAAAAAAACCAAAEgAAAAAAAAAAAAAAC50ZXh0AAAALBkAAAAgAAAAGgAAAAIA
AAAAAAAAAAAAAAAAACAAAGAucnNyYwAAAHgEAAAAQAAAAAYAAAAcAAAAAAAAAAAAAAAAAABAAABA
LnJlbG9jAAAMAAAAAGAAAAACAAAAIgAAAAAAAAAAAAAAAAAAQAAAQgAAAAAAAAAAAAAAAAAAAAAI
OQAAAAAAAEgAAAACAAUA6CQAADQTAAABAAAAAAAAABw4AAC4AAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAABswBQD/AgAAAQAAEXIBAABwKBAAAAomcg0AAHAKcpoAAHAL
cxEAAAoMB3MSAAAKEwQRBG8TAAAKcn0BAHARBHMUAAAKEwURBXMVAAAKEwYRBghvFgAACibeGBEG
LAcRBm8XAAAK3BEFLAcRBW8XAAAK3BEEbxgAAAreDBEELAcRBG8XAAAK3HLRAQBwKBAAAAomcxkA
AAoNCG8aAAAKbxsAAAoTBysmEQdvHAAACnQbAAABctUBAHBvHQAACm8eAAAKEwgJEQhvHwAACiYR
B28gAAAKLdHeFREHdRUAAAETCREJLAcRCW8XAAAK3HL1AQBwKBAAAAomCW8hAAAKEwo40gEAABIK
KCIAAAoTC3MRAAAKEwwGcyMAAAoTDxEPbxMAAApy+QEAcBELKCQAAAoRD3MlAAAKExAREG8mAAAK
ExERDBERbycAAAreGBERLAcREW8XAAAK3BEQLAcREG8XAAAK3BEPbxgAAAreDBEPLAcRD28XAAAK
3HIXAgBwKBAAAAomFBMNCG8aAAAKbxsAAAoTBys9EQdvHAAACnQbAAABExIREnLVAQBwbx0AAApv
HgAAChELKCgAAAosFRESchsCAHBvHQAACm8eAAAKEw3eIBEHbyAAAAotut4VEQd1FQAAARMJEQks
BxEJbxcAAArccjsCAHAoEAAACiZzKQAAChMOEQxvKgAACm8bAAAKEwcrOhEHbxwAAAp0HAAAARMT
EQ5yPwIAcBETbysAAAoRE28sAAAKERNvLQAACowxAAABKC4AAApvLwAACiYRB28gAAAKLb3eFREH
dRUAAAETCREJLAcRCW8XAAAK3BEObx4AAAooEAAACiYRDSxWB3MSAAAKExQRFG8TAAAKERRzMAAA
ChMVERURDSUtBiZylwIAcG8xAAAKERURDG8yAAAK3gwRFSwHERVvFwAACtwRFG8YAAAK3gwRFCwH
ERRvFwAACtwSCigzAAAKOiL+///eDhIK/hYCAAAbbxcAAArccpkCAHAoEAAACiYCKDQAAAoWbzUA
AAoqAEEkAQACAAAAQwAAAAsAAABOAAAADAAAAAAAAAACAAAAOgAAACAAAABaAAAADAAAAAAAAAAC
AAAAJQAAAEoAAABvAAAADAAAAAAAAAACAAAAmQAAADMAAADMAAAAFQAAAAAAAAACAAAANgEAAAsA
AABBAQAADAAAAAAAAAACAAAALQEAACAAAABNAQAADAAAAAAAAAACAAAAEQEAAFEAAABiAQAADAAA
AAAAAAACAAAAiQEAAEoAAADTAQAAFQAAAAAAAAACAAAACAIAAEcAAABPAgAAFQAAAAAAAAACAAAA
jQIAAB0AAACqAgAADAAAAAAAAAACAAAAfQIAAEIAAAC/AgAADAAAAAAAAAACAAAA9AAAAOUBAADZ
AgAADgAAAAAAAAAeAig2AAAKKh4CKDcAAAoqrn4BAAAELR5yyQIAcNADAAACKDgAAApvOQAACnM6
AAAKgAEAAAR+AQAABCoafgIAAAQqHgKAAgAABCoafgMAAAQqHgIoOwAACioucwgAAAaAAwAABCoA
AEJTSkIBAAEAAAAAAAwAAAB2NC4wLjMwMzE5AAAAAAUAbAAAAEwFAAAjfgAAuAUAAAAIAAAjU3Ry
aW5ncwAAAAC4DQAAPAMAACNVUwD0EAAAEAAAACNHVUlEAAAABBEAADACAAAjQmxvYgAAAAAAAAAC
AAABVx2iCQkDAAAA+gEzABYAAAEAAAA0AAAABQAAAAYAAAAJAAAAAQAAADsAAAACAAAAEAAAAAEA
AAACAAAAAwAAAAQAAAACAAAAAQAAAAcAAAABAAAAAQAAAAAANAQBAAAAAAAGAOAC/QUGAG8D/QUG
ACwC6gUPAHEGAAAGAFkCxwQGAMMCxwQGAKQCxwQGAFYDxwQGAAADxwQGABkDxwQGAHACxwQGAIsC
kwMKADQD4wMKAIIB4wMOAMwARgASAAEAWwAOAB4FiQcOAI0AiQcOAKYFiQcGAMMF2QYGANYAagRD
ANIFAAAGAHYFtAcWAA0FaQcWAH8AaQcWAFcFaQcOAMAHRgAOAJIERgAOAOUHiQcGAHEEagQGAA8C
6gUGADoHagQGAIgFHQYGAD8FsgQaAN8BHgQaAEACHgQaALkBnQQGAPQB/QUeAM0HuAYeAE0HuAYO
AAAFLAUOAJgFLAUOAO4ERgAOAJ4BRgAGAK8DagQOAEsFRgAOANkERgAGAEEBagQGAAsAagQKAAwE
4wMGAOIAagQGANwHxwQAAAAAEQAAAAAAAQABAAEAEACHBCIAOQABAAEAAAAQACQGgAaBAAEAAwAA
ARAArwaABpUAAwAHAAMBAAAVBwAAeQAEAAoAEQB2BC0BEQByATIBEQC8ADcBBgYaADsBVoAFBz4B
VoBSAT4BUCAAAAAAhgCNBAYAAQCAJAAAAACGGN0FBgABAIgkAAAAAIMY3QUGAAEAkCQAAAAAkwiE
BUIBAQC8JAAAAACTCFoBSAEBAMMkAAAAAJMIZgFOAQEAyyQAAAAAlghBB1UBAgDSJAAAAACGGN0F
BgACANokAAAAAJEY4wVaAQIAAAABAI0DCQDdBQEAEQDdBQYAGQDdBQoAKQDdBRAAMQDdBRAAOQDd
BRAAQQDdBRAASQDdBRAAUQDdBRAAWQDdBRAAYQDdBRAAaQDdBQYA+QDdBQYAIQHdBRUAMQHdBQYA
OQHIB0wAeQDdBQYAiQDdBRAASQGCBAYAkQDdBVMAmQDdBVoAUQFcBGAAqQDXAQYASQHRAQYADADd
BQYAeQAjB2wAYQHPBXIAoQCfB3cA2QBhBHsAAQGtA4AADAB7AIQAoQCrB4oADADPBY4AFACfB50A
wQDdBRAAaQEsB6IAyQDdBagAyQBoBa8AeQB2ALQAaQHxB7sAuQDdBQYAeQDNBsEA4QAfAYAA4QA5
AccA4QC2A80AaQEzB9EAuQAuAdkA6QDdBd8A6QAGARAA6QC1BeUAFACrB4oAcQANB+sAkQFaBwEA
cQDdBQYAAQHdBQYAgQH0APEAgQHYB/oACQHdBQABKQHdBQYACAAUACMBCAAYACgBKQBzAJcBLgAL
AG8BLgATAHgBLgAbAJcBLgAjAKABLgArAMkBLgAzAMkBLgA7AMkBLgBDAKABLgBLAM8BLgBTAMkB
LgBbAOYBQwBjACgBSQBzAJcBYQB7ACgBYwBrACgBHAADAAEABAADAAAAiAVeAQAAegFkAQAARQdq
AQIABAADAAIABQAFAAEABgAFAAIABwAHAGYAlwAEgAAAAQAAAPUiWXMAAAAAAACYAAAABAAAAAAA
AAAAAAAACAFSAAAAAAAQAAAAAAAAAAAAAAARAcQDAAAAAAQAAAAAAAAAAAAAAAgBRgAAAAAABAAA
AAAAAAAAAAAACAFGAQAAAAAEAHoAEwABAAAAAAAaAewGAAAAAAQAAAAAAAAAAAAAAAgBagQAAAAA
BAAAAAAAAAAAAAAACAG4BgAAAAAAAAAAAQAAAC4GAAAFAAIAAAAAAABIYXNoU2V0YDEASW50MzIA
PE1vZHVsZT4AdmFsdWVfXwBTVF81NWM5YjUwNTdiNTc0Y2YwYTUzYTU5YWQ4OGNkNWYzYQBTeXN0
ZW0uRGF0YQBtc2NvcmxpYgBTeXN0ZW0uQ29sbGVjdGlvbnMuR2VuZXJpYwBMb2FkAEFkZABPcmFj
bGVDb21tYW5kAFNxbENvbW1hbmQAU1RfY2ViMGExYjNiZGJmNDE1MmFhYjU3OWVmNjNiZTE0NGUA
ZGVmYXVsdEluc3RhbmNlAERhdGFUYWJsZQBJRGlzcG9zYWJsZQBSdW50aW1lVHlwZUhhbmRsZQBH
ZXRUeXBlRnJvbUhhbmRsZQBzZXRfRGVzdGluYXRpb25UYWJsZU5hbWUAZ2V0X0NvbHVtbk5hbWUA
QXBwZW5kTGluZQBnZXRfRGF0YVR5cGUAU3lzdGVtLkNvcmUARmFpbHVyZQBnZXRfQ3VsdHVyZQBz
ZXRfQ3VsdHVyZQByZXNvdXJjZUN1bHR1cmUAVlNUQVJUU2NyaXB0T2JqZWN0TW9kZWxCYXNlAElu
dGVybmFsRGF0YUNvbGxlY3Rpb25CYXNlAEFwcGxpY2F0aW9uU2V0dGluZ3NCYXNlAENsb3NlAERp
c3Bvc2UARWRpdG9yQnJvd3NhYmxlU3RhdGUAQ29tcGlsZXJHZW5lcmF0ZWRBdHRyaWJ1dGUARGVi
dWdnZXJOb25Vc2VyQ29kZUF0dHJpYnV0ZQBEZWJ1Z2dhYmxlQXR0cmlidXRlAEVkaXRvckJyb3dz
YWJsZUF0dHJpYnV0ZQBBc3NlbWJseVRpdGxlQXR0cmlidXRlAEFzc2VtYmx5VHJhZGVtYXJrQXR0
cmlidXRlAFRhcmdldEZyYW1ld29ya0F0dHJpYnV0ZQBBc3NlbWJseUNvbmZpZ3VyYXRpb25BdHRy
aWJ1dGUAQXNzZW1ibHlEZXNjcmlwdGlvbkF0dHJpYnV0ZQBDb21waWxhdGlvblJlbGF4YXRpb25z
QXR0cmlidXRlAEFzc2VtYmx5UHJvZHVjdEF0dHJpYnV0ZQBBc3NlbWJseUNvcHlyaWdodEF0dHJp
YnV0ZQBTU0lTU2NyaXB0VGFza0VudHJ5UG9pbnRBdHRyaWJ1dGUAQXNzZW1ibHlDb21wYW55QXR0
cmlidXRlAFJ1bnRpbWVDb21wYXRpYmlsaXR5QXR0cmlidXRlAHZhbHVlAFN5c3RlbS5SdW50aW1l
LlZlcnNpb25pbmcAVG9TdHJpbmcAZ2V0X01heExlbmd0aABNaWNyb3NvZnQuU3FsU2VydmVyLlNj
cmlwdFRhc2sATWljcm9zb2Z0LlNxbFNlcnZlci5EdHMuVGFza3MuU2NyaXB0VGFzawBTY3JpcHRP
YmplY3RNb2RlbABTeXN0ZW0uQ29tcG9uZW50TW9kZWwAU1RfY2ViMGExYjNiZGJmNDE1MmFhYjU3
OWVmNjNiZTE0NGUuZGxsAEZpbGwAZ2V0X0l0ZW0AU3lzdGVtAEVudW0AcmVzb3VyY2VNYW4AT3Bl
bgBTY3JpcHRNYWluAERhdGFDb2x1bW4AU3lzdGVtLkNvbmZpZ3VyYXRpb24AU3lzdGVtLkdsb2Jh
bGl6YXRpb24AU3lzdGVtLlJlZmxlY3Rpb24ARGF0YUNvbHVtbkNvbGxlY3Rpb24ARGF0YVJvd0Nv
bGxlY3Rpb24ARGJDb25uZWN0aW9uAE9yYWNsZUNvbm5lY3Rpb24AU3FsQ29ubmVjdGlvbgBTeXN0
ZW0uRGF0YS5Db21tb24AQ3VsdHVyZUluZm8ASURhdGFSZWFkZXIAT3JhY2xlRGF0YVJlYWRlcgBF
eGVjdXRlUmVhZGVyAFN0cmluZ0J1aWxkZXIAZ2V0X1Jlc291cmNlTWFuYWdlcgBEYkRhdGFBZGFw
dGVyAFNxbERhdGFBZGFwdGVyAFdyaXRlVG9TZXJ2ZXIASUVudW1lcmF0b3IAR2V0RW51bWVyYXRv
cgAuY3RvcgAuY2N0b3IAU3lzdGVtLkRpYWdub3N0aWNzAFN5c3RlbS5SdW50aW1lLkNvbXBpbGVy
U2VydmljZXMAU3lzdGVtLlJlc291cmNlcwBTVF9jZWIwYTFiM2JkYmY0MTUyYWFiNTc5ZWY2M2Jl
MTQ0ZS5Qcm9wZXJ0aWVzLlJlc291cmNlcy5yZXNvdXJjZXMARGVidWdnaW5nTW9kZXMAU1RfY2Vi
MGExYjNiZGJmNDE1MmFhYjU3OWVmNjNiZTE0NGUuUHJvcGVydGllcwBTZXR0aW5ncwBTeXN0ZW0u
V2luZG93cy5Gb3JtcwBnZXRfQ29sdW1ucwBTeXN0ZW0uQ29sbGVjdGlvbnMAT3JhY2xlLk1hbmFn
ZWREYXRhQWNjZXNzAFN1Y2Nlc3MAZ2V0X0R0cwBTY3JpcHRSZXN1bHRzAGdldF9Sb3dzAENvbmNh
dABGb3JtYXQAT2JqZWN0AGdldF9EZWZhdWx0AERpYWxvZ1Jlc3VsdABzZXRfVGFza1Jlc3VsdABP
cmFjbGUuTWFuYWdlZERhdGFBY2Nlc3MuQ2xpZW50AFN5c3RlbS5EYXRhLlNxbENsaWVudABnZXRf
Q3VycmVudABNb3ZlTmV4dABTeXN0ZW0uVGV4dABEYXRhUm93AFNob3cATWVzc2FnZUJveABnZXRf
QXNzZW1ibHkAU3FsQnVsa0NvcHkAb3BfRXF1YWxpdHkAAAAAAAtIAGUAbABsAG8AAICLVQBzAGUA
cgAgAEkAZAA9AGIAaQByAGoAYQBuADsAUABhAHMAcwB3AG8AcgBkAD0AUgBmAHYALABmAGkAMAAx
ADsARABhAHQAYQAgAFMAbwB1AHIAYwBlAD0AMQA5ADIALgAxADYAOAAuADgAMQAuADkAOQA6ADEA
NQAyADEALwBvAHIAYwBsADEAAIDhRABhAHQAYQAgAFMAbwB1AHIAYwBlAD0AMQA3ADIALgAxADcA
LgAxADcALgAyADIALAA1ADQAMwAxADIAOwBJAG4AaQB0AGkAYQBsACAAQwBhAHQAYQBsAG8AZwA9
AEIAUgBEAEIAOwBVAHMAZQByACAASQBEAD0ARQBUAEwAVQBzAGUAcgA7AFAAYQBzAHMAdwBvAHIA
ZAA9AHAAMABsAGkAYwBlADsAVAByAHUAcwB0AFMAZQByAHYAZQByAEMAZQByAHQAaQBmAGkAYwBh
AHQAZQA9AFQAcgB1AGUAOwAAU1MARQBMAEUAQwBUACAAKgAgAEYAUgBPAE0AIABkAGIAbwAuAFIA
ZQBwAGwAaQBjAGEAdABlAE0AYQBwAHAAaQBuAGcAQwBvAG4AdAByAG8AbAAAAzEAAB9TAG8AdQBy
AGMAZQBUAGEAYgBsAGUATgBhAG0AZQAAAzIAAB1TAEUATABFAEMAVAAgACoAIABGAFIATwBNACAA
AAMzAAAfVABhAHIAZwBlAHQAVABhAGIAbABlAE4AYQBtAGUAAAM0AABXQwBvAGwAdQBtAG4AIABO
AGEAbQBlADoAIAB7ADAAfQAsACAARABhAHQAYQAgAFQAeQBwAGUAOgAgAHsAMQB9ACwAIABTAGkA
egBlADoAIAB7ADIAfQAAAQAvRABhAHQAYQAgAHQAcgBhAG4AcwBmAGUAcgAgAGMAbwBtAHAAbABl
AHQAZQAuAABxUwBUAF8AYwBlAGIAMABhADEAYgAzAGIAZABiAGYANAAxADUAMgBhAGEAYgA1ADcA
OQBlAGYANgAzAGIAZQAxADQANABlAC4AUAByAG8AcABlAHIAdABpAGUAcwAuAFIAZQBzAG8AdQBy
AGMAZQBzAAAAlHzuc+XQuUyr4q1C+XxDdgAEIAEBCAMgAAEFIAEBEREEIAEBDgYgAQERgI0vBxYO
DhI9FRJBAQ4SRRJJEk0SUQ4SVRURWQEODhI9DhJdEmESZRJpEm0ScRJFEnUGAAERgKEOBiACAQ4S
RQUgAQESSQUgAQgSPQUVEkEBDgUgABKArQQgABJRAyAAHAQgARwOAyAADgUgAQITAAMgAAIIIAAV
EVkBEwAFFRFZAQ4EIAATAAUAAg4ODgYgAgEOEmEEIAASaQYgAQESgLkFAAICDg4FIAASgL0FIAAS
gMEDIAAIBwAEDg4cHBwFIAESXQ4FIAEBEkUFIAEBEj0FIAASgMkIAAESgMERgM0FIAASgNEHIAIB
DhKA0Qi3elxWGTTgiQiJhF3NgIDMkQiJtIP0KcRzQgQAAAAABAEAAAAEBhKAhQQGEoCJAwYSEAIG
CAMGERQFAAASgIUFAAASgIkGAAEBEoCJBAAAEhADAAABBQgAEoCFBQgAEoCJBAgAEhAIAQAIAAAA
AAAeAQABAFQCFldyYXBOb25FeGNlcHRpb25UaHJvd3MBCAEAAgAAAAAAKAEAI1NUX2NlYjBhMWIz
YmRiZjQxNTJhYWI1NzllZjYzYmUxNDRlAAAFAQAAAAAWAQARQ29weXJpZ2h0IEAgIDIwMjQAAEkB
ABouTkVURnJhbWV3b3JrLFZlcnNpb249djQuNwEAVA4URnJhbWV3b3JrRGlzcGxheU5hbWUSLk5F
VCBGcmFtZXdvcmsgNC43tAAAAM7K774BAAAAkQAAAGxTeXN0ZW0uUmVzb3VyY2VzLlJlc291cmNl
UmVhZGVyLCBtc2NvcmxpYiwgVmVyc2lvbj00LjAuMC4wLCBDdWx0dXJlPW5ldXRyYWwsIFB1Ymxp
Y0tleVRva2VuPWI3N2E1YzU2MTkzNGUwODkjU3lzdGVtLlJlc291cmNlcy5SdW50aW1lUmVzb3Vy
Y2VTZXQCAAAAAAAAAAAAAABQQURQQURQtAAAAPw4AAAAAAAAAAAAABY5AAAAIAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAIOQAAAAAAAAAAAAAAAF9Db3JEbGxNYWluAG1zY29yZWUuZGxsAAAAAAD/JQAg
ABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AQAQAAAAGAAAgAAAAAAAAAAAAAAAAAAAAQABAAAAMAAAgAAAAAAAAAAAAAAAAAAAAQAAAAAASAAA
AFhAAAAaBAAAAAAAAAAAAAAaBDQAAABWAFMAXwBWAEUAUgBTAEkATwBOAF8ASQBOAEYATwAAAAAA
vQTv/gAAAQAAAAEAWXP1IgAAAQBZc/UiPwAAAAAAAAAEAAAAAgAAAAAAAAAAAAAAAAAAAEQAAAAB
AFYAYQByAEYAaQBsAGUASQBuAGYAbwAAAAAAJAAEAAAAVAByAGEAbgBzAGwAYQB0AGkAbwBuAAAA
AAAAALAEegMAAAEAUwB0AHIAaQBuAGcARgBpAGwAZQBJAG4AZgBvAAAAVgMAAAEAMAAwADAAMAAw
ADQAYgAwAAAAGgABAAEAQwBvAG0AbQBlAG4AdABzAAAAAAAAACIAAQABAEMAbwBtAHAAYQBuAHkA
TgBhAG0AZQAAAAAAAAAAAHAAJAABAEYAaQBsAGUARABlAHMAYwByAGkAcAB0AGkAbwBuAAAAAABT
AFQAXwBjAGUAYgAwAGEAMQBiADMAYgBkAGIAZgA0ADEANQAyAGEAYQBiADUANwA5AGUAZgA2ADMA
YgBlADEANAA0AGUAAAA+AA8AAQBGAGkAbABlAFYAZQByAHMAaQBvAG4AAAAAADEALgAwAC4AOAA5
ADQAOQAuADIAOQA1ADIAOQAAAAAAcAAoAAEASQBuAHQAZQByAG4AYQBsAE4AYQBtAGUAAABTAFQA
XwBjAGUAYgAwAGEAMQBiADMAYgBkAGIAZgA0ADEANQAyAGEAYQBiADUANwA5AGUAZgA2ADMAYgBl
ADEANAA0AGUALgBkAGwAbAAAAEgAEgABAEwAZQBnAGEAbABDAG8AcAB5AHIAaQBnAGgAdAAAAEMA
bwBwAHkAcgBpAGcAaAB0ACAAQAAgACAAMgAwADIANAAAACoAAQABAEwAZQBnAGEAbABUAHIAYQBk
AGUAbQBhAHIAawBzAAAAAAAAAAAAeAAoAAEATwByAGkAZwBpAG4AYQBsAEYAaQBsAGUAbgBhAG0A
ZQAAAFMAVABfAGMAZQBiADAAYQAxAGIAMwBiAGQAYgBmADQAMQA1ADIAYQBhAGIANQA3ADkAZQBm
ADYAMwBiAGUAMQA0ADQAZQAuAGQAbABsAAAAaAAkAAEAUAByAG8AZAB1AGMAdABOAGEAbQBlAAAA
AABTAFQAXwBjAGUAYgAwAGEAMQBiADMAYgBkAGIAZgA0ADEANQAyAGEAYQBiADUANwA5AGUAZgA2
ADMAYgBlADEANAA0AGUAAABCAA8AAQBQAHIAbwBkAHUAYwB0AFYAZQByAHMAaQBvAG4AAAAxAC4A
MAAuADgAOQA0ADkALgAyADkANQAyADkAAAAAAEYADwABAEEAcwBzAGUAbQBiAGwAeQAgAFYAZQBy
AHMAaQBvAG4AAAAxAC4AMAAuADgAOQA0ADkALgAyADkANQAyADkAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwAAAMAAAAKDkAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</BinaryItem>
        </ScriptProject>
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\Script v-3"
      DTS:CreationName="Microsoft.ScriptTask"
      DTS:Description="Script Task"
      DTS:Disabled="True"
      DTS:DTSID="{a251da5b-38e1-4329-877b-9a55a43bad21}"
      DTS:ExecutableType="Microsoft.ScriptTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="Script v-3"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <ScriptProject
          Name="ST_bfa81641850148538cb0d111248fe08d"
          VSTAMajorVersion="16"
          VSTAMinorVersion="0"
          Language="CSharp"
          ReadOnlyVariables="System::ClusterID,System::ClusterNodeCount,System::ContainerStartTime,System::CreationName,System::LocaleID,System::ParentContainerGUID,System::TaskID,System::TaskName,System::TaskTransactionOption,System::CancelEvent,System::CreationDate,System::CreatorComputerName,System::CreatorName,System::ExecutionInstanceGUID,System::FailedConfigurations,System::IgnoreConfigurationsOnLoad,System::InteractiveMode,System::LastModifiedProductVersion,System::MachineName,System::OfflineMode,System::PackageID,System::PackageName,System::ProductVersion,System::ServerExecutionID,System::StartTime,System::UserName,System::VersionBuild,System::VersionComments,System::VersionGUID,System::VersionMajor,System::VersionMinor,$Package::LogTableName,$Package::MappingControlTableName,$Package::MasterControlTableName,$Package::OracleConnectionString,$Package::SQLServerConnectionString">
          <ProjectItem
            Name="Properties\Settings.settings"
            Encoding="UTF8"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></ProjectItem>
          <ProjectItem
            Name="Properties\Resources.resx"
            Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></ProjectItem>
          <ProjectItem
            Name="ScriptMain.cs"
            Encoding="UTF8"><![CDATA[#region Help: Introduction to the script task
/* The Script Task allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services control flow. 
 * 
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script task. */
#endregion

#region Namespaces
using System;
using System.Data;
using Microsoft.SqlServer.Dts.Runtime;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Oracle.ManagedDataAccess.Client;
using System.Data.SqlClient;
using System.IO;
#endregion

namespace ST_55c9b5057b574cf0a53a59ad88cd5f3a
{
    [Microsoft.SqlServer.Dts.Tasks.ScriptTask.SSISScriptTaskEntryPointAttribute]
    public partial class ScriptMain : Microsoft.SqlServer.Dts.Tasks.ScriptTask.VSTARTScriptObjectModelBase
    {
        private string loadID;

        public void Main()
        {
            loadID = (string)Dts.Variables["System::ExecutionInstanceGUID"].Value;

            // Use package parameters instead of variables
            string oracleConnectionString = (string)Dts.Variables["$Package::OracleConnectionString"].Value;
            string sqlServerConnectionString = (string)Dts.Variables["$Package::SQLServerConnectionString"].Value;
            string masterControlTableName = (string)Dts.Variables["$Package::MasterControlTableName"].Value;
            string mappingControlTableName = (string)Dts.Variables["$Package::MappingControlTableName"].Value;
            string logTableName = (string)Dts.Variables["$Package::LogTableName"].Value;

            try
            {
                LogStep("Start", "Process started", "", false, sqlServerConnectionString, logTableName);

                // Step 1: Read control table from SQL Server
                DataTable controlTable = new DataTable();

                using (SqlConnection sqlConnection = new SqlConnection(sqlServerConnectionString))
                {
                    sqlConnection.Open();
                    using (SqlCommand sqlCommand = new SqlCommand($"SELECT * FROM {masterControlTableName} WHERE IsActive = 1", sqlConnection))
                    {
                        using (SqlDataAdapter sqlDataAdapter = new SqlDataAdapter(sqlCommand))
                        {
                            sqlDataAdapter.Fill(controlTable);
                        }
                    }
                    sqlConnection.Close();
                }
                LogStep("Read Control Table", "Control table read successfully", "", false, sqlServerConnectionString, logTableName);

                // Process each active source table
                foreach (DataRow masterRow in controlTable.Rows)
                {
                    string sourceTableName = masterRow["SourceTableName"].ToString();
                    string sourceQuery = masterRow["SourceQuery"].ToString();
                    string sourceFilterCondition = masterRow["SourceFilterCondition"].ToString();
                    string targetTableName = masterRow["TargetTableName"].ToString();

                    DataTable sourceDataTable = new DataTable();

                    try
                    {
                        // Step 2: Read data from Oracle
                        using (OracleConnection oracleConnection = new OracleConnection(oracleConnectionString))
                        {
                            oracleConnection.Open();

                            if (!string.IsNullOrEmpty(sourceQuery))
                            {
                                // Use SourceQuery if provided
                                using (OracleCommand oracleCommand = new OracleCommand(sourceQuery, oracleConnection))
                                {
                                    using (OracleDataReader reader = oracleCommand.ExecuteReader())
                                    {
                                        sourceDataTable.Load(reader);
                                    }
                                }
                            }
                            else
                            {
                                // Construct query based on mapping table if SourceQuery is null
                                using (SqlConnection sqlConnection = new SqlConnection(sqlServerConnectionString))
                                {
                                    sqlConnection.Open();
                                    DataTable mappingTable = new DataTable();
                                    using (SqlCommand sqlCommand = new SqlCommand($"SELECT * FROM {mappingControlTableName} WHERE MasterId = @MasterId AND IsActive = 1", sqlConnection))
                                    {
                                        sqlCommand.Parameters.AddWithValue("@MasterId", masterRow["Id"]);
                                        using (SqlDataAdapter sqlDataAdapter = new SqlDataAdapter(sqlCommand))
                                        {
                                            sqlDataAdapter.Fill(mappingTable);
                                        }
                                    }

                                    // Build the query to select and convert columns from Oracle
                                    StringBuilder selectQueryBuilder = new StringBuilder();
                                    selectQueryBuilder.Append("SELECT ");
                                    foreach (DataRow mappingRow in mappingTable.Rows)
                                    {
                                        string sourceColumnName = mappingRow["SourceColumnName"].ToString();
                                        string sourceDataType = mappingRow["SourceDataType"].ToString();
                                        string sourceCustomConvert = mappingRow["SourceCustomConvert"].ToString();

                                        if (!string.IsNullOrEmpty(sourceCustomConvert))
                                        {
                                            selectQueryBuilder.Append($"{sourceCustomConvert} AS {sourceColumnName}, ");
                                        }
                                        else if (string.IsNullOrEmpty(sourceDataType))
                                        {
                                            selectQueryBuilder.Append($"{sourceColumnName}, ");
                                        }
                                        else
                                        {
                                            selectQueryBuilder.Append($"CAST({sourceColumnName} AS {sourceDataType}) AS {sourceColumnName}, ");
                                        }
                                    }
                                    selectQueryBuilder.Length -= 2; // Remove the last comma and space
                                    selectQueryBuilder.Append($" FROM {sourceTableName}");

                                    // Add the SourceFilterCondition if provided
                                    if (!string.IsNullOrEmpty(sourceFilterCondition))
                                    {
                                        selectQueryBuilder.Append($" {sourceFilterCondition}");
                                    }

                                    File.WriteAllText(@"C:\Users\SaidnazarovOA\OneDrive - Ipoteka Bank\Documents\SQLStaging\LastRanQuery.txt", selectQueryBuilder.ToString());

                                    using (OracleCommand oracleCommand = new OracleCommand(selectQueryBuilder.ToString(), oracleConnection))
                                    {
                                        using (OracleDataReader reader = oracleCommand.ExecuteReader())
                                        {
                                            sourceDataTable.Load(reader);
                                        }
                                    }
                                }
                            }
                            oracleConnection.Close();
                        }
                        LogStep("Read Source Data", $"Data read successfully from {sourceTableName}", "", false, sqlServerConnectionString, logTableName);

                        // Step 3: Drop and create target table in SQL Server
                        CreateTargetTable(sqlServerConnectionString, targetTableName, masterRow["Id"].ToString(), mappingControlTableName);
                        LogStep("Create Target Table", $"Target table {targetTableName} created successfully", "", false, sqlServerConnectionString, logTableName);

                        // Step 4: Insert data into SQL Server using SqlBulkCopy
                        using (SqlConnection sqlConnection = new SqlConnection(sqlServerConnectionString))
                        {
                            sqlConnection.Open();
                            using (SqlBulkCopy sqlBulkCopy = new SqlBulkCopy(sqlConnection))
                            {
                                sqlBulkCopy.DestinationTableName = targetTableName;

                                // Get column mappings from the control table
                                DataTable mappingTable = new DataTable();
                                using (SqlCommand sqlCommand = new SqlCommand($"SELECT * FROM {mappingControlTableName} WHERE MasterId = @MasterId AND IsActive = 1", sqlConnection))
                                {
                                    sqlCommand.Parameters.AddWithValue("@MasterId", masterRow["Id"]);
                                    using (SqlDataAdapter sqlDataAdapter = new SqlDataAdapter(sqlCommand))
                                    {
                                        sqlDataAdapter.Fill(mappingTable);
                                    }
                                }

                                // Add column mappings
                                foreach (DataRow mappingRow in mappingTable.Rows)
                                {
                                    string sourceColumn = mappingRow["SourceColumnName"].ToString();
                                    string targetColumn = mappingRow["TargetColumnName"].ToString();
                                    sqlBulkCopy.ColumnMappings.Add(sourceColumn, targetColumn);
                                }

                                sqlBulkCopy.WriteToServer(sourceDataTable);
                            }
                            sqlConnection.Close();
                        }
                        LogStep("Insert Data", $"Data inserted successfully into {targetTableName}", "", false, sqlServerConnectionString, logTableName);
                    }
                    catch (Exception ex)
                    {
                        LogStep("Error", $"Error processing {sourceTableName}", ex.Message, true, sqlServerConnectionString, logTableName);
                        throw; // Re-throw the exception to stop the execution
                    }
                }

                LogStep("End", "Process completed successfully", "", false, sqlServerConnectionString, logTableName);
                Dts.TaskResult = (int)ScriptResults.Success;
            }
            catch (Exception ex)
            {
                LogStep("Critical Error", "Critical error occurred", ex.Message, true, sqlServerConnectionString, logTableName);
                Dts.TaskResult = (int)ScriptResults.Failure;
            }
        }

        private void LogStep(string stepName, string stepMessage, string stepErrorMessage, bool isError, string connectionString, string logTableName)
        {
            using (SqlConnection sqlConnection = new SqlConnection(connectionString))
            {
                sqlConnection.Open();
                using (SqlCommand sqlCommand = new SqlCommand($"INSERT INTO {logTableName} (StepName, StepMessage, StepErrorMessage, LoadID, IsError) VALUES (@StepName, @StepMessage, @StepErrorMessage, @LoadID, @IsError)", sqlConnection))
                {
                    sqlCommand.Parameters.AddWithValue("@StepName", stepName);
                    sqlCommand.Parameters.AddWithValue("@StepMessage", stepMessage);
                    sqlCommand.Parameters.AddWithValue("@StepErrorMessage", stepErrorMessage);
                    sqlCommand.Parameters.AddWithValue("@LoadID", loadID);
                    sqlCommand.Parameters.AddWithValue("@IsError", isError ? 1 : 0);
                    sqlCommand.ExecuteNonQuery();
                }
                sqlConnection.Close();
            }
        }

        private void CreateTargetTable(string sqlServerConnectionString, string targetTableName, string masterId, string mappingControlTableName)
        {
            using (SqlConnection sqlConnection = new SqlConnection(sqlServerConnectionString))
            {
                sqlConnection.Open();
                StringBuilder createTableQuery = new StringBuilder();

                // Drop the target table if it already exists
                createTableQuery.Append($"IF OBJECT_ID('{targetTableName}', 'U') IS NOT NULL DROP TABLE {targetTableName}; ");

                // Create the target table
                createTableQuery.Append($"CREATE TABLE {targetTableName} (");

                // Get the columns and their target data types from the mapping table
                using (SqlCommand sqlCommand = new SqlCommand($"SELECT * FROM {mappingControlTableName} WHERE MasterId = @MasterId AND IsActive = 1", sqlConnection))
                {
                    sqlCommand.Parameters.AddWithValue("@MasterId", masterId);
                    using (SqlDataReader reader = sqlCommand.ExecuteReader())
                    {
                        while (reader.Read())
                        {
                            string targetColumnName = reader["TargetColumnName"].ToString();
                            string targetDataType = reader["TargetDataType"].ToString();
                            createTableQuery.Append($"{targetColumnName} {targetDataType}, ");
                        }
                    }
                }

                createTableQuery.Append($"[LoadTimestamp] [DATETIME] DEFAULT GETDATE(), ");
                createTableQuery.Append($"[LoadID] [uniqueidentifier] DEFAULT '{loadID}', ");
                createTableQuery.Length -= 2; // Remove the last comma and space
                createTableQuery.Append(");");

                using (SqlCommand sqlCommand = new SqlCommand(createTableQuery.ToString(), sqlConnection))
                {
                    sqlCommand.ExecuteNonQuery();
                }
                sqlConnection.Close();
            }
        }

        #region ScriptResults declaration
        enum ScriptResults
        {
            Success = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Success,
            Failure = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Failure
        };
        #endregion
    }
}]]></ProjectItem>
          <ProjectItem
            Name="Project"
            Encoding="UTF16LE"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="4.0" schemaVersion="1.0">
  <msb:PropertyGroup>
    <msb:CodeName>ST_bfa81641850148538cb0d111248fe08d</msb:CodeName>
    <msb:Language>msBuild</msb:Language>
    <msb:DisplayName>ST_bfa81641850148538cb0d111248fe08d</msb:DisplayName>
    <msb:ProjectId>{9A291242-BD6E-45B1-A304-21D2C6C2F2D4}</msb:ProjectId>
  </msb:PropertyGroup>
  <msb:ItemGroup>
    <msb:Project Include="ST_bfa81641850148538cb0d111248fe08d.csproj" />
    <msb:File Include="ScriptMain.cs" />
    <msb:File Include="Properties\Settings.settings" />
    <msb:File Include="Properties\AssemblyInfo.cs" />
    <msb:File Include="Properties\Resources.resx" />
    <msb:File Include="Properties\Resources.Designer.cs" />
    <msb:File Include="Properties\Settings.Designer.cs" />
  </msb:ItemGroup>
</c:Project>]]></ProjectItem>
          <ProjectItem
            Name="Properties\Settings.Designer.cs"
            Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_1e823dcd85bb4b9580689d919333b656.Properties.Settings.get_Default():ST_1e823dcd85bb4b9580689d919333b656.Properties.Sett" +
    "ings")]

namespace ST_1e823dcd85bb4b9580689d919333b656.Properties {
    
    
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
    }
}]]></ProjectItem>
          <ProjectItem
            Name="ST_bfa81641850148538cb0d111248fe08d.csproj"
            Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProductVersion>8.0.30703</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{80D1B549-EA7D-420F-8032-C6067FBF29BE}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>ST_1e823dcd85bb4b9580689d919333b656</RootNamespace>
    <AssemblyName>ST_bfa81641850148538cb0d111248fe08d</AssemblyName>
    <TargetFrameworkVersion>v4.7</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
    <ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>true</ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>
    <TargetFrameworkProfile></TargetFrameworkProfile>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>.\bin\Debug\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DebugSymbols>false</DebugSymbols>
    <Optimize>true</Optimize>
    <OutputPath>.\bin\Release\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="Oracle.ManagedDataAccess, Version=4.122.19.1, Culture=neutral, PublicKeyToken=89b483f429c47342, processorArchitecture=MSIL" />
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
    <Reference Include="Microsoft.SqlServer.ManagedDTS, Version=16.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.ScriptTask, Version=16.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
  </ItemGroup>
  <ItemGroup>
    <AppDesigner Include="Properties\" />
    <Compile Include="Properties\AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <EmbeddedResource Include="Properties\Resources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
    <Compile Include="Properties\Resources.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Resources.resx</DependentUpon>
    </Compile>
    <None Include="Properties\Settings.settings">
      <Generator>SettingsSingleFileGenerator</Generator>
      <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <Compile Include="Properties\Settings.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Settings.settings</DependentUpon>
    </Compile>
    <Compile Include="ScriptMain.cs">
      <SubType>Code</SubType>
    </Compile>
  </ItemGroup>
  <ItemGroup>
    <WCFMetadata Include="Connected Services\" />
  </ItemGroup>
  <!-- Include the build rules for a C# project.-->
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <ProjectExtensions>
    <VisualStudio>
      <FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}">
        <ProjectProperties HostName="VSTAHostName" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="cs" TemplatesPath="" />
        <Host Name="ScriptTask" />
        <ProjectClient>
          <HostIdentifier>SSIS_ST160</HostIdentifier>
        </ProjectClient>
      </FlavorProperties>
    </VisualStudio>
  </ProjectExtensions>
</Project>]]></ProjectItem>
          <ProjectItem
            Name="Properties\AssemblyInfo.cs"
            Encoding="UTF8"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("ST_1e823dcd85bb4b9580689d919333b656")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("ST_1e823dcd85bb4b9580689d919333b656")]
[assembly: AssemblyCopyright("Copyright @  2024")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.*")]]]></ProjectItem>
          <ProjectItem
            Name="Properties\Resources.Designer.cs"
            Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_1e823dcd85bb4b9580689d919333b656.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_1e823dcd85bb4b9580689d919333b656.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_1e823dcd85bb4b9580689d919333b656.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace ST_1e823dcd85bb4b9580689d919333b656.Properties {
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if ((resourceMan == null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ST_1e823dcd85bb4b9580689d919333b656.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
    }
}]]></ProjectItem>
          <BinaryItem
            Name="ST_bfa81641850148538cb0d111248fe08d.dll">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
I34AAEQGAABsCQAAI1N0cmluZ3MAAAAAsA8AABwKAAAjVVMAzBkAABAAAAAjR1VJRAAAANwZAACA
AgAAI0Jsb2IAAAAAAAAAAgAAAVcdogEJAwAAAPoBMwAWAAABAAAAOQAAAAUAAAAHAAAACwAAAAsA
AABCAAAAAgAAABAAAAADAAAAAgAAAAMAAAAEAAAAAQAAAAYAAAABAAAAAQAAAAAAOgUBAAAAAAAG
AIMDXwcGABIEXwcGAM8CTAcPANMHAAAGAPwCwgUGAGYDwgUGAEcDwgUGAPkDwgUGAKMDwgUGALwD
wgUGABMDwgUGAC4DTQQKANcD6QQKACUC6QQOAB8BbAAOAD4G5ggOANQA5ggOAAAH5ggGACUHOwgO
ACoJbAASAC0GxggSAMYAxggSAJYGxggGAMMGEQkGAEQBcAUOAD8J5ggGAEwGcAUOAKcG5ggGAHcF
cAUGALICTAcGAKQIcAUGANUGfwcGAGkGrQUWAIICJAUWAOMCJAUWAFwCmAUGAJcCXwcKABIF6QQa
ABUI0AEaADsB0AEGAK0EcAUOACAGVgYOAPIGVgYOAA4GbAAOAEECbAAOAH0GbAAOAPcF5ggOAOUG
5ggGAHQBFwAOANQF5ggOAGcE5ggGAAEAcAUOALwAVgYOAIkGVgYGAPABcAUGAFABcAUGADYJwgUA
AAAABwAAAAAAAQABAAEAEACNBUgAOQABAAEAAAAQAIYH4gd9AAIABQAAARAAMgjiB5EABAAJAAMB
AACGCAAAdQAFAAwAAQAQAGUBEQB8BWgBEQAVAm0BEQDmAHIBBgZAAHYBVoB2CHkBVoD1AXkBUCAA
AAAAhgCTBQYAAQD8KAAAAACBAHUGfQEBANwpAAAAAIEAKQGHAQcAsCsAAAAAhhg/BwYACwC4KwAA
AACDGD8HBgALAMArAAAAAJMI0QaPAQsA7CsAAAAAkwj9AZUBCwDzKwAAAACTCAkCmwELAPsrAAAA
AJYIqwiiAQwAAiwAAAAAhhg/BwYADAAKLAAAAACRGEUHpwEMAAAAAQDHAQAAAgACAQAAAwAOAQAA
BAAdBwAABQCaBAAABgB5AQAAAQCABAAAAgC3AQAAAwClAAAABACGAQAAAQBHBAkAPwcBABEAPwcG
ABkAPwcKACkAPwcQADEAPwcQADkAPwcQAEEAPwcQAEkAPwcQAFEAPwcQAFkAPwcQAGEAPwcQAGkA
PwcGAPEAPwcGABkBPwcVACkBPwcGAHEAfghhADEBEQhnADkBZwVtAEEBMAR0AHkAPwcGAIEAPwcQ
AFEBiAUGAEkBnQh4AIkAPwd/AJEAPweGAFkBYgWMAMkAegIGAFEBdAIGAHkAlAiSAGkBMQeYAJkA
/Ah0AKEAZwWdAPkAqwSiAKkAPwcQAEkBWwmmALEAPwerALEAtQayAHkAswC3AIkATgi+AHkBOgTE
AMEAPwcGAMEA3wDMAEkBnQjSAEkBnQjaAEkBnQjgAJkACAnmAMEAtATqAMEAvwQBAIkBHQnuANEA
Pwf0ANEAngEQANEAHwj6AJEBuAAAAdEADwcIAdkA9gCiADEBtwgBAKkBSwnqAIkAtQYkAbEBZwWd
ALEBrgDmAHEAPwcGAPkAPwcGALkBYgEpAbkBMgkyAQEBPwc4ASEBPwcGAAgAGABbAQgAHABgASkA
cwDkAS4ACwC8AS4AEwDFAS4AGwDkAS4AIwDtAS4AKwAWAi4AMwAWAi4AOwAWAi4AQwDtAS4ASwAc
Ai4AUwAWAi4AWwAzAkMAYwBgAUkAcwDkAWMAawBgAYEAewBgARwADgEVAQMAAQAEAAMAAADVBqsB
AAAdArEBAACvCLcBAgAGAAMAAgAHAAUAAQAIAAUAAgAJAAcABIAAAAEAAAD8IotPAAAAAAAAgQAA
AAQAAAAAAAAAAAAAAEABeAAAAAAAEAAAAAAAAAAAAAAASQHKBAAAAAAEAAAAAAAAAAAAAABAAWwA
AAAAAAQAegATAAEAAAAAAFIBXQgAAAAABAAAAAAAAAAAAAAAQAFwBQAAAAAQAAAAAAAAAAAAAABJ
ASEAAAAAAAAAAAABAAAAkAcAAAUAAgAAAABJbnQzMgA8TW9kdWxlPgBsb2FkSUQAU3lzdGVtLklP
AE1pY3Jvc29mdC5TcWxTZXJ2ZXIuTWFuYWdlZERUUwB2YWx1ZV9fAFNUXzU1YzliNTA1N2I1NzRj
ZjBhNTNhNTlhZDg4Y2Q1ZjNhAFN5c3RlbS5EYXRhAG1zY29ybGliAFNUX2JmYTgxNjQxODUwMTQ4
NTM4Y2IwZDExMTI0OGZlMDhkAG1hc3RlcklkAFJlYWQATG9hZABBZGQARGJDb21tYW5kAE9yYWNs
ZUNvbW1hbmQAU3FsQ29tbWFuZABBcHBlbmQAZGVmYXVsdEluc3RhbmNlAGdldF9NZXNzYWdlAHN0
ZXBNZXNzYWdlAHN0ZXBFcnJvck1lc3NhZ2UARGF0YVRhYmxlAENyZWF0ZVRhcmdldFRhYmxlAFZh
cmlhYmxlAElEaXNwb3NhYmxlAFJ1bnRpbWVUeXBlSGFuZGxlAEdldFR5cGVGcm9tSGFuZGxlAEZp
bGUAbG9nVGFibGVOYW1lAG1hcHBpbmdDb250cm9sVGFibGVOYW1lAHNldF9EZXN0aW5hdGlvblRh
YmxlTmFtZQB0YXJnZXRUYWJsZU5hbWUAc3RlcE5hbWUATWljcm9zb2Z0LlNxbFNlcnZlci5EdHMu
UnVudGltZQBUeXBlAEZhaWx1cmUAZ2V0X0N1bHR1cmUAc2V0X0N1bHR1cmUAcmVzb3VyY2VDdWx0
dXJlAFZTVEFSVFNjcmlwdE9iamVjdE1vZGVsQmFzZQBJbnRlcm5hbERhdGFDb2xsZWN0aW9uQmFz
ZQBBcHBsaWNhdGlvblNldHRpbmdzQmFzZQBDbG9zZQBEaXNwb3NlAEVkaXRvckJyb3dzYWJsZVN0
YXRlAENvbXBpbGVyR2VuZXJhdGVkQXR0cmlidXRlAERlYnVnZ2VyTm9uVXNlckNvZGVBdHRyaWJ1
dGUARGVidWdnYWJsZUF0dHJpYnV0ZQBFZGl0b3JCcm93c2FibGVBdHRyaWJ1dGUAQXNzZW1ibHlU
aXRsZUF0dHJpYnV0ZQBBc3NlbWJseVRyYWRlbWFya0F0dHJpYnV0ZQBUYXJnZXRGcmFtZXdvcmtB
dHRyaWJ1dGUAQXNzZW1ibHlDb25maWd1cmF0aW9uQXR0cmlidXRlAEFzc2VtYmx5RGVzY3JpcHRp
b25BdHRyaWJ1dGUAQ29tcGlsYXRpb25SZWxheGF0aW9uc0F0dHJpYnV0ZQBBc3NlbWJseVByb2R1
Y3RBdHRyaWJ1dGUAQXNzZW1ibHlDb3B5cmlnaHRBdHRyaWJ1dGUAU1NJU1NjcmlwdFRhc2tFbnRy
eVBvaW50QXR0cmlidXRlAEFzc2VtYmx5Q29tcGFueUF0dHJpYnV0ZQBSdW50aW1lQ29tcGF0aWJp
bGl0eUF0dHJpYnV0ZQBnZXRfVmFsdWUAQWRkV2l0aFZhbHVlAHZhbHVlAFN5c3RlbS5SdW50aW1l
LlZlcnNpb25pbmcAU3FsQnVsa0NvcHlDb2x1bW5NYXBwaW5nAHNxbFNlcnZlckNvbm5lY3Rpb25T
dHJpbmcAY29ubmVjdGlvblN0cmluZwBUb1N0cmluZwBnZXRfTGVuZ3RoAHNldF9MZW5ndGgATWlj
cm9zb2Z0LlNxbFNlcnZlci5TY3JpcHRUYXNrAE1pY3Jvc29mdC5TcWxTZXJ2ZXIuRHRzLlRhc2tz
LlNjcmlwdFRhc2sAU2NyaXB0T2JqZWN0TW9kZWwAU3lzdGVtLkNvbXBvbmVudE1vZGVsAFNUX2Jm
YTgxNjQxODUwMTQ4NTM4Y2IwZDExMTI0OGZlMDhkLmRsbABGaWxsAGdldF9JdGVtAFN5c3RlbQBF
bnVtAHJlc291cmNlTWFuAE9wZW4AU2NyaXB0TWFpbgBTeXN0ZW0uQ29uZmlndXJhdGlvbgBTeXN0
ZW0uR2xvYmFsaXphdGlvbgBTeXN0ZW0uUmVmbGVjdGlvbgBTcWxCdWxrQ29weUNvbHVtbk1hcHBp
bmdDb2xsZWN0aW9uAFNxbFBhcmFtZXRlckNvbGxlY3Rpb24ARGF0YVJvd0NvbGxlY3Rpb24ARGJD
b25uZWN0aW9uAE9yYWNsZUNvbm5lY3Rpb24AU3FsQ29ubmVjdGlvbgBFeGNlcHRpb24AU3lzdGVt
LkRhdGEuQ29tbW9uAEN1bHR1cmVJbmZvAExvZ1N0ZXAASURhdGFSZWFkZXIARGJEYXRhUmVhZGVy
AE9yYWNsZURhdGFSZWFkZXIAU3FsRGF0YVJlYWRlcgBFeGVjdXRlUmVhZGVyAFN0cmluZ0J1aWxk
ZXIAZ2V0X1Jlc291cmNlTWFuYWdlcgBTcWxQYXJhbWV0ZXIARGJEYXRhQWRhcHRlcgBTcWxEYXRh
QWRhcHRlcgBXcml0ZVRvU2VydmVyAGlzRXJyb3IASUVudW1lcmF0b3IAR2V0RW51bWVyYXRvcgAu
Y3RvcgAuY2N0b3IAU3lzdGVtLkRpYWdub3N0aWNzAFN5c3RlbS5SdW50aW1lLkNvbXBpbGVyU2Vy
dmljZXMAU3lzdGVtLlJlc291cmNlcwBTVF8xZTgyM2RjZDg1YmI0Yjk1ODA2ODlkOTE5MzMzYjY1
Ni5Qcm9wZXJ0aWVzLlJlc291cmNlcy5yZXNvdXJjZXMARGVidWdnaW5nTW9kZXMAU1RfMWU4MjNk
Y2Q4NWJiNGI5NTgwNjg5ZDkxOTMzM2I2NTYuUHJvcGVydGllcwBnZXRfVmFyaWFibGVzAGdldF9D
b2x1bW5NYXBwaW5ncwBTZXR0aW5ncwBTeXN0ZW0uQ29sbGVjdGlvbnMAZ2V0X1BhcmFtZXRlcnMA
T3JhY2xlLk1hbmFnZWREYXRhQWNjZXNzAFN1Y2Nlc3MAZ2V0X0R0cwBTY3JpcHRSZXN1bHRzAGdl
dF9Sb3dzAENvbmNhdABPYmplY3QAZ2V0X0RlZmF1bHQAc2V0X1Rhc2tSZXN1bHQAT3JhY2xlLk1h
bmFnZWREYXRhQWNjZXNzLkNsaWVudABTeXN0ZW0uRGF0YS5TcWxDbGllbnQAZ2V0X0N1cnJlbnQA
TW92ZU5leHQAU3lzdGVtLlRleHQAV3JpdGVBbGxUZXh0AERhdGFSb3cAZ2V0X0Fzc2VtYmx5AFNx
bEJ1bGtDb3B5AEV4ZWN1dGVOb25RdWVyeQBJc051bGxPckVtcHR5AAAAAAA7UwB5AHMAdABlAG0A
OgA6AEUAeABlAGMAdQB0AGkAbwBuAEkAbgBzAHQAYQBuAGMAZQBHAFUASQBEAABBJABQAGEAYwBr
AGEAZwBlADoAOgBPAHIAYQBjAGwAZQBDAG8AbgBuAGUAYwB0AGkAbwBuAFMAdAByAGkAbgBnAABH
JABQAGEAYwBrAGEAZwBlADoAOgBTAFEATABTAGUAcgB2AGUAcgBDAG8AbgBuAGUAYwB0AGkAbwBu
AFMAdAByAGkAbgBnAABBJABQAGEAYwBrAGEAZwBlADoAOgBNAGEAcwB0AGUAcgBDAG8AbgB0AHIA
bwBsAFQAYQBiAGwAZQBOAGEAbQBlAABDJABQAGEAYwBrAGEAZwBlADoAOgBNAGEAcABwAGkAbgBn
AEMAbwBuAHQAcgBvAGwAVABhAGIAbABlAE4AYQBtAGUAAC0kAFAAYQBjAGsAYQBnAGUAOgA6AEwA
bwBnAFQAYQBiAGwAZQBOAGEAbQBlAAALUwB0AGEAcgB0AAAfUAByAG8AYwBlAHMAcwAgAHMAdABh
AHIAdABlAGQAAAEAHVMARQBMAEUAQwBUACAAKgAgAEYAUgBPAE0AIAAAJyAAVwBIAEUAUgBFACAA
SQBzAEEAYwB0AGkAdgBlACAAPQAgADEAACVSAGUAYQBkACAAQwBvAG4AdAByAG8AbAAgAFQAYQBi
AGwAZQAAP0MAbwBuAHQAcgBvAGwAIAB0AGEAYgBsAGUAIAByAGUAYQBkACAAcwB1AGMAYwBlAHMA
cwBmAHUAbABsAHkAAB9TAG8AdQByAGMAZQBUAGEAYgBsAGUATgBhAG0AZQAAF1MAbwB1AHIAYwBl
AFEAdQBlAHIAeQAAK1MAbwB1AHIAYwBlAEYAaQBsAHQAZQByAEMAbwBuAGQAaQB0AGkAbwBuAAAf
VABhAHIAZwBlAHQAVABhAGIAbABlAE4AYQBtAGUAAFkgAFcASABFAFIARQAgAE0AYQBzAHQAZQBy
AEkAZAAgAD0AIABAAE0AYQBzAHQAZQByAEkAZAAgAEEATgBEACAASQBzAEEAYwB0AGkAdgBlACAA
PQAgADEAABNAAE0AYQBzAHQAZQByAEkAZAAABUkAZAAAD1MARQBMAEUAQwBUACAAACFTAG8AdQBy
AGMAZQBDAG8AbAB1AG0AbgBOAGEAbQBlAAAdUwBvAHUAcgBjAGUARABhAHQAYQBUAHkAcABlAAAn
UwBvAHUAcgBjAGUAQwB1AHMAdABvAG0AQwBvAG4AdgBlAHIAdAAACSAAQQBTACAAAAUsACAAAAtD
AEEAUwBUACgAAAspACAAQQBTACAAAA0gAEYAUgBPAE0AIAAAAyAAAICpQwA6AFwAVQBzAGUAcgBz
AFwAUwBhAGkAZABuAGEAegBhAHIAbwB2AE8AQQBcAE8AbgBlAEQAcgBpAHYAZQAgAC0AIABJAHAA
bwB0AGUAawBhACAAQgBhAG4AawBcAEQAbwBjAHUAbQBlAG4AdABzAFwAUwBRAEwAUwB0AGEAZwBp
AG4AZwBcAEwAYQBzAHQAUgBhAG4AUQB1AGUAcgB5AC4AdAB4AHQAASFSAGUAYQBkACAAUwBvAHUA
cgBjAGUAIABEAGEAdABhAAA5RABhAHQAYQAgAHIAZQBhAGQAIABzAHUAYwBjAGUAcwBzAGYAdQBs
AGwAeQAgAGYAcgBvAG0AIAAAJ0MAcgBlAGEAdABlACAAVABhAHIAZwBlAHQAIABUAGEAYgBsAGUA
ABtUAGEAcgBnAGUAdAAgAHQAYQBiAGwAZQAgAAArIABjAHIAZQBhAHQAZQBkACAAcwB1AGMAYwBl
AHMAcwBmAHUAbABsAHkAACFUAGEAcgBnAGUAdABDAG8AbAB1AG0AbgBOAGEAbQBlAAAXSQBuAHMA
ZQByAHQAIABEAGEAdABhAABBRABhAHQAYQAgAGkAbgBzAGUAcgB0AGUAZAAgAHMAdQBjAGMAZQBz
AHMAZgB1AGwAbAB5ACAAaQBuAHQAbwAgAAALRQByAHIAbwByAAAjRQByAHIAbwByACAAcAByAG8A
YwBlAHMAcwBpAG4AZwAgAAAHRQBuAGQAAD1QAHIAbwBjAGUAcwBzACAAYwBvAG0AcABsAGUAdABl
AGQAIABzAHUAYwBjAGUAcwBzAGYAdQBsAGwAeQAAHUMAcgBpAHQAaQBjAGEAbAAgAEUAcgByAG8A
cgAAL0MAcgBpAHQAaQBjAGEAbAAgAGUAcgByAG8AcgAgAG8AYwBjAHUAcgByAGUAZAAAGUkATgBT
AEUAUgBUACAASQBOAFQATwAgAACBBSAAKABTAHQAZQBwAE4AYQBtAGUALAAgAFMAdABlAHAATQBl
AHMAcwBhAGcAZQAsACAAUwB0AGUAcABFAHIAcgBvAHIATQBlAHMAcwBhAGcAZQAsACAATABvAGEA
ZABJAEQALAAgAEkAcwBFAHIAcgBvAHIAKQAgAFYAQQBMAFUARQBTACAAKABAAFMAdABlAHAATgBh
AG0AZQAsACAAQABTAHQAZQBwAE0AZQBzAHMAYQBnAGUALAAgAEAAUwB0AGUAcABFAHIAcgBvAHIA
TQBlAHMAcwBhAGcAZQAsACAAQABMAG8AYQBkAEkARAAsACAAQABJAHMARQByAHIAbwByACkAABNA
AFMAdABlAHAATgBhAG0AZQAAGUAAUwB0AGUAcABNAGUAcwBzAGEAZwBlAAAjQABTAHQAZQBwAEUA
cgByAG8AcgBNAGUAcwBzAGEAZwBlAAAPQABMAG8AYQBkAEkARAAAEUAASQBzAEUAcgByAG8AcgAA
HUkARgAgAE8AQgBKAEUAQwBUAF8ASQBEACgAJwABPycALAAgACcAVQAnACkAIABJAFMAIABOAE8A
VAAgAE4AVQBMAEwAIABEAFIATwBQACAAVABBAEIATABFACAAAQU7ACAAABtDAFIARQBBAFQARQAg
AFQAQQBCAEwARQAgAAAFIAAoAAAdVABhAHIAZwBlAHQARABhAHQAYQBUAHkAcABlAABdWwBMAG8A
YQBkAFQAaQBtAGUAcwB0AGEAbQBwAF0AIABbAEQAQQBUAEUAVABJAE0ARQBdACAARABFAEYAQQBV
AEwAVAAgAEcARQBUAEQAQQBUAEUAKAApACwAIAAAS1sATABvAGEAZABJAEQAXQAgAFsAdQBuAGkA
cQB1AGUAaQBkAGUAbgB0AGkAZgBpAGUAcgBdACAARABFAEYAQQBVAEwAVAAgACcAAQcnACwAIAAB
BSkAOwAAcVMAVABfADEAZQA4ADIAMwBkAGMAZAA4ADUAYgBiADQAYgA5ADUAOAAwADYAOAA5AGQA
OQAxADkAMwAzADMAYgA2ADUANgAuAFAAcgBvAHAAZQByAHQAaQBlAHMALgBSAGUAcwBvAHUAcgBj
AGUAcwAAAAAArDhZxsvNbE+pDmJs8+vdKQAEIAEBCAMgAAEFIAEBEREEIAEBDgYgAQERgIlEBygO
Dg4ODhI9EkESRRJJEk0SUQ4ODg4SPRJVElkSXRJBEj0SYRJFEkkSTQ4ODhJlElkSXRJBEmkSPRJF
EkkODhJtEm0FIAASgJkFIAASgJ0GIAESgKEcAyAAHAYAAw4ODg4GIAIBDhJBBSABARJFBSABCBI9
BSAAEoCxBCAAEk0EIAEcDgMgAA4EAAECDgYgAgEOElUEIAASXQYgAQESgLkFIAASgL0HIAISgMEO
HAUgARJhDgcABA4ODg4OBQACDg4OBQABDh0OAyAAAgMgAAgFAAIBDg4FIAEBEkEFIAASgMkHIAIS
gM0ODgUgAQESPQYHAhJBEkUOBwcSQRJhEkUScQ4OEkUEIAAScQgAARKA3RGA4QUgABKA5QcgAgEO
EoDlCLd6XFYZNOCJCImEXc2AgMyRCIm0g/QpxHNCBAAAAAAEAQAAAAIGDgQGEoCBBAYSgIUDBhIQ
AgYIAwYRFAkgBgEODg4CDg4HIAQBDg4ODgUAABKAgQUAABKAhQYAAQESgIUEAAASEAMAAAEFCAAS
gIEFCAASgIUECAASEAgBAAgAAAAAAB4BAAEAVAIWV3JhcE5vbkV4Y2VwdGlvblRocm93cwEIAQAC
AAAAAAAoAQAjU1RfMWU4MjNkY2Q4NWJiNGI5NTgwNjg5ZDkxOTMzM2I2NTYAAAUBAAAAABYBABFD
b3B5cmlnaHQgQCAgMjAyNAAASQEAGi5ORVRGcmFtZXdvcmssVmVyc2lvbj12NC43AQBUDhRGcmFt
ZXdvcmtEaXNwbGF5TmFtZRIuTkVUIEZyYW1ld29yayA0LjcAAAC0AAAAzsrvvgEAAACRAAAAbFN5
c3RlbS5SZXNvdXJjZXMuUmVzb3VyY2VSZWFkZXIsIG1zY29ybGliLCBWZXJzaW9uPTQuMC4wLjAs
IEN1bHR1cmU9bmV1dHJhbCwgUHVibGljS2V5VG9rZW49Yjc3YTVjNTYxOTM0ZTA4OSNTeXN0ZW0u
UmVzb3VyY2VzLlJ1bnRpbWVSZXNvdXJjZVNldAIAAAAAAAAAAAAAAFBBRFBBRFC0AAAAVEkAAAAA
AAAAAAAAbkkAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGBJAAAAAAAAAAAAAAAAX0NvckRsbE1h
aW4AbXNjb3JlZS5kbGwAAAAAAP8lACAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAEAAAABgA
AIAAAAAAAAAAAAAAAAAAAAEAAQAAADAAAIAAAAAAAAAAAAAAAAAAAAEAAAAAAEgAAABYYAAAGgQA
AAAAAAAAAAAAGgQ0AAAAVgBTAF8AVgBFAFIAUwBJAE8ATgBfAEkATgBGAE8AAAAAAL0E7/4AAAEA
AAABAItP/CIAAAEAi0/8Ij8AAAAAAAAABAAAAAIAAAAAAAAAAAAAAAAAAABEAAAAAQBWAGEAcgBG
AGkAbABlAEkAbgBmAG8AAAAAACQABAAAAFQAcgBhAG4AcwBsAGEAdABpAG8AbgAAAAAAAACwBHoD
AAABAFMAdAByAGkAbgBnAEYAaQBsAGUASQBuAGYAbwAAAFYDAAABADAAMAAwADAAMAA0AGIAMAAA
ABoAAQABAEMAbwBtAG0AZQBuAHQAcwAAAAAAAAAiAAEAAQBDAG8AbQBwAGEAbgB5AE4AYQBtAGUA
AAAAAAAAAABwACQAAQBGAGkAbABlAEQAZQBzAGMAcgBpAHAAdABpAG8AbgAAAAAAUwBUAF8AMQBl
ADgAMgAzAGQAYwBkADgANQBiAGIANABiADkANQA4ADAANgA4ADkAZAA5ADEAOQAzADMAMwBiADYA
NQA2AAAAPgAPAAEARgBpAGwAZQBWAGUAcgBzAGkAbwBuAAAAAAAxAC4AMAAuADgAOQA1ADYALgAy
ADAAMwA2ADMAAAAAAHAAKAABAEkAbgB0AGUAcgBuAGEAbABOAGEAbQBlAAAAUwBUAF8AYgBmAGEA
OAAxADYANAAxADgANQAwADEANAA4ADUAMwA4AGMAYgAwAGQAMQAxADEAMgA0ADgAZgBlADAAOABk
AC4AZABsAGwAAABIABIAAQBMAGUAZwBhAGwAQwBvAHAAeQByAGkAZwBoAHQAAABDAG8AcAB5AHIA
aQBnAGgAdAAgAEAAIAAgADIAMAAyADQAAAAqAAEAAQBMAGUAZwBhAGwAVAByAGEAZABlAG0AYQBy
AGsAcwAAAAAAAAAAAHgAKAABAE8AcgBpAGcAaQBuAGEAbABGAGkAbABlAG4AYQBtAGUAAABTAFQA
XwBiAGYAYQA4ADEANgA0ADEAOAA1ADAAMQA0ADgANQAzADgAYwBiADAAZAAxADEAMQAyADQAOABm
AGUAMAA4AGQALgBkAGwAbAAAAGgAJAABAFAAcgBvAGQAdQBjAHQATgBhAG0AZQAAAAAAUwBUAF8A
MQBlADgAMgAzAGQAYwBkADgANQBiAGIANABiADkANQA4ADAANgA4ADkAZAA5ADEAOQAzADMAMwBi
ADYANQA2AAAAQgAPAAEAUAByAG8AZAB1AGMAdABWAGUAcgBzAGkAbwBuAAAAMQAuADAALgA4ADkA
NQA2AC4AMgAwADMANgAzAAAAAABGAA8AAQBBAHMAcwBlAG0AYgBsAHkAIABWAGUAcgBzAGkAbwBu
AAAAMQAuADAALgA4ADkANQA2AC4AMgAwADMANgAzAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAADAAAAIA5AAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==</BinaryItem>
        </ScriptProject>
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\Script v-4-batchload-try"
      DTS:CreationName="Microsoft.ScriptTask"
      DTS:Description="Script Task"
      DTS:Disabled="True"
      DTS:DTSID="{8ad11758-01fa-493a-8f3e-523960d1029c}"
      DTS:ExecutableType="Microsoft.ScriptTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="Script v-4-batchload-try"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <ScriptProject
          Name="ST_21dd89b2f8a7495498fd48bf5117cb01"
          VSTAMajorVersion="16"
          VSTAMinorVersion="0"
          Language="CSharp"
          ReadOnlyVariables="System::ClusterID,System::ClusterNodeCount,System::ContainerStartTime,System::CreationName,System::LocaleID,System::ParentContainerGUID,System::TaskID,System::TaskName,System::TaskTransactionOption,System::CancelEvent,System::CreationDate,System::CreatorComputerName,System::CreatorName,System::ExecutionInstanceGUID,System::FailedConfigurations,System::IgnoreConfigurationsOnLoad,System::InteractiveMode,System::LastModifiedProductVersion,System::MachineName,System::OfflineMode,System::PackageID,System::PackageName,System::ProductVersion,System::ServerExecutionID,System::StartTime,System::UserName,System::VersionBuild,System::VersionComments,System::VersionGUID,System::VersionMajor,System::VersionMinor,$Package::LogTableName,$Package::MappingControlTableName,$Package::MasterControlTableName,$Package::OracleConnectionString,$Package::SQLServerConnectionString">
          <ProjectItem
            Name="Properties\Settings.settings"
            Encoding="UTF8"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></ProjectItem>
          <ProjectItem
            Name="Properties\Resources.resx"
            Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></ProjectItem>
          <ProjectItem
            Name="ScriptMain.cs"
            Encoding="UTF8"><![CDATA[
#region Namespaces
using System;
using System.Data;
using Microsoft.SqlServer.Dts.Runtime;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Oracle.ManagedDataAccess.Client;
using System.Data.SqlClient;
using System.IO;
#endregion

namespace ST_55c9b5057b574cf0a53a59ad88cd5f3a
{
    [Microsoft.SqlServer.Dts.Tasks.ScriptTask.SSISScriptTaskEntryPointAttribute]
    public partial class ScriptMain : Microsoft.SqlServer.Dts.Tasks.ScriptTask.VSTARTScriptObjectModelBase
    {
        private string loadID;
        private int batchSize = 50000; // Set default batch size

        public void Main()
        {
            loadID = (string)Dts.Variables["System::ExecutionInstanceGUID"].Value;

            // Use package parameters instead of variables
            string oracleConnectionString = (string)Dts.Variables["$Package::OracleConnectionString"].Value;
            string sqlServerConnectionString = (string)Dts.Variables["$Package::SQLServerConnectionString"].Value;
            string masterControlTableName = (string)Dts.Variables["$Package::MasterControlTableName"].Value;
            string mappingControlTableName = (string)Dts.Variables["$Package::MappingControlTableName"].Value;
            string logTableName = (string)Dts.Variables["$Package::LogTableName"].Value;

            try
            {
                LogStep("Start", "Process started", "", false, sqlServerConnectionString, logTableName);

                // Step 1: Read control table from SQL Server
                DataTable controlTable = new DataTable();

                using (SqlConnection sqlConnection = new SqlConnection(sqlServerConnectionString))
                {
                    sqlConnection.Open();
                    using (SqlCommand sqlCommand = new SqlCommand($"SELECT * FROM {masterControlTableName} WHERE IsActive = 1", sqlConnection))
                    {
                        using (SqlDataAdapter sqlDataAdapter = new SqlDataAdapter(sqlCommand))
                        {
                            sqlDataAdapter.Fill(controlTable);
                        }
                    }
                    sqlConnection.Close();
                }
                LogStep("Read Control Table", "Control table read successfully", "", false, sqlServerConnectionString, logTableName);

                // Process each active source table
                foreach (DataRow masterRow in controlTable.Rows)
                {
                    string sourceTableName = masterRow["SourceTableName"].ToString();
                    string sourceQuery = masterRow["SourceQuery"].ToString();
                    string sourceFilterCondition = masterRow["SourceFilterCondition"].ToString();
                    string targetTableName = masterRow["TargetTableName"].ToString();

                    bool isFirstBatch = true;
                    int rowNum = 1;
                    bool hasMoreRows = true;

                    try
                    {
                        while (hasMoreRows)
                        {
                            DataTable sourceDataTable = new DataTable();

                            // Step 2: Read data from Oracle in batches
                            using (OracleConnection oracleConnection = new OracleConnection(oracleConnectionString))
                            {
                                oracleConnection.Open();

                                StringBuilder queryBuilder = new StringBuilder();
                                if (!string.IsNullOrEmpty(sourceQuery))
                                {
                                    // Use SourceQuery if provided
                                    queryBuilder.Append($"({sourceQuery}) and ROWNUM >= {rowNum} AND ROWNUM < {rowNum + batchSize}");
                                }
                                else
                                {
                                    // Construct query based on mapping table if SourceQuery is null
                                    using (SqlConnection sqlConnection = new SqlConnection(sqlServerConnectionString))
                                    {
                                        sqlConnection.Open();
                                        DataTable mappingTable = new DataTable();
                                        using (SqlCommand sqlCommand = new SqlCommand($"SELECT * FROM {mappingControlTableName} WHERE MasterId = @MasterId AND IsActive = 1", sqlConnection))
                                        {
                                            sqlCommand.Parameters.AddWithValue("@MasterId", masterRow["Id"]);
                                            using (SqlDataAdapter sqlDataAdapter = new SqlDataAdapter(sqlCommand))
                                            {
                                                sqlDataAdapter.Fill(mappingTable);
                                            }
                                        }

                                        // Build the query to select and convert columns from Oracle
                                        queryBuilder.Append("SELECT * FROM ( SELECT ");
                                        foreach (DataRow mappingRow in mappingTable.Rows)
                                        {
                                            string sourceColumnName = mappingRow["SourceColumnName"].ToString();
                                            string sourceDataType = mappingRow["SourceDataType"].ToString();
                                            string sourceCustomConvert = mappingRow["SourceCustomConvert"].ToString();

                                            if (!string.IsNullOrEmpty(sourceCustomConvert))
                                            {
                                                queryBuilder.Append($"{sourceCustomConvert} AS {sourceColumnName}, ");
                                            }
                                            else if (string.IsNullOrEmpty(sourceDataType))
                                            {
                                                queryBuilder.Append($"{sourceColumnName}, ");
                                            }
                                            else
                                            {
                                                queryBuilder.Append($"CAST({sourceColumnName} AS {sourceDataType}) AS {sourceColumnName}, ");
                                            }
                                        }
                                        queryBuilder.Append($" ROW_NUMBER() OVER (ORDER BY ROWNUM) as ROW_NUM ");
                                        //queryBuilder.Length -= 2; // Remove the last comma and space
                                        queryBuilder.Append($" FROM {sourceTableName} ");

                                        // Add the SourceFilterCondition if provided
                                        if (!string.IsNullOrEmpty(sourceFilterCondition))
                                        {
                                            queryBuilder.Append($" {sourceFilterCondition} ");
                                        }

                                       
                                        queryBuilder.Append($" ) as A WHERE ROW_NUM >= {rowNum} AND ROW_NUM < {rowNum + batchSize}");
                                        
                                    }
                                }

                                using (OracleCommand oracleCommand = new OracleCommand(queryBuilder.ToString(), oracleConnection))
                                {
                                    using (OracleDataReader reader = oracleCommand.ExecuteReader())
                                    {
                                        sourceDataTable.Load(reader);
                                        if (sourceDataTable.Rows.Count < batchSize)
                                        {
                                            hasMoreRows = false;
                                        }
                                    }
                                }
                                oracleConnection.Close();
                            }

                            LogStep("Read Source Data", $"Data read successfully from {sourceTableName} starting at row {rowNum}", "", false, sqlServerConnectionString, logTableName);

                            // Step 3: Drop and create target table in SQL Server (only on first batch)
                            if (isFirstBatch)
                            {
                                CreateTargetTable(sqlServerConnectionString, targetTableName, masterRow["Id"].ToString(), mappingControlTableName);
                                LogStep("Create Target Table", $"Target table {targetTableName} created successfully", "", false, sqlServerConnectionString, logTableName);
                                isFirstBatch = false;
                            }

                            // Step 4: Insert data into SQL Server using SqlBulkCopy
                            using (SqlConnection sqlConnection = new SqlConnection(sqlServerConnectionString))
                            {
                                sqlConnection.Open();
                                using (SqlBulkCopy sqlBulkCopy = new SqlBulkCopy(sqlConnection))
                                {
                                    sqlBulkCopy.DestinationTableName = targetTableName;

                                    // Get column mappings from the control table
                                    DataTable mappingTable = new DataTable();
                                    using (SqlCommand sqlCommand = new SqlCommand($"SELECT * FROM {mappingControlTableName} WHERE MasterId = @MasterId AND IsActive = 1", sqlConnection))
                                    {
                                        sqlCommand.Parameters.AddWithValue("@MasterId", masterRow["Id"]);
                                        using (SqlDataAdapter sqlDataAdapter = new SqlDataAdapter(sqlCommand))
                                        {
                                            sqlDataAdapter.Fill(mappingTable);
                                        }
                                    }

                                    // Add column mappings
                                    foreach (DataRow mappingRow in mappingTable.Rows)
                                    {
                                        string sourceColumn = mappingRow["SourceColumnName"].ToString();
                                        string targetColumn = mappingRow["TargetColumnName"].ToString();
                                        sqlBulkCopy.ColumnMappings.Add(sourceColumn, targetColumn);
                                    }

                                    sqlBulkCopy.WriteToServer(sourceDataTable);
                                    sourceDataTable.Clear(); // Clear the DataTable for the next batch
                                }
                                sqlConnection.Close();
                            }

                            LogStep("Insert Data", $"Data inserted successfully into {targetTableName} starting at row {rowNum}", "", false, sqlServerConnectionString, logTableName);

                            rowNum += batchSize;
                        }
                    }
                    catch (Exception ex)
                    {
                        LogStep("Error", $"Error processing {sourceTableName}", ex.Message, true, sqlServerConnectionString, logTableName);
                        throw; // Re-throw the exception to stop the execution
                    }
                }

                LogStep("End", "Process completed successfully", "", false, sqlServerConnectionString, logTableName);
                Dts.TaskResult = (int)ScriptResults.Success;
            }
            catch (Exception ex)
            {
                LogStep("Critical Error", "Critical error occurred", ex.Message, true, sqlServerConnectionString, logTableName);
                Dts.TaskResult = (int)ScriptResults.Failure;
            }
        }

        private void LogStep(string stepName, string stepMessage, string stepErrorMessage, bool isError, string connectionString, string logTableName)
        {
            using (SqlConnection sqlConnection = new SqlConnection(connectionString))
            {
                sqlConnection.Open();
                using (SqlCommand sqlCommand = new SqlCommand($"INSERT INTO {logTableName} (StepName, StepMessage, StepErrorMessage, LoadID, IsError) VALUES (@StepName, @StepMessage, @StepErrorMessage, @LoadID, @IsError)", sqlConnection))
                {
                    sqlCommand.Parameters.AddWithValue("@StepName", stepName);
                    sqlCommand.Parameters.AddWithValue("@StepMessage", stepMessage);
                    sqlCommand.Parameters.AddWithValue("@StepErrorMessage", stepErrorMessage);
                    sqlCommand.Parameters.AddWithValue("@LoadID", loadID);
                    sqlCommand.Parameters.AddWithValue("@IsError", isError ? 1 : 0);
                    sqlCommand.ExecuteNonQuery();
                }
                sqlConnection.Close();
            }
        }

        private void CreateTargetTable(string sqlServerConnectionString, string targetTableName, string masterId, string mappingControlTableName)
        {
            using (SqlConnection sqlConnection = new SqlConnection(sqlServerConnectionString))
            {
                sqlConnection.Open();
                StringBuilder createTableQuery = new StringBuilder();

                // Drop the target table if it already exists
                createTableQuery.Append($"IF OBJECT_ID('{targetTableName}', 'U') IS NOT NULL DROP TABLE {targetTableName}; ");

                // Create the target table
                createTableQuery.Append($"CREATE TABLE {targetTableName} (");

                // Get the columns and their target data types from the mapping table
                using (SqlCommand sqlCommand = new SqlCommand($"SELECT * FROM {mappingControlTableName} WHERE MasterId = @MasterId AND IsActive = 1", sqlConnection))
                {
                    sqlCommand.Parameters.AddWithValue("@MasterId", masterId);
                    using (SqlDataReader reader = sqlCommand.ExecuteReader())
                    {
                        while (reader.Read())
                        {
                            string targetColumnName = reader["TargetColumnName"].ToString();
                            string targetDataType = reader["TargetDataType"].ToString();
                            createTableQuery.Append($"{targetColumnName} {targetDataType}, ");
                        }
                    }
                }

                createTableQuery.Append($"[LoadTimestamp] [DATETIME] DEFAULT GETDATE(), ");
                createTableQuery.Append($"[LoadID] [uniqueidentifier] DEFAULT '{loadID}', ");
                createTableQuery.Length -= 2; // Remove the last comma and space
                createTableQuery.Append(");");

                using (SqlCommand sqlCommand = new SqlCommand(createTableQuery.ToString(), sqlConnection))
                {
                    sqlCommand.ExecuteNonQuery();
                }
                sqlConnection.Close();
            }
        }

        #region ScriptResults declaration
        enum ScriptResults
        {
            Success = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Success,
            Failure = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Failure
        };
        #endregion
    }
}]]></ProjectItem>
          <ProjectItem
            Name="ST_21dd89b2f8a7495498fd48bf5117cb01.csproj"
            Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProductVersion>8.0.30703</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{80D1B549-EA7D-420F-8032-C6067FBF29BE}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>ST_1e823dcd85bb4b9580689d919333b656</RootNamespace>
    <AssemblyName>ST_21dd89b2f8a7495498fd48bf5117cb01</AssemblyName>
    <TargetFrameworkVersion>v4.7</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
    <ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>true</ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>
    <TargetFrameworkProfile></TargetFrameworkProfile>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>.\bin\Debug\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DebugSymbols>false</DebugSymbols>
    <Optimize>true</Optimize>
    <OutputPath>.\bin\Release\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="Oracle.ManagedDataAccess, Version=4.122.19.1, Culture=neutral, PublicKeyToken=89b483f429c47342, processorArchitecture=MSIL" />
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
    <Reference Include="Microsoft.SqlServer.ManagedDTS, Version=16.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.ScriptTask, Version=16.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
  </ItemGroup>
  <ItemGroup>
    <AppDesigner Include="Properties\" />
    <Compile Include="Properties\AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <EmbeddedResource Include="Properties\Resources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
    <Compile Include="Properties\Resources.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Resources.resx</DependentUpon>
    </Compile>
    <None Include="Properties\Settings.settings">
      <Generator>SettingsSingleFileGenerator</Generator>
      <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <Compile Include="Properties\Settings.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Settings.settings</DependentUpon>
    </Compile>
    <Compile Include="ScriptMain.cs">
      <SubType>Code</SubType>
    </Compile>
  </ItemGroup>
  <ItemGroup>
    <WCFMetadata Include="Connected Services\" />
  </ItemGroup>
  <!-- Include the build rules for a C# project.-->
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <ProjectExtensions>
    <VisualStudio>
      <FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}">
        <ProjectProperties HostName="VSTAHostName" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="cs" TemplatesPath="" />
        <Host Name="ScriptTask" />
        <ProjectClient>
          <HostIdentifier>SSIS_ST160</HostIdentifier>
        </ProjectClient>
      </FlavorProperties>
    </VisualStudio>
  </ProjectExtensions>
</Project>]]></ProjectItem>
          <ProjectItem
            Name="Project"
            Encoding="UTF16LE"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="4.0" schemaVersion="1.0">
  <msb:PropertyGroup>
    <msb:CodeName>ST_21dd89b2f8a7495498fd48bf5117cb01</msb:CodeName>
    <msb:Language>msBuild</msb:Language>
    <msb:DisplayName>ST_21dd89b2f8a7495498fd48bf5117cb01</msb:DisplayName>
    <msb:ProjectId>{19C7D224-5471-434B-8C5A-93FC9B054B11}</msb:ProjectId>
  </msb:PropertyGroup>
  <msb:ItemGroup>
    <msb:Project Include="ST_21dd89b2f8a7495498fd48bf5117cb01.csproj" />
    <msb:File Include="Properties\Resources.Designer.cs" />
    <msb:File Include="Properties\Settings.settings" />
    <msb:File Include="Properties\AssemblyInfo.cs" />
    <msb:File Include="Properties\Resources.resx" />
    <msb:File Include="Properties\Settings.Designer.cs" />
    <msb:File Include="ScriptMain.cs" />
    <msb:Breakpoint Include="d51ce1716c274eee9a0f139dad88eccb">
      <msb:FileName>ScriptMain.cs</msb:FileName>
      <msb:ColumnNumber>25</msb:ColumnNumber>
      <msb:Enabled>True</msb:Enabled>
      <msb:LineNumber>69</msb:LineNumber>
      <msb:Condition>
      </msb:Condition>
      <msb:ConditionType>1</msb:ConditionType>
      <msb:Language>C#</msb:Language>
      <msb:HitCountType>1</msb:HitCountType>
      <msb:HitCountTarget>1</msb:HitCountTarget>
    </msb:Breakpoint>
    <msb:Breakpoint Include="ec105a3c66924a74b407188ffff2c817">
      <msb:FileName>ScriptMain.cs</msb:FileName>
      <msb:ColumnNumber>40</msb:ColumnNumber>
      <msb:Enabled>True</msb:Enabled>
      <msb:LineNumber>137</msb:LineNumber>
      <msb:Condition>
      </msb:Condition>
      <msb:ConditionType>1</msb:ConditionType>
      <msb:Language>C#</msb:Language>
      <msb:HitCountType>1</msb:HitCountType>
      <msb:HitCountTarget>1</msb:HitCountTarget>
    </msb:Breakpoint>
    <msb:Breakpoint Include="2c23432883554a1c991c35552093e154">
      <msb:FileName>ScriptMain.cs</msb:FileName>
      <msb:ColumnNumber>45</msb:ColumnNumber>
      <msb:Enabled>True</msb:Enabled>
      <msb:LineNumber>144</msb:LineNumber>
      <msb:Condition>
      </msb:Condition>
      <msb:ConditionType>1</msb:ConditionType>
      <msb:Language>C#</msb:Language>
      <msb:HitCountType>1</msb:HitCountType>
      <msb:HitCountTarget>1</msb:HitCountTarget>
    </msb:Breakpoint>
    <msb:Breakpoint Include="7f2094099f174c2bbeca4de37bdc9247">
      <msb:FileName>ScriptMain.cs</msb:FileName>
      <msb:ColumnNumber>41</msb:ColumnNumber>
      <msb:Enabled>True</msb:Enabled>
      <msb:LineNumber>141</msb:LineNumber>
      <msb:Condition>
      </msb:Condition>
      <msb:ConditionType>1</msb:ConditionType>
      <msb:Language>C#</msb:Language>
      <msb:HitCountType>1</msb:HitCountType>
      <msb:HitCountTarget>1</msb:HitCountTarget>
    </msb:Breakpoint>
    <msb:Breakpoint Include="a35f7d5ef77943dc94283544e59da90e">
      <msb:FileName>ScriptMain.cs</msb:FileName>
      <msb:ColumnNumber>36</msb:ColumnNumber>
      <msb:Enabled>True</msb:Enabled>
      <msb:LineNumber>162</msb:LineNumber>
      <msb:Condition>
      </msb:Condition>
      <msb:ConditionType>1</msb:ConditionType>
      <msb:Language>C#</msb:Language>
      <msb:HitCountType>1</msb:HitCountType>
      <msb:HitCountTarget>1</msb:HitCountTarget>
    </msb:Breakpoint>
    <msb:Breakpoint Include="6c4a7867333b4ab8b29e93ee6eb74b48">
      <msb:FileName>ScriptMain.cs</msb:FileName>
      <msb:ColumnNumber>37</msb:ColumnNumber>
      <msb:Enabled>True</msb:Enabled>
      <msb:LineNumber>189</msb:LineNumber>
      <msb:Condition>
      </msb:Condition>
      <msb:ConditionType>1</msb:ConditionType>
      <msb:Language>C#</msb:Language>
      <msb:HitCountType>1</msb:HitCountType>
      <msb:HitCountTarget>1</msb:HitCountTarget>
    </msb:Breakpoint>
    <msb:Breakpoint Include="56bc8ab4174946c0affdb781c9c86f7b">
      <msb:FileName>ScriptMain.cs</msb:FileName>
      <msb:ColumnNumber>37</msb:ColumnNumber>
      <msb:Enabled>True</msb:Enabled>
      <msb:LineNumber>188</msb:LineNumber>
      <msb:Condition>
      </msb:Condition>
      <msb:ConditionType>1</msb:ConditionType>
      <msb:Language>C#</msb:Language>
      <msb:HitCountType>1</msb:HitCountType>
      <msb:HitCountTarget>1</msb:HitCountTarget>
    </msb:Breakpoint>
    <msb:Breakpoint Include="879a0e7c20e649df91ff65ad085369a1">
      <msb:FileName>ScriptMain.cs</msb:FileName>
      <msb:ColumnNumber>33</msb:ColumnNumber>
      <msb:Enabled>True</msb:Enabled>
      <msb:LineNumber>191</msb:LineNumber>
      <msb:Condition>
      </msb:Condition>
      <msb:ConditionType>1</msb:ConditionType>
      <msb:Language>C#</msb:Language>
      <msb:HitCountType>1</msb:HitCountType>
      <msb:HitCountTarget>1</msb:HitCountTarget>
    </msb:Breakpoint>
  </msb:ItemGroup>
</c:Project>]]></ProjectItem>
          <ProjectItem
            Name="Properties\Settings.Designer.cs"
            Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_1e823dcd85bb4b9580689d919333b656.Properties.Settings.get_Default():ST_1e823dcd85bb4b9580689d919333b656.Properties.Sett" +
    "ings")]

namespace ST_1e823dcd85bb4b9580689d919333b656.Properties {
    
    
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
    }
}]]></ProjectItem>
          <ProjectItem
            Name="Properties\AssemblyInfo.cs"
            Encoding="UTF8"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("ST_1e823dcd85bb4b9580689d919333b656")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("ST_1e823dcd85bb4b9580689d919333b656")]
[assembly: AssemblyCopyright("Copyright @  2024")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.*")]]]></ProjectItem>
          <ProjectItem
            Name="Properties\Resources.Designer.cs"
            Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_1e823dcd85bb4b9580689d919333b656.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_1e823dcd85bb4b9580689d919333b656.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_1e823dcd85bb4b9580689d919333b656.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace ST_1e823dcd85bb4b9580689d919333b656.Properties {
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if ((resourceMan == null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ST_1e823dcd85bb4b9580689d919333b656.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
    }
}]]></ProjectItem>
          <BinaryItem
            Name="ST_21dd89b2f8a7495498fd48bf5117cb01.dll">TVqQAAMAAAAEAAAA//8AALgAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAgAAAAA4fug4AtAnNIbgBTM0hVGhpcyBwcm9ncmFtIGNhbm5vdCBiZSBydW4gaW4gRE9TIG1v
ZGUuDQ0KJAAAAAAAAABQRQAATAEDAMEUjWYAAAAAAAAAAOAAIiALATAAACwAAAAIAAAAAAAAvkoA
AAAgAAAAYAAAAAAAEAAgAAAAAgAABAAAAAAAAAAGAAAAAAAAAACgAAAAAgAAAAAAAAMAYIUAABAA
ABAAAAAAEAAAEAAAAAAAABAAAAAAAAAAAAAAAGxKAABPAAAAAGAAAHgEAAAAAAAAAAAAAAAAAAAA
AAAAAIAAAAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAIAAACAAAAAAAAAAAAAAACCAAAEgAAAAAAAAAAAAAAC50ZXh0AAAAxCoAAAAgAAAALAAAAAIA
AAAAAAAAAAAAAAAAACAAAGAucnNyYwAAAHgEAAAAYAAAAAYAAAAuAAAAAAAAAAAAAAAAAABAAABA
LnJlbG9jAAAMAAAAAIAAAAACAAAANAAAAAAAAAAAAAAAAAAAQAAAQgAAAAAAAAAAAAAAAAAAAACg
SgAAAAAAAEgAAAACAAUAWCwAAFwdAAABAAAAAAAAALRJAAC4AAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAABswBwAeBwAAAQAAEQICKBAAAApvEQAACnIBAABwbxIAAApv
EwAACnQpAAABfQEAAAQCKBAAAApvEQAACnI9AABwbxIAAApvEwAACnQpAAABCgIoEAAACm8RAAAK
cn8AAHBvEgAACm8TAAAKdCkAAAELAigQAAAKbxEAAApyxwAAcG8SAAAKbxMAAAp0KQAAAQwCKBAA
AApvEQAACnIJAQBwbxIAAApvEwAACnQpAAABDQIoEAAACm8RAAAKck0BAHBvEgAACm8TAAAKdCkA
AAETBAJyewEAcHKHAQBwcqcBAHAWBxEEKAIAAAZzFAAAChMFB3MVAAAKEwYRBm8WAAAKcqkBAHAI
cscBAHAoFwAAChEGcxgAAAoTBxEHcxkAAAoTCBEIEQVvGgAACibeDBEILAcRCG8bAAAK3N4MEQcs
BxEHbxsAAArcEQZvHAAACt4MEQYsBxEGbxsAAArcAnLvAQBwchUCAHBypwEAcBYHEQQoAgAABhEF
bx0AAApvHgAAChMJOCoFAAARCW8fAAAKdBQAAAETChEKclUCAHBvIAAACm8hAAAKEwsRCnJ1AgBw
byAAAApvIQAAChMMEQpyjQIAcG8gAAAKbyEAAAoTDREKcrkCAHBvIAAACm8hAAAKEw4XEw8XExAX
ExE4kwQAAHMUAAAKExIGcyIAAAoTExETbxYAAApzIwAAChMUEQwoJAAACi0uERRy2QIAcBEMERCM
LgAAAREQAnsCAAAEWIwuAAABKCUAAApvJgAACiY4BAIAAAdzFQAAChMVERVvFgAACnMUAAAKExZy
qQEAcAlyKwMAcCgXAAAKERVzGAAAChMXERdvJwAACnKFAwBwEQpymQMAcG8gAAAKbygAAAomERdz
GQAAChMYERgRFm8aAAAKJt4MERgsBxEYbxsAAArc3gwRFywHERdvGwAACtwRFHKfAwBwbyYAAAom
ERZvHQAACm8eAAAKExk4yAAAABEZbx8AAAp0FAAAASVyzwMAcG8gAAAKbyEAAAoTGiVy8QMAcG8g
AAAKbyEAAAoTG3IPBABwbyAAAApvIQAAChMcERwoJAAACi0dERQRHHI3BABwERpyQQQAcCgpAAAK
byYAAAomK2ERGygkAAAKLBYRFBEackEEAHAoKgAACm8mAAAKJitCERQdjSkAAAElFnJHBABwoiUX
ERqiJRhyNwQAcKIlGREboiUaclMEAHCiJRsRGqIlHHJBBABwoigrAAAKbyYAAAomERlvLAAACjos
////3hURGXUXAAABEx0RHSwHER1vGwAACtwRFHJfBABwbyYAAAomERRywQQAcBELcs8EAHAoFwAA
Cm8mAAAKJhENKCQAAAotGREUcs8EAHARDXLPBABwKBcAAApvJgAACiYRFHLTBABwERCMLgAAAREQ
AnsCAAAEWIwuAAABKC0AAApvJgAACibeDBEVLAcRFW8bAAAK3BEUbyEAAAoRE3MuAAAKEx4RHm8v
AAAKEx8REhEfbzAAAAoREm8dAAAKbzEAAAoCewIAAAQvAxYTEd4MER8sBxEfbxsAAArc3gwRHiwH
ER5vGwAACtwRE28cAAAK3gwREywHERNvGwAACtwCcjEFAHByUwUAcBELERCMLgAAASgtAAAKcqcB
AHAWBxEEKAIAAAYRDyxDAgcRDhEKcpkDAHBvIAAACm8hAAAKCSgDAAAGAnK7BQBwcuMFAHARDnL/
BQBwKBcAAApypwEAcBYHEQQoAgAABhYTDwdzFQAAChMgESBvFgAAChEgczIAAAoTIREhEQ5vMwAA
CnMUAAAKEyJyqQEAcAlyKwMAcCgXAAAKESBzGAAAChMjESNvJwAACnKFAwBwEQpymQMAcG8gAAAK
bygAAAomESNzGQAAChMkESQRIm8aAAAKJt4MESQsBxEkbxsAAArc3gwRIywHESNvGwAACtwRIm8d
AAAKbx4AAAoTGStAERlvHwAACnQUAAABJXLPAwBwbyAAAApvIQAAChMlcisGAHBvIAAACm8hAAAK
EyYRIW80AAAKESURJm81AAAKJhEZbywAAAott94VERl1FwAAARMdER0sBxEdbxsAAArcESEREm82
AAAKERJvNwAACt4MESEsBxEhbxsAAArcESBvHAAACt4MESAsBxEgbxsAAArcAnJNBgBwcmUGAHAR
DhEQjC4AAAEoLQAACnKnAQBwFgcRBCgCAAAGERACewIAAARYExARETpm+///3iYTJwJy1QYAcHLh
BgBwEQsoKgAAChEnbzgAAAoXBxEEKAIAAAb+GhEJbywAAAo6yvr//94VEQl1FwAAARMdER0sBxEd
bxsAAArcAnIFBwBwcg0HAHBypwEAcBYHEQQoAgAABgIoEAAAChZvOQAACt4rEygCcksHAHByaQcA
cBEobzgAAAoXBxEEKAIAAAYCKBAAAAoXbzkAAAreACoAAEG0AQACAAAAFwEAAAwAAAAjAQAADAAA
AAAAAAACAAAADgEAACMAAAAxAQAADAAAAAAAAAACAAAA7gAAAFgAAABGAQAADAAAAAAAAAACAAAA
kAIAAAwAAACcAgAADAAAAAAAAAACAAAAaQIAAEEAAACqAgAADAAAAAAAAAACAAAA0QIAANsAAACs
AwAAFQAAAAAAAAACAAAAQgIAAPABAAAyBAAADAAAAAAAAAACAAAAVwQAACIAAAB5BAAADAAAAAAA
AAACAAAATgQAADkAAACHBAAADAAAAAAAAAACAAAA9QEAAKcCAACcBAAADAAAAAAAAAACAAAAfgUA
AAwAAACKBQAADAAAAAAAAAACAAAAVwUAAEEAAACYBQAADAAAAAAAAAACAAAAsgUAAE0AAAD/BQAA
FQAAAAAAAAACAAAALgUAAPgAAAAmBgAADAAAAAAAAAACAAAAHgUAAB0BAAA7BgAADAAAAAAAAAAA
AAAA4QEAAKEEAACCBgAAJgAAABsAAAECAAAAeQEAAD0FAAC2BgAAFQAAAAAAAAAAAAAAxgAAACwG
AADyBgAAKwAAABsAAAEbMAMAtwAAAAIAABEOBXMVAAAKCgZvFgAACnKZBwBwDgZyswcAcCgXAAAK
BnMYAAAKCwdvJwAACnK6CABwA28oAAAKJgdvJwAACnLOCABwBG8oAAAKJgdvJwAACnLoCABwBW8o
AAAKJgdvJwAACnIMCQBwAnsBAAAEbygAAAomB28nAAAKchwJAHAOBC0DFisBF4wuAAABbygAAAom
B286AAAKJt4KBywGB28bAAAK3AZvHAAACt4KBiwGBm8bAAAK3CoAARwAAAIAJgB0mgAKAAAAAAIA
CACkrAAKAAAAABswBQBkAQAAAwAAEQNzFQAACgoGbxYAAApzIwAACgsHG40pAAABJRZyLgkAcKIl
FwSiJRhyTAkAcKIlGQSiJRpyjAkAcKIoKwAACm8mAAAKJgdykgkAcARyrgkAcCgXAAAKbyYAAAom
cqkBAHAOBHIrAwBwKBcAAAoGcxgAAAoMCG8nAAAKcoUDAHAFbygAAAomCG87AAAKDSs+CXIrBgBw
bzwAAApvIQAAChMECXK0CQBwbzwAAApvIQAAChMFBxEEcs8EAHARBXJBBABwKCkAAApvJgAACiYJ
bz0AAAotut4UCSwGCW8bAAAK3AgsBghvGwAACtwHctIJAHBvJgAACiYHcjAKAHACewEAAARyfAoA
cCgXAAAKbyYAAAomByVvPgAAChhZbz8AAAoHcoQKAHBvJgAACiYHbyEAAAoGcxgAAAoTBhEGbzoA
AAom3gwRBiwHEQZvGwAACtwGbxwAAAreCgYsBgZvGwAACtwqQWQAAAIAAACNAAAASgAAANcAAAAK
AAAAAAAAAAIAAAB0AAAAbQAAAOEAAAAKAAAAAAAAAAIAAAA7AQAACgAAAEUBAAAMAAAAAAAAAAIA
AAAHAAAAUgEAAFkBAAAKAAAAAAAAAEoCIFDDAAB9AgAABAIoQAAACioeAihBAAAKKq5+AwAABC0e
cooKAHDQAwAAAihCAAAKb0MAAApzRAAACoADAAAEfgMAAAQqGn4EAAAEKh4CgAQAAAQqGn4FAAAE
Kh4CKEUAAAoqLnMKAAAGgAUAAAQqAAAAQlNKQgEAAQAAAAAADAAAAHY0LjAuMzAzMTkAAAAABQBs
AAAA7AUAACN+AABYBgAAcAkAACNTdHJpbmdzAAAAAMgPAAD8CgAAI1VTAMQaAAAQAAAAI0dVSUQA
AADUGgAAiAIAACNCbG9iAAAAAAAAAAIAAAFXHaIBCQMAAAD6ATMAFgAAAQAAADgAAAAFAAAACAAA
AAsAAAALAAAARQAAAAIAAAAQAAAAAwAAAAIAAAADAAAABAAAAAEAAAAGAAAAAQAAAAEAAAAAADUF
AQAAAAAABgB0A2AHBgADBGAHBgDAAk0HDwDUBwAABgDtAr0FBgBXA70FBgA4A70FBgDqA70FBgCU
A70FBgCtA70FBgAEA70FBgAfA0gECgDIA+QECgAWAuQEDgAVAYYADgA5Bu4IDgDKAO4IDgABB+4I
BgAmBzwIDgAvCYYAEgAoBs4IBgDEBiMJBgA6AWsFEgC8AM4IEgCXBs4IDgBECe4IBgBHBmsFDgCo
Bu4IBgByBWsFBgCjAk0HBgCsCGsFBgDWBoAHBgBkBqgFFgBzAh8FFgDUAh8FFgBNApMFBgCIAmAH
CgANBeQEGgAWCMEBGgAxAcEBBgCoBGsFDgAbBlEGDgDzBlEGDgAJBoYADgAyAoYABgAlAGsFDgDy
Be4IDgDmBu4IDgB+BoYADgDPBe4IDgBiBO4IDgCyAFEGDgCKBlEGBgDhAWsFBgBGAWsFBgA7Cb0F
AAAAACsAAAAAAAEAAQABABAAiAViADkAAQABAAAAEACHB+MHfQADAAUAAAEQADMI4weRAAUACQAD
AQAAhwgAAHUABgAMAAEANABtAQEAPgRwAREAdwVzAREABgJ4AREA3AB9AQYGWgBwAVaAdwiBAVaA
5gGBAVAgAAAAAIYAjgUGAAEAMCkAAAAAgQBwBoUBAQAQKgAAAACBAB8BjwEHAOQrAAAAAIYYQAcG
AAsA9ysAAAAAgxhABwYACwD/KwAAAACTCNIGlwELACssAAAAAJMI7gGdAQsAMiwAAAAAkwj6AaMB
CwA6LAAAAACWCLMIqgEMAEEsAAAAAIYYQAcGAAwASSwAAAAAkRhGB68BDAAAAAEAuAEAAAIA+AAA
AAMABAEAAAQAHgcAAAUAlQQAAAYAagEAAAEAewQAAAIAqAEAAAMAmwAAAAQAdwEAAAEAOAQJAEAH
AQARAEAHBgAZAEAHCgApAEAHEAAxAEAHEAA5AEAHEABBAEAHEABJAEAHEABRAEAHEABZAEAHEABh
AEAHEABpAEAHBgDxAEAHBgAZAUAHFQApAUAHBgBxAH8IYAAxARIIZgA5AWIFbABBASEEcwB5AEAH
BgCBAEAHEABRAYMFBgBJAZ4IdwCJAEAHfgCRAEAHhQBZAV0FiwC5AGsCBgBRAWUCBgB5AJUIkQBp
ATIHlwCZAAQJcwChAGIFnAD5AKYEoQCpAEAHEACxAEAHBgBJAWAJpQBJAaUIqgCxANUAsgCJAE8I
uAB5ASsEvgBJAZ4IxgBJAZ4IzgBJAZ4I1ACZABoJ2gBJAaUI3gDBAEAH5QDBALYG7AB5AKkA8QBp
ARAJ+ADRAEAH/ADRAI8BEADRACAIAgGRAa4ACAHRABAHEAF5AHgGBgDZAOwAoQAxAb8IAQChAVAJ
+ACJALYGLAGpAWIFnACpAaQA2gCxAK8E+ACxALoEAQBxAEAHBgD5AEAHBgCxAVgBMQGxATcJOgEB
AUAHQAEhAUAHBgAIABwAYwEIACAAaAEpAHMA7AEuAAsAxAEuABMAzQEuABsA7AEuACMA9QEuACsA
HgIuADMAHgIuADsAHgIuAEMA9QEuAEsAJAIuAFMAHgIuAFsAOwJDAGMAaAFJAHMA7AFjAGsAaAGh
AHsAaAEcABYBHQEDAAEABAADAAAA1gazAQAADgK5AQAAtwi/AQIABgADAAIABwAFAAEACAAFAAIA
CQAHAASAAAABAAAA/CLIbgAAAAAAAAEAAAAEAAAAAAAAAAAAAABIAZIAAAAAABAAAAAAAAAAAAAA
AFEBxQQAAAAABAAAAAAAAAAAAAAASAGGAAAAAAAEAHoAEwABAAAAAABaAV4IAAAAAAQAAAAAAAAA
AAAAAEgBawUAAAAAEAAAAAAAAAAAAAAAUQE7AAAAAAAAAAAAAQAAAJEHAAAFAAIAAAAAAABTVF8y
MWRkODliMmY4YTc0OTU0OThmZDQ4YmY1MTE3Y2IwMQBJbnQzMgA8TW9kdWxlPgBsb2FkSUQATWlj
cm9zb2Z0LlNxbFNlcnZlci5NYW5hZ2VkRFRTAHZhbHVlX18AU1RfNTVjOWI1MDU3YjU3NGNmMGE1
M2E1OWFkODhjZDVmM2EAU3lzdGVtLkRhdGEAbXNjb3JsaWIAbWFzdGVySWQAUmVhZABMb2FkAEFk
ZABEYkNvbW1hbmQAT3JhY2xlQ29tbWFuZABTcWxDb21tYW5kAEFwcGVuZABkZWZhdWx0SW5zdGFu
Y2UAZ2V0X01lc3NhZ2UAc3RlcE1lc3NhZ2UAc3RlcEVycm9yTWVzc2FnZQBEYXRhVGFibGUAQ3Jl
YXRlVGFyZ2V0VGFibGUAVmFyaWFibGUASURpc3Bvc2FibGUAUnVudGltZVR5cGVIYW5kbGUAR2V0
VHlwZUZyb21IYW5kbGUAbG9nVGFibGVOYW1lAG1hcHBpbmdDb250cm9sVGFibGVOYW1lAHNldF9E
ZXN0aW5hdGlvblRhYmxlTmFtZQB0YXJnZXRUYWJsZU5hbWUAc3RlcE5hbWUATWljcm9zb2Z0LlNx
bFNlcnZlci5EdHMuUnVudGltZQBUeXBlAEZhaWx1cmUAZ2V0X0N1bHR1cmUAc2V0X0N1bHR1cmUA
cmVzb3VyY2VDdWx0dXJlAFZTVEFSVFNjcmlwdE9iamVjdE1vZGVsQmFzZQBJbnRlcm5hbERhdGFD
b2xsZWN0aW9uQmFzZQBBcHBsaWNhdGlvblNldHRpbmdzQmFzZQBDbG9zZQBEaXNwb3NlAEVkaXRv
ckJyb3dzYWJsZVN0YXRlAENvbXBpbGVyR2VuZXJhdGVkQXR0cmlidXRlAERlYnVnZ2VyTm9uVXNl
ckNvZGVBdHRyaWJ1dGUARGVidWdnYWJsZUF0dHJpYnV0ZQBFZGl0b3JCcm93c2FibGVBdHRyaWJ1
dGUAQXNzZW1ibHlUaXRsZUF0dHJpYnV0ZQBBc3NlbWJseVRyYWRlbWFya0F0dHJpYnV0ZQBUYXJn
ZXRGcmFtZXdvcmtBdHRyaWJ1dGUAQXNzZW1ibHlDb25maWd1cmF0aW9uQXR0cmlidXRlAEFzc2Vt
Ymx5RGVzY3JpcHRpb25BdHRyaWJ1dGUAQ29tcGlsYXRpb25SZWxheGF0aW9uc0F0dHJpYnV0ZQBB
c3NlbWJseVByb2R1Y3RBdHRyaWJ1dGUAQXNzZW1ibHlDb3B5cmlnaHRBdHRyaWJ1dGUAU1NJU1Nj
cmlwdFRhc2tFbnRyeVBvaW50QXR0cmlidXRlAEFzc2VtYmx5Q29tcGFueUF0dHJpYnV0ZQBSdW50
aW1lQ29tcGF0aWJpbGl0eUF0dHJpYnV0ZQBnZXRfVmFsdWUAQWRkV2l0aFZhbHVlAHZhbHVlAGJh
dGNoU2l6ZQBTeXN0ZW0uUnVudGltZS5WZXJzaW9uaW5nAFNxbEJ1bGtDb3B5Q29sdW1uTWFwcGlu
ZwBzcWxTZXJ2ZXJDb25uZWN0aW9uU3RyaW5nAGNvbm5lY3Rpb25TdHJpbmcAVG9TdHJpbmcAZ2V0
X0xlbmd0aABzZXRfTGVuZ3RoAE1pY3Jvc29mdC5TcWxTZXJ2ZXIuU2NyaXB0VGFzawBNaWNyb3Nv
ZnQuU3FsU2VydmVyLkR0cy5UYXNrcy5TY3JpcHRUYXNrAFNjcmlwdE9iamVjdE1vZGVsAFN5c3Rl
bS5Db21wb25lbnRNb2RlbABTVF8yMWRkODliMmY4YTc0OTU0OThmZDQ4YmY1MTE3Y2IwMS5kbGwA
RmlsbABnZXRfSXRlbQBTeXN0ZW0ARW51bQByZXNvdXJjZU1hbgBPcGVuAFNjcmlwdE1haW4AU3lz
dGVtLkNvbmZpZ3VyYXRpb24AU3lzdGVtLkdsb2JhbGl6YXRpb24AU3lzdGVtLlJlZmxlY3Rpb24A
U3FsQnVsa0NvcHlDb2x1bW5NYXBwaW5nQ29sbGVjdGlvbgBTcWxQYXJhbWV0ZXJDb2xsZWN0aW9u
AERhdGFSb3dDb2xsZWN0aW9uAERiQ29ubmVjdGlvbgBPcmFjbGVDb25uZWN0aW9uAFNxbENvbm5l
Y3Rpb24ARXhjZXB0aW9uAFN5c3RlbS5EYXRhLkNvbW1vbgBDdWx0dXJlSW5mbwBMb2dTdGVwAENs
ZWFyAElEYXRhUmVhZGVyAERiRGF0YVJlYWRlcgBPcmFjbGVEYXRhUmVhZGVyAFNxbERhdGFSZWFk
ZXIARXhlY3V0ZVJlYWRlcgBTdHJpbmdCdWlsZGVyAGdldF9SZXNvdXJjZU1hbmFnZXIAU3FsUGFy
YW1ldGVyAERiRGF0YUFkYXB0ZXIAU3FsRGF0YUFkYXB0ZXIAV3JpdGVUb1NlcnZlcgBpc0Vycm9y
AElFbnVtZXJhdG9yAEdldEVudW1lcmF0b3IALmN0b3IALmNjdG9yAFN5c3RlbS5EaWFnbm9zdGlj
cwBTeXN0ZW0uUnVudGltZS5Db21waWxlclNlcnZpY2VzAFN5c3RlbS5SZXNvdXJjZXMAU1RfMWU4
MjNkY2Q4NWJiNGI5NTgwNjg5ZDkxOTMzM2I2NTYuUHJvcGVydGllcy5SZXNvdXJjZXMucmVzb3Vy
Y2VzAERlYnVnZ2luZ01vZGVzAFNUXzFlODIzZGNkODViYjRiOTU4MDY4OWQ5MTkzMzNiNjU2LlBy
b3BlcnRpZXMAZ2V0X1ZhcmlhYmxlcwBnZXRfQ29sdW1uTWFwcGluZ3MAU2V0dGluZ3MAU3lzdGVt
LkNvbGxlY3Rpb25zAGdldF9QYXJhbWV0ZXJzAE9yYWNsZS5NYW5hZ2VkRGF0YUFjY2VzcwBTdWNj
ZXNzAGdldF9EdHMAU2NyaXB0UmVzdWx0cwBnZXRfUm93cwBDb25jYXQARm9ybWF0AE9iamVjdABn
ZXRfRGVmYXVsdABzZXRfVGFza1Jlc3VsdABPcmFjbGUuTWFuYWdlZERhdGFBY2Nlc3MuQ2xpZW50
AFN5c3RlbS5EYXRhLlNxbENsaWVudABnZXRfQ3VycmVudABnZXRfQ291bnQATW92ZU5leHQAU3lz
dGVtLlRleHQARGF0YVJvdwBnZXRfQXNzZW1ibHkAU3FsQnVsa0NvcHkARXhlY3V0ZU5vblF1ZXJ5
AElzTnVsbE9yRW1wdHkAAAAAO1MAeQBzAHQAZQBtADoAOgBFAHgAZQBjAHUAdABpAG8AbgBJAG4A
cwB0AGEAbgBjAGUARwBVAEkARAAAQSQAUABhAGMAawBhAGcAZQA6ADoATwByAGEAYwBsAGUAQwBv
AG4AbgBlAGMAdABpAG8AbgBTAHQAcgBpAG4AZwAARyQAUABhAGMAawBhAGcAZQA6ADoAUwBRAEwA
UwBlAHIAdgBlAHIAQwBvAG4AbgBlAGMAdABpAG8AbgBTAHQAcgBpAG4AZwAAQSQAUABhAGMAawBh
AGcAZQA6ADoATQBhAHMAdABlAHIAQwBvAG4AdAByAG8AbABUAGEAYgBsAGUATgBhAG0AZQAAQyQA
UABhAGMAawBhAGcAZQA6ADoATQBhAHAAcABpAG4AZwBDAG8AbgB0AHIAbwBsAFQAYQBiAGwAZQBO
AGEAbQBlAAAtJABQAGEAYwBrAGEAZwBlADoAOgBMAG8AZwBUAGEAYgBsAGUATgBhAG0AZQAAC1MA
dABhAHIAdAAAH1AAcgBvAGMAZQBzAHMAIABzAHQAYQByAHQAZQBkAAABAB1TAEUATABFAEMAVAAg
ACoAIABGAFIATwBNACAAACcgAFcASABFAFIARQAgAEkAcwBBAGMAdABpAHYAZQAgAD0AIAAxAAAl
UgBlAGEAZAAgAEMAbwBuAHQAcgBvAGwAIABUAGEAYgBsAGUAAD9DAG8AbgB0AHIAbwBsACAAdABh
AGIAbABlACAAcgBlAGEAZAAgAHMAdQBjAGMAZQBzAHMAZgB1AGwAbAB5AAAfUwBvAHUAcgBjAGUA
VABhAGIAbABlAE4AYQBtAGUAABdTAG8AdQByAGMAZQBRAHUAZQByAHkAACtTAG8AdQByAGMAZQBG
AGkAbAB0AGUAcgBDAG8AbgBkAGkAdABpAG8AbgAAH1QAYQByAGcAZQB0AFQAYQBiAGwAZQBOAGEA
bQBlAABRKAB7ADAAfQApACAAYQBuAGQAIABSAE8AVwBOAFUATQAgAD4APQAgAHsAMQB9ACAAQQBO
AEQAIABSAE8AVwBOAFUATQAgADwAIAB7ADIAfQAAWSAAVwBIAEUAUgBFACAATQBhAHMAdABlAHIA
SQBkACAAPQAgAEAATQBhAHMAdABlAHIASQBkACAAQQBOAEQAIABJAHMAQQBjAHQAaQB2AGUAIAA9
ACAAMQAAE0AATQBhAHMAdABlAHIASQBkAAAFSQBkAAAvUwBFAEwARQBDAFQAIAAqACAARgBSAE8A
TQAgACgAIABTAEUATABFAEMAVAAgAAAhUwBvAHUAcgBjAGUAQwBvAGwAdQBtAG4ATgBhAG0AZQAA
HVMAbwB1AHIAYwBlAEQAYQB0AGEAVAB5AHAAZQAAJ1MAbwB1AHIAYwBlAEMAdQBzAHQAbwBtAEMA
bwBuAHYAZQByAHQAAAkgAEEAUwAgAAAFLAAgAAALQwBBAFMAVAAoAAALKQAgAEEAUwAgAABhIABS
AE8AVwBfAE4AVQBNAEIARQBSACgAKQAgAE8AVgBFAFIAIAAoAE8AUgBEAEUAUgAgAEIAWQAgAFIA
TwBXAE4AVQBNACkAIABhAHMAIABSAE8AVwBfAE4AVQBNACAAAA0gAEYAUgBPAE0AIAAAAyAAAF0g
ACkAIABhAHMAIABBACAAVwBIAEUAUgBFACAAUgBPAFcAXwBOAFUATQAgAD4APQAgAHsAMAB9ACAA
QQBOAEQAIABSAE8AVwBfAE4AVQBNACAAPAAgAHsAMQB9AAAhUgBlAGEAZAAgAFMAbwB1AHIAYwBl
ACAARABhAHQAYQAAZ0QAYQB0AGEAIAByAGUAYQBkACAAcwB1AGMAYwBlAHMAcwBmAHUAbABsAHkA
IABmAHIAbwBtACAAewAwAH0AIABzAHQAYQByAHQAaQBuAGcAIABhAHQAIAByAG8AdwAgAHsAMQB9
AAAnQwByAGUAYQB0AGUAIABUAGEAcgBnAGUAdAAgAFQAYQBiAGwAZQAAG1QAYQByAGcAZQB0ACAA
dABhAGIAbABlACAAACsgAGMAcgBlAGEAdABlAGQAIABzAHUAYwBjAGUAcwBzAGYAdQBsAGwAeQAA
IVQAYQByAGcAZQB0AEMAbwBsAHUAbQBuAE4AYQBtAGUAABdJAG4AcwBlAHIAdAAgAEQAYQB0AGEA
AG9EAGEAdABhACAAaQBuAHMAZQByAHQAZQBkACAAcwB1AGMAYwBlAHMAcwBmAHUAbABsAHkAIABp
AG4AdABvACAAewAwAH0AIABzAHQAYQByAHQAaQBuAGcAIABhAHQAIAByAG8AdwAgAHsAMQB9AAAL
RQByAHIAbwByAAAjRQByAHIAbwByACAAcAByAG8AYwBlAHMAcwBpAG4AZwAgAAAHRQBuAGQAAD1Q
AHIAbwBjAGUAcwBzACAAYwBvAG0AcABsAGUAdABlAGQAIABzAHUAYwBjAGUAcwBzAGYAdQBsAGwA
eQAAHUMAcgBpAHQAaQBjAGEAbAAgAEUAcgByAG8AcgAAL0MAcgBpAHQAaQBjAGEAbAAgAGUAcgBy
AG8AcgAgAG8AYwBjAHUAcgByAGUAZAAAGUkATgBTAEUAUgBUACAASQBOAFQATwAgAACBBSAAKABT
AHQAZQBwAE4AYQBtAGUALAAgAFMAdABlAHAATQBlAHMAcwBhAGcAZQAsACAAUwB0AGUAcABFAHIA
cgBvAHIATQBlAHMAcwBhAGcAZQAsACAATABvAGEAZABJAEQALAAgAEkAcwBFAHIAcgBvAHIAKQAg
AFYAQQBMAFUARQBTACAAKABAAFMAdABlAHAATgBhAG0AZQAsACAAQABTAHQAZQBwAE0AZQBzAHMA
YQBnAGUALAAgAEAAUwB0AGUAcABFAHIAcgBvAHIATQBlAHMAcwBhAGcAZQAsACAAQABMAG8AYQBk
AEkARAAsACAAQABJAHMARQByAHIAbwByACkAABNAAFMAdABlAHAATgBhAG0AZQAAGUAAUwB0AGUA
cABNAGUAcwBzAGEAZwBlAAAjQABTAHQAZQBwAEUAcgByAG8AcgBNAGUAcwBzAGEAZwBlAAAPQABM
AG8AYQBkAEkARAAAEUAASQBzAEUAcgByAG8AcgAAHUkARgAgAE8AQgBKAEUAQwBUAF8ASQBEACgA
JwABPycALAAgACcAVQAnACkAIABJAFMAIABOAE8AVAAgAE4AVQBMAEwAIABEAFIATwBQACAAVABB
AEIATABFACAAAQU7ACAAABtDAFIARQBBAFQARQAgAFQAQQBCAEwARQAgAAAFIAAoAAAdVABhAHIA
ZwBlAHQARABhAHQAYQBUAHkAcABlAABdWwBMAG8AYQBkAFQAaQBtAGUAcwB0AGEAbQBwAF0AIABb
AEQAQQBUAEUAVABJAE0ARQBdACAARABFAEYAQQBVAEwAVAAgAEcARQBUAEQAQQBUAEUAKAApACwA
IAAAS1sATABvAGEAZABJAEQAXQAgAFsAdQBuAGkAcQB1AGUAaQBkAGUAbgB0AGkAZgBpAGUAcgBd
ACAARABFAEYAQQBVAEwAVAAgACcAAQcnACwAIAABBSkAOwAAcVMAVABfADEAZQA4ADIAMwBkAGMA
ZAA4ADUAYgBiADQAYgA5ADUAOAAwADYAOAA5AGQAOQAxADkAMwAzADMAYgA2ADUANgAuAFAAcgBv
AHAAZQByAHQAaQBlAHMALgBSAGUAcwBvAHUAcgBjAGUAcwAAfobAtswQhkWBi50sQU9YkQAEIAEB
CAMgAAEFIAEBEREEIAEBDgYgAQERgIlDBykODg4ODhI9EkESRRJJEk0SUQ4ODg4CCAISPRJVElkS
QRI9EkUSSRJNDg4OEl0SYRJlEkESaRI9EkUSSQ4OEm0SbQUgABKAmQUgABKAnQYgARKAoRwDIAAc
BgADDg4ODgYgAgEOEkEFIAEBEkUFIAEIEj0FIAASgLEEIAASTQQgARwOAyAADgQAAQIOBwAEDg4c
HBwFIAESWQ4FIAASgL0HIAISgMEOHAcABA4ODg4OBQACDg4OBQABDh0OAyAAAgYAAw4OHBwGIAIB
DhJVBCAAEmUGIAEBEoDFAyAACAUgAQESQQUgABKAyQcgAhKAzQ4OBSABARI9BgcCEkESRQ4HBxJB
ElkSRRJxDg4SRQQgABJxCAABEoDZEYDdBSAAEoDhByACAQ4SgOEIt3pcVhk04IkIiYRdzYCAzJEI
ibSD9CnEc0IEAAAAAAQBAAAAAgYOAgYIBAYSgIEEBhKAhQMGEhADBhEUCSAGAQ4ODgIODgcgBAEO
Dg4OBQAAEoCBBQAAEoCFBgABARKAhQQAABIQAwAAAQUIABKAgQUIABKAhQQIABIQCAEACAAAAAAA
HgEAAQBUAhZXcmFwTm9uRXhjZXB0aW9uVGhyb3dzAQgBAAIAAAAAACgBACNTVF8xZTgyM2RjZDg1
YmI0Yjk1ODA2ODlkOTE5MzMzYjY1NgAABQEAAAAAFgEAEUNvcHlyaWdodCBAICAyMDI0AABJAQAa
Lk5FVEZyYW1ld29yayxWZXJzaW9uPXY0LjcBAFQOFEZyYW1ld29ya0Rpc3BsYXlOYW1lEi5ORVQg
RnJhbWV3b3JrIDQuNwAAALQAAADOyu++AQAAAJEAAABsU3lzdGVtLlJlc291cmNlcy5SZXNvdXJj
ZVJlYWRlciwgbXNjb3JsaWIsIFZlcnNpb249NC4wLjAuMCwgQ3VsdHVyZT1uZXV0cmFsLCBQdWJs
aWNLZXlUb2tlbj1iNzdhNWM1NjE5MzRlMDg5I1N5c3RlbS5SZXNvdXJjZXMuUnVudGltZVJlc291
cmNlU2V0AgAAAAAAAAAAAAAAUEFEUEFEULQAAACUSgAAAAAAAAAAAACuSgAAACAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAoEoAAAAAAAAAAAAAAABfQ29yRGxsTWFpbgBtc2NvcmVlLmRsbAAAAAAA/yUA
IAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAQAAAAGAAA
gAAAAAAAAAAAAAAAAAAAAQABAAAAMAAAgAAAAAAAAAAAAAAAAAAAAQAAAAAASAAAAFhgAAAaBAAA
AAAAAAAAAAAaBDQAAABWAFMAXwBWAEUAUgBTAEkATwBOAF8ASQBOAEYATwAAAAAAvQTv/gAAAQAA
AAEAyG78IgAAAQDIbvwiPwAAAAAAAAAEAAAAAgAAAAAAAAAAAAAAAAAAAEQAAAABAFYAYQByAEYA
aQBsAGUASQBuAGYAbwAAAAAAJAAEAAAAVAByAGEAbgBzAGwAYQB0AGkAbwBuAAAAAAAAALAEegMA
AAEAUwB0AHIAaQBuAGcARgBpAGwAZQBJAG4AZgBvAAAAVgMAAAEAMAAwADAAMAAwADQAYgAwAAAA
GgABAAEAQwBvAG0AbQBlAG4AdABzAAAAAAAAACIAAQABAEMAbwBtAHAAYQBuAHkATgBhAG0AZQAA
AAAAAAAAAHAAJAABAEYAaQBsAGUARABlAHMAYwByAGkAcAB0AGkAbwBuAAAAAABTAFQAXwAxAGUA
OAAyADMAZABjAGQAOAA1AGIAYgA0AGIAOQA1ADgAMAA2ADgAOQBkADkAMQA5ADMAMwAzAGIANgA1
ADYAAAA+AA8AAQBGAGkAbABlAFYAZQByAHMAaQBvAG4AAAAAADEALgAwAC4AOAA5ADUANgAuADIA
OAAzADYAMAAAAAAAcAAoAAEASQBuAHQAZQByAG4AYQBsAE4AYQBtAGUAAABTAFQAXwAyADEAZABk
ADgAOQBiADIAZgA4AGEANwA0ADkANQA0ADkAOABmAGQANAA4AGIAZgA1ADEAMQA3AGMAYgAwADEA
LgBkAGwAbAAAAEgAEgABAEwAZQBnAGEAbABDAG8AcAB5AHIAaQBnAGgAdAAAAEMAbwBwAHkAcgBp
AGcAaAB0ACAAQAAgACAAMgAwADIANAAAACoAAQABAEwAZQBnAGEAbABUAHIAYQBkAGUAbQBhAHIA
awBzAAAAAAAAAAAAeAAoAAEATwByAGkAZwBpAG4AYQBsAEYAaQBsAGUAbgBhAG0AZQAAAFMAVABf
ADIAMQBkAGQAOAA5AGIAMgBmADgAYQA3ADQAOQA1ADQAOQA4AGYAZAA0ADgAYgBmADUAMQAxADcA
YwBiADAAMQAuAGQAbABsAAAAaAAkAAEAUAByAG8AZAB1AGMAdABOAGEAbQBlAAAAAABTAFQAXwAx
AGUAOAAyADMAZABjAGQAOAA1AGIAYgA0AGIAOQA1ADgAMAA2ADgAOQBkADkAMQA5ADMAMwAzAGIA
NgA1ADYAAABCAA8AAQBQAHIAbwBkAHUAYwB0AFYAZQByAHMAaQBvAG4AAAAxAC4AMAAuADgAOQA1
ADYALgAyADgAMwA2ADAAAAAAAEYADwABAEEAcwBzAGUAbQBiAGwAeQAgAFYAZQByAHMAaQBvAG4A
AAAxAC4AMAAuADgAOQA1ADYALgAyADgAMwA2ADAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAMAAAAwDoAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</BinaryItem>
          <Breakpoint
            Enabled="True"
            File="ScriptMain.cs"
            Line="69"
            Column="25" />
          <Breakpoint
            Enabled="True"
            File="ScriptMain.cs"
            Line="137"
            Column="40" />
          <Breakpoint
            Enabled="True"
            File="ScriptMain.cs"
            Line="141"
            Column="41" />
          <Breakpoint
            Enabled="True"
            File="ScriptMain.cs"
            Line="144"
            Column="45" />
          <Breakpoint
            Enabled="True"
            File="ScriptMain.cs"
            Line="162"
            Column="36" />
          <Breakpoint
            Enabled="True"
            File="ScriptMain.cs"
            Line="188"
            Column="37" />
          <Breakpoint
            Enabled="True"
            File="ScriptMain.cs"
            Line="189"
            Column="37" />
          <Breakpoint
            Enabled="True"
            File="ScriptMain.cs"
            Line="191"
            Column="33" />
        </ScriptProject>
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\Script v-5"
      DTS:CreationName="Microsoft.ScriptTask"
      DTS:Description="Script Task"
      DTS:DTSID="{0627ca70-50e4-46cc-b803-83123fb668c9}"
      DTS:ExecutableType="Microsoft.ScriptTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="Script v-5"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <ScriptProject
          Name="ST_9412d6971c9344bebc55939f3eea8256"
          VSTAMajorVersion="16"
          VSTAMinorVersion="0"
          Language="CSharp"
          ReadOnlyVariables="System::ClusterID,System::ClusterNodeCount,System::ContainerStartTime,System::CreationName,System::LocaleID,System::ParentContainerGUID,System::TaskID,System::TaskName,System::TaskTransactionOption,System::CancelEvent,System::CreationDate,System::CreatorComputerName,System::CreatorName,System::ExecutionInstanceGUID,System::FailedConfigurations,System::IgnoreConfigurationsOnLoad,System::InteractiveMode,System::LastModifiedProductVersion,System::MachineName,System::OfflineMode,System::PackageID,System::PackageName,System::ProductVersion,System::ServerExecutionID,System::StartTime,System::UserName,System::VersionBuild,System::VersionComments,System::VersionGUID,System::VersionMajor,System::VersionMinor,$Package::LogTableName,$Package::MappingControlTableName,$Package::MasterControlTableName,$Package::OracleConnectionString,$Package::SQLServerConnectionString">
          <ProjectItem
            Name="Properties\AssemblyInfo.cs"
            Encoding="UTF8"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("ST_1e823dcd85bb4b9580689d919333b656")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("ST_1e823dcd85bb4b9580689d919333b656")]
[assembly: AssemblyCopyright("Copyright @  2024")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.*")]]]></ProjectItem>
          <ProjectItem
            Name="Properties\Resources.resx"
            Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></ProjectItem>
          <ProjectItem
            Name="ScriptMain.cs"
            Encoding="UTF8"><![CDATA[#region Help: Introduction to the script task
/* The Script Task allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services control flow. 
 * 
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script task. */
#endregion

#region Namespaces
using System;
using System.Data;
using Microsoft.SqlServer.Dts.Runtime;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Oracle.ManagedDataAccess.Client;
using System.Data.SqlClient;
using System.IO;
#endregion

namespace ST_55c9b5057b574cf0a53a59ad88cd5f3a
{
    [Microsoft.SqlServer.Dts.Tasks.ScriptTask.SSISScriptTaskEntryPointAttribute]
    public partial class ScriptMain : Microsoft.SqlServer.Dts.Tasks.ScriptTask.VSTARTScriptObjectModelBase
    {
        private string loadID;

        public void Main()
        {
            loadID = (string)Dts.Variables["System::ExecutionInstanceGUID"].Value;

            // Use package parameters instead of variables
            string oracleConnectionString = (string)Dts.Variables["$Package::OracleConnectionString"].Value;
            string sqlServerConnectionString = (string)Dts.Variables["$Package::SQLServerConnectionString"].Value;
            string masterControlTableName = (string)Dts.Variables["$Package::MasterControlTableName"].Value;
            string mappingControlTableName = (string)Dts.Variables["$Package::MappingControlTableName"].Value;
            string logTableName = (string)Dts.Variables["$Package::LogTableName"].Value;

            try
            {
                LogStep("Start", "Process started", "", false, sqlServerConnectionString, logTableName);

                // Step 1: Read control table from SQL Server
                DataTable controlTable = new DataTable();

                using (SqlConnection sqlConnection = new SqlConnection(sqlServerConnectionString))
                {
                    sqlConnection.Open();
                    using (SqlCommand sqlCommand = new SqlCommand($"SELECT * FROM {masterControlTableName} WHERE IsActive = 1", sqlConnection))
                    {
                        using (SqlDataAdapter sqlDataAdapter = new SqlDataAdapter(sqlCommand))
                        {
                            sqlDataAdapter.Fill(controlTable);
                        }
                    }
                    sqlConnection.Close();
                }
                LogStep("Read Control Table", "Control table read successfully", "", false, sqlServerConnectionString, logTableName);

                // Process each active source table
                foreach (DataRow masterRow in controlTable.Rows)
                {
                    string sourceTableName = masterRow["SourceTableName"].ToString();
                    string sourceQuery = masterRow["SourceQuery"].ToString();
                    string sourceFilterCondition = masterRow["SourceFilterCondition"].ToString();
                    string targetTableName = masterRow["TargetTableName"].ToString();

                    DataTable sourceDataTable = new DataTable();

                    try
                    {
                        // Step 2: Read data from Oracle
                        using (OracleConnection oracleConnection = new OracleConnection(oracleConnectionString))
                        {
                            oracleConnection.Open();

                            if (!string.IsNullOrEmpty(sourceQuery))
                            {
                                // Use SourceQuery if provided
                                using (OracleCommand oracleCommand = new OracleCommand(sourceQuery, oracleConnection))
                                {
                                    using (OracleDataReader reader = oracleCommand.ExecuteReader())
                                    {
                                        sourceDataTable.Load(reader);
                                    }
                                }
                            }
                            else
                            {
                                // Construct query based on mapping table if SourceQuery is null
                                using (SqlConnection sqlConnection = new SqlConnection(sqlServerConnectionString))
                                {
                                    sqlConnection.Open();
                                    DataTable mappingTable = new DataTable();
                                    using (SqlCommand sqlCommand = new SqlCommand($"SELECT * FROM {mappingControlTableName} WHERE MasterId = @MasterId AND IsActive = 1", sqlConnection))
                                    {
                                        sqlCommand.Parameters.AddWithValue("@MasterId", masterRow["Id"]);
                                        using (SqlDataAdapter sqlDataAdapter = new SqlDataAdapter(sqlCommand))
                                        {
                                            sqlDataAdapter.Fill(mappingTable);
                                        }
                                    }

                                    // Build the query to select and convert columns from Oracle
                                    StringBuilder selectQueryBuilder = new StringBuilder();
                                    selectQueryBuilder.Append("SELECT ");
                                    foreach (DataRow mappingRow in mappingTable.Rows)
                                    {
                                        string sourceColumnName = mappingRow["SourceColumnName"].ToString();
                                        string sourceDataType = mappingRow["SourceDataType"].ToString();
                                        string sourceCustomConvert = mappingRow["SourceCustomConvert"].ToString();

                                        if (!string.IsNullOrEmpty(sourceCustomConvert))
                                        {
                                            selectQueryBuilder.Append($"{sourceCustomConvert} AS {sourceColumnName}, ");
                                        }
                                        else if (string.IsNullOrEmpty(sourceDataType))
                                        {
                                            selectQueryBuilder.Append($"{sourceColumnName}, ");
                                        }
                                        else
                                        {
                                            selectQueryBuilder.Append($"CAST({sourceColumnName} AS {sourceDataType}) AS {sourceColumnName}, ");
                                        }
                                    }
                                    selectQueryBuilder.Length -= 2; // Remove the last comma and space
                                    selectQueryBuilder.Append($" FROM {sourceTableName}");

                                    // Add the SourceFilterCondition if provided
                                    if (!string.IsNullOrEmpty(sourceFilterCondition))
                                    {
                                        selectQueryBuilder.Append($" {sourceFilterCondition}");
                                    }

                                    File.WriteAllText(@"C:\Users\SaidnazarovOA\OneDrive - Ipoteka Bank\Documents\SQLStaging\LastRanQuery.txt", selectQueryBuilder.ToString());

                                    using (OracleCommand oracleCommand = new OracleCommand(selectQueryBuilder.ToString(), oracleConnection))
                                    {
                                        using (OracleDataReader reader = oracleCommand.ExecuteReader())
                                        {
                                            sourceDataTable.Load(reader);
                                        }
                                    }
                                }
                            }
                            oracleConnection.Close();
                        }
                        LogStep("Read Source Data", $"Data read successfully from {sourceTableName}", "", false, sqlServerConnectionString, logTableName);

                        // Step 3: Drop and create target table in SQL Server
                        CreateTargetTable(sqlServerConnectionString, targetTableName, masterRow["Id"].ToString(), mappingControlTableName);
                        LogStep("Create Target Table", $"Target table {targetTableName} created successfully", "", false, sqlServerConnectionString, logTableName);

                        // Step 4: Insert data into SQL Server using SqlBulkCopy
                        using (SqlConnection sqlConnection = new SqlConnection(sqlServerConnectionString))
                        {
                            sqlConnection.Open();
                            using (SqlBulkCopy sqlBulkCopy = new SqlBulkCopy(sqlConnection))
                            {
                                sqlBulkCopy.DestinationTableName = targetTableName;

                                // Get column mappings from the control table
                                DataTable mappingTable = new DataTable();
                                using (SqlCommand sqlCommand = new SqlCommand($"SELECT * FROM {mappingControlTableName} WHERE MasterId = @MasterId AND IsActive = 1", sqlConnection))
                                {
                                    sqlCommand.Parameters.AddWithValue("@MasterId", masterRow["Id"]);
                                    using (SqlDataAdapter sqlDataAdapter = new SqlDataAdapter(sqlCommand))
                                    {
                                        sqlDataAdapter.Fill(mappingTable);
                                    }
                                }

                                // Add column mappings
                                foreach (DataRow mappingRow in mappingTable.Rows)
                                {
                                    string sourceColumn = mappingRow["SourceColumnName"].ToString();
                                    string targetColumn = mappingRow["TargetColumnName"].ToString();
                                    sqlBulkCopy.ColumnMappings.Add(sourceColumn, targetColumn);
                                }

                                sqlBulkCopy.WriteToServer(sourceDataTable);
                            }
                            sqlConnection.Close();
                        }
                        LogStep("Insert Data", $"Data inserted successfully into {targetTableName}", "", false, sqlServerConnectionString, logTableName);
                    }
                    catch (Exception ex)
                    {
                        LogStep("Error", $"Error processing {sourceTableName}", ex.Message, true, sqlServerConnectionString, logTableName);
                        throw; // Re-throw the exception to stop the execution
                    }
                }

                LogStep("End", "Process completed successfully", "", false, sqlServerConnectionString, logTableName);
                Dts.TaskResult = (int)ScriptResults.Success;
            }
            catch (Exception ex)
            {
                LogStep("Critical Error", "Critical error occurred", ex.Message, true, sqlServerConnectionString, logTableName);
                Dts.TaskResult = (int)ScriptResults.Failure;
            }
        }

        private void LogStep(string stepName, string stepMessage, string stepErrorMessage, bool isError, string connectionString, string logTableName)
        {
            using (SqlConnection sqlConnection = new SqlConnection(connectionString))
            {
                sqlConnection.Open();
                using (SqlCommand sqlCommand = new SqlCommand($"INSERT INTO {logTableName} (StepName, StepMessage, StepErrorMessage, LoadID, IsError) VALUES (@StepName, @StepMessage, @StepErrorMessage, @LoadID, @IsError)", sqlConnection))
                {
                    sqlCommand.Parameters.AddWithValue("@StepName", stepName);
                    sqlCommand.Parameters.AddWithValue("@StepMessage", stepMessage);
                    sqlCommand.Parameters.AddWithValue("@StepErrorMessage", stepErrorMessage);
                    sqlCommand.Parameters.AddWithValue("@LoadID", loadID);
                    sqlCommand.Parameters.AddWithValue("@IsError", isError ? 1 : 0);
                    sqlCommand.ExecuteNonQuery();
                }
                sqlConnection.Close();
            }
        }

        private void CreateTargetTable(string sqlServerConnectionString, string targetTableName, string masterId, string mappingControlTableName)
        {
            using (SqlConnection sqlConnection = new SqlConnection(sqlServerConnectionString))
            {
                sqlConnection.Open();
                StringBuilder createTableQuery = new StringBuilder();

                // Drop the target table if it already exists
                createTableQuery.Append($"IF OBJECT_ID('{targetTableName}', 'U') IS NOT NULL DROP TABLE {targetTableName}; ");

                // Create the target table
                createTableQuery.Append($"CREATE TABLE {targetTableName} (");

                // Get the columns and their target data types from the mapping table
                using (SqlCommand sqlCommand = new SqlCommand($"SELECT * FROM {mappingControlTableName} WHERE MasterId = @MasterId AND IsActive = 1", sqlConnection))
                {
                    sqlCommand.Parameters.AddWithValue("@MasterId", masterId);
                    using (SqlDataReader reader = sqlCommand.ExecuteReader())
                    {
                        while (reader.Read())
                        {
                            string targetColumnName = reader["TargetColumnName"].ToString();
                            string targetDataType = reader["TargetDataType"].ToString();
                            createTableQuery.Append($"{targetColumnName} {targetDataType}, ");
                        }
                    }
                }

                createTableQuery.Append($"[LoadTimestamp] [DATETIME] DEFAULT GETDATE(), ");
                createTableQuery.Append($"[LoadID] [uniqueidentifier] DEFAULT '{loadID}', ");
                createTableQuery.Length -= 2; // Remove the last comma and space
                createTableQuery.Append(");");

                using (SqlCommand sqlCommand = new SqlCommand(createTableQuery.ToString(), sqlConnection))
                {
                    sqlCommand.ExecuteNonQuery();
                }
                sqlConnection.Close();
            }
        }

        #region ScriptResults declaration
        enum ScriptResults
        {
            Success = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Success,
            Failure = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Failure
        };
        #endregion
    }
}]]></ProjectItem>
          <ProjectItem
            Name="ST_9412d6971c9344bebc55939f3eea8256.csproj"
            Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?><Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003"><PropertyGroup><ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids><Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration><Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform><ProductVersion>8.0.30703</ProductVersion><SchemaVersion>2.0</SchemaVersion><ProjectGuid>{80D1B549-EA7D-420F-8032-C6067FBF29BE}</ProjectGuid><OutputType>Library</OutputType><AppDesignerFolder>Properties</AppDesignerFolder><RootNamespace>ST_1e823dcd85bb4b9580689d919333b656</RootNamespace><AssemblyName>ST_9412d6971c9344bebc55939f3eea8256</AssemblyName><TargetFrameworkVersion>v4.7</TargetFrameworkVersion><FileAlignment>512</FileAlignment><ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>true</ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch><TargetFrameworkProfile></TargetFrameworkProfile></PropertyGroup><PropertyGroup Condition=" '$(Configuration)' == 'Debug' "><DebugSymbols>true</DebugSymbols><DebugType>full</DebugType><Optimize>false</Optimize><OutputPath>.\bin\Debug\</OutputPath><EnableUnmanagedDebugging>false</EnableUnmanagedDebugging><DefineConstants>DEBUG;TRACE</DefineConstants><ErrorReport>prompt</ErrorReport><WarningLevel>4</WarningLevel></PropertyGroup><PropertyGroup Condition=" '$(Configuration)' == 'Release' "><DebugSymbols>false</DebugSymbols><Optimize>true</Optimize><OutputPath>.\bin\Release\</OutputPath><EnableUnmanagedDebugging>false</EnableUnmanagedDebugging><DefineConstants>TRACE</DefineConstants><ErrorReport>prompt</ErrorReport><WarningLevel>4</WarningLevel></PropertyGroup><ItemGroup><Reference Include="Oracle.ManagedDataAccess, Version=4.122.19.1, Culture=neutral, PublicKeyToken=89b483f429c47342, processorArchitecture=MSIL" /><Reference Include="System" /><Reference Include="System.Data" /><Reference Include="System.Windows.Forms" /><Reference Include="System.Xml" /><Reference Include="Microsoft.SqlServer.ManagedDTS, Version=16.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" /><Reference Include="Microsoft.SqlServer.ScriptTask, Version=16.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" /></ItemGroup><ItemGroup><AppDesigner Include="Properties\" /><Compile Include="Properties\AssemblyInfo.cs"><SubType>Code</SubType></Compile><EmbeddedResource Include="Properties\Resources.resx"><Generator>ResXFileCodeGenerator</Generator><LastGenOutput>Resources.Designer.cs</LastGenOutput></EmbeddedResource><Compile Include="Properties\Resources.Designer.cs"><AutoGen>True</AutoGen><DependentUpon>Resources.resx</DependentUpon></Compile><None Include="Properties\Settings.settings"><Generator>SettingsSingleFileGenerator</Generator><LastGenOutput>Settings.Designer.cs</LastGenOutput></None><Compile Include="Properties\Settings.Designer.cs"><AutoGen>True</AutoGen><DependentUpon>Settings.settings</DependentUpon></Compile><Compile Include="ScriptMain.cs"><SubType>Code</SubType></Compile></ItemGroup><ItemGroup><WCFMetadata Include="Connected Services\" /></ItemGroup><!-- Include the build rules for a C# project.--><Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" /><ProjectExtensions><VisualStudio><FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}"><ProjectProperties HostName="VSTAHostName" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="cs" TemplatesPath="" /><Host Name="ScriptTask" /><ProjectClient><HostIdentifier>SSIS_ST160</HostIdentifier></ProjectClient></FlavorProperties></VisualStudio></ProjectExtensions></Project>]]></ProjectItem>
          <ProjectItem
            Name="Project"
            Encoding="UTF16LE"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="4.0" schemaVersion="1.0">
  <msb:PropertyGroup>
    <msb:CodeName>ST_bfa81641850148538cb0d111248fe08d</msb:CodeName>
    <msb:Language>msBuild</msb:Language>
    <msb:DisplayName>ST_bfa81641850148538cb0d111248fe08d</msb:DisplayName>
    <msb:ProjectId>{9A291242-BD6E-45B1-A304-21D2C6C2F2D4}</msb:ProjectId>
  </msb:PropertyGroup>
  <msb:ItemGroup>
    <msb:Project Include="ST_9412d6971c9344bebc55939f3eea8256.csproj" />
    <msb:File Include="ScriptMain.cs" />
    <msb:File Include="Properties\Settings.settings" />
    <msb:File Include="Properties\AssemblyInfo.cs" />
    <msb:File Include="Properties\Resources.resx" />
    <msb:File Include="Properties\Resources.Designer.cs" />
    <msb:File Include="Properties\Settings.Designer.cs" />
  </msb:ItemGroup>
</c:Project>]]></ProjectItem>
          <ProjectItem
            Name="Properties\Settings.Designer.cs"
            Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_1e823dcd85bb4b9580689d919333b656.Properties.Settings.get_Default():ST_1e823dcd85bb4b9580689d919333b656.Properties.Sett" +
    "ings")]

namespace ST_1e823dcd85bb4b9580689d919333b656.Properties {
    
    
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
    }
}]]></ProjectItem>
          <ProjectItem
            Name="Properties\Settings.settings"
            Encoding="UTF8"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></ProjectItem>
          <ProjectItem
            Name="Properties\Resources.Designer.cs"
            Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_1e823dcd85bb4b9580689d919333b656.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_1e823dcd85bb4b9580689d919333b656.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_1e823dcd85bb4b9580689d919333b656.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace ST_1e823dcd85bb4b9580689d919333b656.Properties {
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if ((resourceMan == null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ST_1e823dcd85bb4b9580689d919333b656.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
    }
}]]></ProjectItem>
          <BinaryItem
            Name="ST_bfa81641850148538cb0d111248fe08d.dll">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
I34AAEQGAABsCQAAI1N0cmluZ3MAAAAAsA8AABwKAAAjVVMAzBkAABAAAAAjR1VJRAAAANwZAACA
AgAAI0Jsb2IAAAAAAAAAAgAAAVcdogEJAwAAAPoBMwAWAAABAAAAOQAAAAUAAAAHAAAACwAAAAsA
AABCAAAAAgAAABAAAAADAAAAAgAAAAMAAAAEAAAAAQAAAAYAAAABAAAAAQAAAAAAOgUBAAAAAAAG
AIMDXwcGABIEXwcGAM8CTAcPANMHAAAGAPwCwgUGAGYDwgUGAEcDwgUGAPkDwgUGAKMDwgUGALwD
wgUGABMDwgUGAC4DTQQKANcD6QQKACUC6QQOAB8BbAAOAD4G5ggOANQA5ggOAAAH5ggGACUHOwgO
ACoJbAASAC0GxggSAMYAxggSAJYGxggGAMMGEQkGAEQBcAUOAD8J5ggGAEwGcAUOAKcG5ggGAHcF
cAUGALICTAcGAKQIcAUGANUGfwcGAGkGrQUWAIICJAUWAOMCJAUWAFwCmAUGAJcCXwcKABIF6QQa
ABUI0AEaADsB0AEGAK0EcAUOACAGVgYOAPIGVgYOAA4GbAAOAEECbAAOAH0GbAAOAPcF5ggOAOUG
5ggGAHQBFwAOANQF5ggOAGcE5ggGAAEAcAUOALwAVgYOAIkGVgYGAPABcAUGAFABcAUGADYJwgUA
AAAABwAAAAAAAQABAAEAEACNBUgAOQABAAEAAAAQAIYH4gd9AAIABQAAARAAMgjiB5EABAAJAAMB
AACGCAAAdQAFAAwAAQAQAGUBEQB8BWgBEQAVAm0BEQDmAHIBBgZAAHYBVoB2CHkBVoD1AXkBUCAA
AAAAhgCTBQYAAQD8KAAAAACBAHUGfQEBANwpAAAAAIEAKQGHAQcAsCsAAAAAhhg/BwYACwC4KwAA
AACDGD8HBgALAMArAAAAAJMI0QaPAQsA7CsAAAAAkwj9AZUBCwDzKwAAAACTCAkCmwELAPsrAAAA
AJYIqwiiAQwAAiwAAAAAhhg/BwYADAAKLAAAAACRGEUHpwEMAAAAAQDHAQAAAgACAQAAAwAOAQAA
BAAdBwAABQCaBAAABgB5AQAAAQCABAAAAgC3AQAAAwClAAAABACGAQAAAQBHBAkAPwcBABEAPwcG
ABkAPwcKACkAPwcQADEAPwcQADkAPwcQAEEAPwcQAEkAPwcQAFEAPwcQAFkAPwcQAGEAPwcQAGkA
PwcGAPEAPwcGABkBPwcVACkBPwcGAHEAfghhADEBEQhnADkBZwVtAEEBMAR0AHkAPwcGAIEAPwcQ
AFEBiAUGAEkBnQh4AIkAPwd/AJEAPweGAFkBYgWMAMkAegIGAFEBdAIGAHkAlAiSAGkBMQeYAJkA
/Ah0AKEAZwWdAPkAqwSiAKkAPwcQAEkBWwmmALEAPwerALEAtQayAHkAswC3AIkATgi+AHkBOgTE
AMEAPwcGAMEA3wDMAEkBnQjSAEkBnQjaAEkBnQjgAJkACAnmAMEAtATqAMEAvwQBAIkBHQnuANEA
Pwf0ANEAngEQANEAHwj6AJEBuAAAAdEADwcIAdkA9gCiADEBtwgBAKkBSwnqAIkAtQYkAbEBZwWd
ALEBrgDmAHEAPwcGAPkAPwcGALkBYgEpAbkBMgkyAQEBPwc4ASEBPwcGAAgAGABbAQgAHABgASkA
cwDkAS4ACwC8AS4AEwDFAS4AGwDkAS4AIwDtAS4AKwAWAi4AMwAWAi4AOwAWAi4AQwDtAS4ASwAc
Ai4AUwAWAi4AWwAzAkMAYwBgAUkAcwDkAWMAawBgAYEAewBgARwADgEVAQMAAQAEAAMAAADVBqsB
AAAdArEBAACvCLcBAgAGAAMAAgAHAAUAAQAIAAUAAgAJAAcABIAAAAEAAAD8IotPAAAAAAAAgQAA
AAQAAAAAAAAAAAAAAEABeAAAAAAAEAAAAAAAAAAAAAAASQHKBAAAAAAEAAAAAAAAAAAAAABAAWwA
AAAAAAQAegATAAEAAAAAAFIBXQgAAAAABAAAAAAAAAAAAAAAQAFwBQAAAAAQAAAAAAAAAAAAAABJ
ASEAAAAAAAAAAAABAAAAkAcAAAUAAgAAAABJbnQzMgA8TW9kdWxlPgBsb2FkSUQAU3lzdGVtLklP
AE1pY3Jvc29mdC5TcWxTZXJ2ZXIuTWFuYWdlZERUUwB2YWx1ZV9fAFNUXzU1YzliNTA1N2I1NzRj
ZjBhNTNhNTlhZDg4Y2Q1ZjNhAFN5c3RlbS5EYXRhAG1zY29ybGliAFNUX2JmYTgxNjQxODUwMTQ4
NTM4Y2IwZDExMTI0OGZlMDhkAG1hc3RlcklkAFJlYWQATG9hZABBZGQARGJDb21tYW5kAE9yYWNs
ZUNvbW1hbmQAU3FsQ29tbWFuZABBcHBlbmQAZGVmYXVsdEluc3RhbmNlAGdldF9NZXNzYWdlAHN0
ZXBNZXNzYWdlAHN0ZXBFcnJvck1lc3NhZ2UARGF0YVRhYmxlAENyZWF0ZVRhcmdldFRhYmxlAFZh
cmlhYmxlAElEaXNwb3NhYmxlAFJ1bnRpbWVUeXBlSGFuZGxlAEdldFR5cGVGcm9tSGFuZGxlAEZp
bGUAbG9nVGFibGVOYW1lAG1hcHBpbmdDb250cm9sVGFibGVOYW1lAHNldF9EZXN0aW5hdGlvblRh
YmxlTmFtZQB0YXJnZXRUYWJsZU5hbWUAc3RlcE5hbWUATWljcm9zb2Z0LlNxbFNlcnZlci5EdHMu
UnVudGltZQBUeXBlAEZhaWx1cmUAZ2V0X0N1bHR1cmUAc2V0X0N1bHR1cmUAcmVzb3VyY2VDdWx0
dXJlAFZTVEFSVFNjcmlwdE9iamVjdE1vZGVsQmFzZQBJbnRlcm5hbERhdGFDb2xsZWN0aW9uQmFz
ZQBBcHBsaWNhdGlvblNldHRpbmdzQmFzZQBDbG9zZQBEaXNwb3NlAEVkaXRvckJyb3dzYWJsZVN0
YXRlAENvbXBpbGVyR2VuZXJhdGVkQXR0cmlidXRlAERlYnVnZ2VyTm9uVXNlckNvZGVBdHRyaWJ1
dGUARGVidWdnYWJsZUF0dHJpYnV0ZQBFZGl0b3JCcm93c2FibGVBdHRyaWJ1dGUAQXNzZW1ibHlU
aXRsZUF0dHJpYnV0ZQBBc3NlbWJseVRyYWRlbWFya0F0dHJpYnV0ZQBUYXJnZXRGcmFtZXdvcmtB
dHRyaWJ1dGUAQXNzZW1ibHlDb25maWd1cmF0aW9uQXR0cmlidXRlAEFzc2VtYmx5RGVzY3JpcHRp
b25BdHRyaWJ1dGUAQ29tcGlsYXRpb25SZWxheGF0aW9uc0F0dHJpYnV0ZQBBc3NlbWJseVByb2R1
Y3RBdHRyaWJ1dGUAQXNzZW1ibHlDb3B5cmlnaHRBdHRyaWJ1dGUAU1NJU1NjcmlwdFRhc2tFbnRy
eVBvaW50QXR0cmlidXRlAEFzc2VtYmx5Q29tcGFueUF0dHJpYnV0ZQBSdW50aW1lQ29tcGF0aWJp
bGl0eUF0dHJpYnV0ZQBnZXRfVmFsdWUAQWRkV2l0aFZhbHVlAHZhbHVlAFN5c3RlbS5SdW50aW1l
LlZlcnNpb25pbmcAU3FsQnVsa0NvcHlDb2x1bW5NYXBwaW5nAHNxbFNlcnZlckNvbm5lY3Rpb25T
dHJpbmcAY29ubmVjdGlvblN0cmluZwBUb1N0cmluZwBnZXRfTGVuZ3RoAHNldF9MZW5ndGgATWlj
cm9zb2Z0LlNxbFNlcnZlci5TY3JpcHRUYXNrAE1pY3Jvc29mdC5TcWxTZXJ2ZXIuRHRzLlRhc2tz
LlNjcmlwdFRhc2sAU2NyaXB0T2JqZWN0TW9kZWwAU3lzdGVtLkNvbXBvbmVudE1vZGVsAFNUX2Jm
YTgxNjQxODUwMTQ4NTM4Y2IwZDExMTI0OGZlMDhkLmRsbABGaWxsAGdldF9JdGVtAFN5c3RlbQBF
bnVtAHJlc291cmNlTWFuAE9wZW4AU2NyaXB0TWFpbgBTeXN0ZW0uQ29uZmlndXJhdGlvbgBTeXN0
ZW0uR2xvYmFsaXphdGlvbgBTeXN0ZW0uUmVmbGVjdGlvbgBTcWxCdWxrQ29weUNvbHVtbk1hcHBp
bmdDb2xsZWN0aW9uAFNxbFBhcmFtZXRlckNvbGxlY3Rpb24ARGF0YVJvd0NvbGxlY3Rpb24ARGJD
b25uZWN0aW9uAE9yYWNsZUNvbm5lY3Rpb24AU3FsQ29ubmVjdGlvbgBFeGNlcHRpb24AU3lzdGVt
LkRhdGEuQ29tbW9uAEN1bHR1cmVJbmZvAExvZ1N0ZXAASURhdGFSZWFkZXIARGJEYXRhUmVhZGVy
AE9yYWNsZURhdGFSZWFkZXIAU3FsRGF0YVJlYWRlcgBFeGVjdXRlUmVhZGVyAFN0cmluZ0J1aWxk
ZXIAZ2V0X1Jlc291cmNlTWFuYWdlcgBTcWxQYXJhbWV0ZXIARGJEYXRhQWRhcHRlcgBTcWxEYXRh
QWRhcHRlcgBXcml0ZVRvU2VydmVyAGlzRXJyb3IASUVudW1lcmF0b3IAR2V0RW51bWVyYXRvcgAu
Y3RvcgAuY2N0b3IAU3lzdGVtLkRpYWdub3N0aWNzAFN5c3RlbS5SdW50aW1lLkNvbXBpbGVyU2Vy
dmljZXMAU3lzdGVtLlJlc291cmNlcwBTVF8xZTgyM2RjZDg1YmI0Yjk1ODA2ODlkOTE5MzMzYjY1
Ni5Qcm9wZXJ0aWVzLlJlc291cmNlcy5yZXNvdXJjZXMARGVidWdnaW5nTW9kZXMAU1RfMWU4MjNk
Y2Q4NWJiNGI5NTgwNjg5ZDkxOTMzM2I2NTYuUHJvcGVydGllcwBnZXRfVmFyaWFibGVzAGdldF9D
b2x1bW5NYXBwaW5ncwBTZXR0aW5ncwBTeXN0ZW0uQ29sbGVjdGlvbnMAZ2V0X1BhcmFtZXRlcnMA
T3JhY2xlLk1hbmFnZWREYXRhQWNjZXNzAFN1Y2Nlc3MAZ2V0X0R0cwBTY3JpcHRSZXN1bHRzAGdl
dF9Sb3dzAENvbmNhdABPYmplY3QAZ2V0X0RlZmF1bHQAc2V0X1Rhc2tSZXN1bHQAT3JhY2xlLk1h
bmFnZWREYXRhQWNjZXNzLkNsaWVudABTeXN0ZW0uRGF0YS5TcWxDbGllbnQAZ2V0X0N1cnJlbnQA
TW92ZU5leHQAU3lzdGVtLlRleHQAV3JpdGVBbGxUZXh0AERhdGFSb3cAZ2V0X0Fzc2VtYmx5AFNx
bEJ1bGtDb3B5AEV4ZWN1dGVOb25RdWVyeQBJc051bGxPckVtcHR5AAAAAAA7UwB5AHMAdABlAG0A
OgA6AEUAeABlAGMAdQB0AGkAbwBuAEkAbgBzAHQAYQBuAGMAZQBHAFUASQBEAABBJABQAGEAYwBr
AGEAZwBlADoAOgBPAHIAYQBjAGwAZQBDAG8AbgBuAGUAYwB0AGkAbwBuAFMAdAByAGkAbgBnAABH
JABQAGEAYwBrAGEAZwBlADoAOgBTAFEATABTAGUAcgB2AGUAcgBDAG8AbgBuAGUAYwB0AGkAbwBu
AFMAdAByAGkAbgBnAABBJABQAGEAYwBrAGEAZwBlADoAOgBNAGEAcwB0AGUAcgBDAG8AbgB0AHIA
bwBsAFQAYQBiAGwAZQBOAGEAbQBlAABDJABQAGEAYwBrAGEAZwBlADoAOgBNAGEAcABwAGkAbgBn
AEMAbwBuAHQAcgBvAGwAVABhAGIAbABlAE4AYQBtAGUAAC0kAFAAYQBjAGsAYQBnAGUAOgA6AEwA
bwBnAFQAYQBiAGwAZQBOAGEAbQBlAAALUwB0AGEAcgB0AAAfUAByAG8AYwBlAHMAcwAgAHMAdABh
AHIAdABlAGQAAAEAHVMARQBMAEUAQwBUACAAKgAgAEYAUgBPAE0AIAAAJyAAVwBIAEUAUgBFACAA
SQBzAEEAYwB0AGkAdgBlACAAPQAgADEAACVSAGUAYQBkACAAQwBvAG4AdAByAG8AbAAgAFQAYQBi
AGwAZQAAP0MAbwBuAHQAcgBvAGwAIAB0AGEAYgBsAGUAIAByAGUAYQBkACAAcwB1AGMAYwBlAHMA
cwBmAHUAbABsAHkAAB9TAG8AdQByAGMAZQBUAGEAYgBsAGUATgBhAG0AZQAAF1MAbwB1AHIAYwBl
AFEAdQBlAHIAeQAAK1MAbwB1AHIAYwBlAEYAaQBsAHQAZQByAEMAbwBuAGQAaQB0AGkAbwBuAAAf
VABhAHIAZwBlAHQAVABhAGIAbABlAE4AYQBtAGUAAFkgAFcASABFAFIARQAgAE0AYQBzAHQAZQBy
AEkAZAAgAD0AIABAAE0AYQBzAHQAZQByAEkAZAAgAEEATgBEACAASQBzAEEAYwB0AGkAdgBlACAA
PQAgADEAABNAAE0AYQBzAHQAZQByAEkAZAAABUkAZAAAD1MARQBMAEUAQwBUACAAACFTAG8AdQBy
AGMAZQBDAG8AbAB1AG0AbgBOAGEAbQBlAAAdUwBvAHUAcgBjAGUARABhAHQAYQBUAHkAcABlAAAn
UwBvAHUAcgBjAGUAQwB1AHMAdABvAG0AQwBvAG4AdgBlAHIAdAAACSAAQQBTACAAAAUsACAAAAtD
AEEAUwBUACgAAAspACAAQQBTACAAAA0gAEYAUgBPAE0AIAAAAyAAAICpQwA6AFwAVQBzAGUAcgBz
AFwAUwBhAGkAZABuAGEAegBhAHIAbwB2AE8AQQBcAE8AbgBlAEQAcgBpAHYAZQAgAC0AIABJAHAA
bwB0AGUAawBhACAAQgBhAG4AawBcAEQAbwBjAHUAbQBlAG4AdABzAFwAUwBRAEwAUwB0AGEAZwBp
AG4AZwBcAEwAYQBzAHQAUgBhAG4AUQB1AGUAcgB5AC4AdAB4AHQAASFSAGUAYQBkACAAUwBvAHUA
cgBjAGUAIABEAGEAdABhAAA5RABhAHQAYQAgAHIAZQBhAGQAIABzAHUAYwBjAGUAcwBzAGYAdQBs
AGwAeQAgAGYAcgBvAG0AIAAAJ0MAcgBlAGEAdABlACAAVABhAHIAZwBlAHQAIABUAGEAYgBsAGUA
ABtUAGEAcgBnAGUAdAAgAHQAYQBiAGwAZQAgAAArIABjAHIAZQBhAHQAZQBkACAAcwB1AGMAYwBl
AHMAcwBmAHUAbABsAHkAACFUAGEAcgBnAGUAdABDAG8AbAB1AG0AbgBOAGEAbQBlAAAXSQBuAHMA
ZQByAHQAIABEAGEAdABhAABBRABhAHQAYQAgAGkAbgBzAGUAcgB0AGUAZAAgAHMAdQBjAGMAZQBz
AHMAZgB1AGwAbAB5ACAAaQBuAHQAbwAgAAALRQByAHIAbwByAAAjRQByAHIAbwByACAAcAByAG8A
YwBlAHMAcwBpAG4AZwAgAAAHRQBuAGQAAD1QAHIAbwBjAGUAcwBzACAAYwBvAG0AcABsAGUAdABl
AGQAIABzAHUAYwBjAGUAcwBzAGYAdQBsAGwAeQAAHUMAcgBpAHQAaQBjAGEAbAAgAEUAcgByAG8A
cgAAL0MAcgBpAHQAaQBjAGEAbAAgAGUAcgByAG8AcgAgAG8AYwBjAHUAcgByAGUAZAAAGUkATgBT
AEUAUgBUACAASQBOAFQATwAgAACBBSAAKABTAHQAZQBwAE4AYQBtAGUALAAgAFMAdABlAHAATQBl
AHMAcwBhAGcAZQAsACAAUwB0AGUAcABFAHIAcgBvAHIATQBlAHMAcwBhAGcAZQAsACAATABvAGEA
ZABJAEQALAAgAEkAcwBFAHIAcgBvAHIAKQAgAFYAQQBMAFUARQBTACAAKABAAFMAdABlAHAATgBh
AG0AZQAsACAAQABTAHQAZQBwAE0AZQBzAHMAYQBnAGUALAAgAEAAUwB0AGUAcABFAHIAcgBvAHIA
TQBlAHMAcwBhAGcAZQAsACAAQABMAG8AYQBkAEkARAAsACAAQABJAHMARQByAHIAbwByACkAABNA
AFMAdABlAHAATgBhAG0AZQAAGUAAUwB0AGUAcABNAGUAcwBzAGEAZwBlAAAjQABTAHQAZQBwAEUA
cgByAG8AcgBNAGUAcwBzAGEAZwBlAAAPQABMAG8AYQBkAEkARAAAEUAASQBzAEUAcgByAG8AcgAA
HUkARgAgAE8AQgBKAEUAQwBUAF8ASQBEACgAJwABPycALAAgACcAVQAnACkAIABJAFMAIABOAE8A
VAAgAE4AVQBMAEwAIABEAFIATwBQACAAVABBAEIATABFACAAAQU7ACAAABtDAFIARQBBAFQARQAg
AFQAQQBCAEwARQAgAAAFIAAoAAAdVABhAHIAZwBlAHQARABhAHQAYQBUAHkAcABlAABdWwBMAG8A
YQBkAFQAaQBtAGUAcwB0AGEAbQBwAF0AIABbAEQAQQBUAEUAVABJAE0ARQBdACAARABFAEYAQQBV
AEwAVAAgAEcARQBUAEQAQQBUAEUAKAApACwAIAAAS1sATABvAGEAZABJAEQAXQAgAFsAdQBuAGkA
cQB1AGUAaQBkAGUAbgB0AGkAZgBpAGUAcgBdACAARABFAEYAQQBVAEwAVAAgACcAAQcnACwAIAAB
BSkAOwAAcVMAVABfADEAZQA4ADIAMwBkAGMAZAA4ADUAYgBiADQAYgA5ADUAOAAwADYAOAA5AGQA
OQAxADkAMwAzADMAYgA2ADUANgAuAFAAcgBvAHAAZQByAHQAaQBlAHMALgBSAGUAcwBvAHUAcgBj
AGUAcwAAAAAArDhZxsvNbE+pDmJs8+vdKQAEIAEBCAMgAAEFIAEBEREEIAEBDgYgAQERgIlEBygO
Dg4ODhI9EkESRRJJEk0SUQ4ODg4SPRJVElkSXRJBEj0SYRJFEkkSTQ4ODhJlElkSXRJBEmkSPRJF
EkkODhJtEm0FIAASgJkFIAASgJ0GIAESgKEcAyAAHAYAAw4ODg4GIAIBDhJBBSABARJFBSABCBI9
BSAAEoCxBCAAEk0EIAEcDgMgAA4EAAECDgYgAgEOElUEIAASXQYgAQESgLkFIAASgL0HIAISgMEO
HAUgARJhDgcABA4ODg4OBQACDg4OBQABDh0OAyAAAgMgAAgFAAIBDg4FIAEBEkEFIAASgMkHIAIS
gM0ODgUgAQESPQYHAhJBEkUOBwcSQRJhEkUScQ4OEkUEIAAScQgAARKA3RGA4QUgABKA5QcgAgEO
EoDlCLd6XFYZNOCJCImEXc2AgMyRCIm0g/QpxHNCBAAAAAAEAQAAAAIGDgQGEoCBBAYSgIUDBhIQ
AgYIAwYRFAkgBgEODg4CDg4HIAQBDg4ODgUAABKAgQUAABKAhQYAAQESgIUEAAASEAMAAAEFCAAS
gIEFCAASgIUECAASEAgBAAgAAAAAAB4BAAEAVAIWV3JhcE5vbkV4Y2VwdGlvblRocm93cwEIAQAC
AAAAAAAoAQAjU1RfMWU4MjNkY2Q4NWJiNGI5NTgwNjg5ZDkxOTMzM2I2NTYAAAUBAAAAABYBABFD
b3B5cmlnaHQgQCAgMjAyNAAASQEAGi5ORVRGcmFtZXdvcmssVmVyc2lvbj12NC43AQBUDhRGcmFt
ZXdvcmtEaXNwbGF5TmFtZRIuTkVUIEZyYW1ld29yayA0LjcAAAC0AAAAzsrvvgEAAACRAAAAbFN5
c3RlbS5SZXNvdXJjZXMuUmVzb3VyY2VSZWFkZXIsIG1zY29ybGliLCBWZXJzaW9uPTQuMC4wLjAs
IEN1bHR1cmU9bmV1dHJhbCwgUHVibGljS2V5VG9rZW49Yjc3YTVjNTYxOTM0ZTA4OSNTeXN0ZW0u
UmVzb3VyY2VzLlJ1bnRpbWVSZXNvdXJjZVNldAIAAAAAAAAAAAAAAFBBRFBBRFC0AAAAVEkAAAAA
AAAAAAAAbkkAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGBJAAAAAAAAAAAAAAAAX0NvckRsbE1h
aW4AbXNjb3JlZS5kbGwAAAAAAP8lACAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAEAAAABgA
AIAAAAAAAAAAAAAAAAAAAAEAAQAAADAAAIAAAAAAAAAAAAAAAAAAAAEAAAAAAEgAAABYYAAAGgQA
AAAAAAAAAAAAGgQ0AAAAVgBTAF8AVgBFAFIAUwBJAE8ATgBfAEkATgBGAE8AAAAAAL0E7/4AAAEA
AAABAItP/CIAAAEAi0/8Ij8AAAAAAAAABAAAAAIAAAAAAAAAAAAAAAAAAABEAAAAAQBWAGEAcgBG
AGkAbABlAEkAbgBmAG8AAAAAACQABAAAAFQAcgBhAG4AcwBsAGEAdABpAG8AbgAAAAAAAACwBHoD
AAABAFMAdAByAGkAbgBnAEYAaQBsAGUASQBuAGYAbwAAAFYDAAABADAAMAAwADAAMAA0AGIAMAAA
ABoAAQABAEMAbwBtAG0AZQBuAHQAcwAAAAAAAAAiAAEAAQBDAG8AbQBwAGEAbgB5AE4AYQBtAGUA
AAAAAAAAAABwACQAAQBGAGkAbABlAEQAZQBzAGMAcgBpAHAAdABpAG8AbgAAAAAAUwBUAF8AMQBl
ADgAMgAzAGQAYwBkADgANQBiAGIANABiADkANQA4ADAANgA4ADkAZAA5ADEAOQAzADMAMwBiADYA
NQA2AAAAPgAPAAEARgBpAGwAZQBWAGUAcgBzAGkAbwBuAAAAAAAxAC4AMAAuADgAOQA1ADYALgAy
ADAAMwA2ADMAAAAAAHAAKAABAEkAbgB0AGUAcgBuAGEAbABOAGEAbQBlAAAAUwBUAF8AYgBmAGEA
OAAxADYANAAxADgANQAwADEANAA4ADUAMwA4AGMAYgAwAGQAMQAxADEAMgA0ADgAZgBlADAAOABk
AC4AZABsAGwAAABIABIAAQBMAGUAZwBhAGwAQwBvAHAAeQByAGkAZwBoAHQAAABDAG8AcAB5AHIA
aQBnAGgAdAAgAEAAIAAgADIAMAAyADQAAAAqAAEAAQBMAGUAZwBhAGwAVAByAGEAZABlAG0AYQBy
AGsAcwAAAAAAAAAAAHgAKAABAE8AcgBpAGcAaQBuAGEAbABGAGkAbABlAG4AYQBtAGUAAABTAFQA
XwBiAGYAYQA4ADEANgA0ADEAOAA1ADAAMQA0ADgANQAzADgAYwBiADAAZAAxADEAMQAyADQAOABm
AGUAMAA4AGQALgBkAGwAbAAAAGgAJAABAFAAcgBvAGQAdQBjAHQATgBhAG0AZQAAAAAAUwBUAF8A
MQBlADgAMgAzAGQAYwBkADgANQBiAGIANABiADkANQA4ADAANgA4ADkAZAA5ADEAOQAzADMAMwBi
ADYANQA2AAAAQgAPAAEAUAByAG8AZAB1AGMAdABWAGUAcgBzAGkAbwBuAAAAMQAuADAALgA4ADkA
NQA2AC4AMgAwADMANgAzAAAAAABGAA8AAQBBAHMAcwBlAG0AYgBsAHkAIABWAGUAcgBzAGkAbwBu
AAAAMQAuADAALgA4ADkANQA2AC4AMgAwADMANgAzAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAADAAAAIA5AAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==</BinaryItem>
        </ScriptProject>
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\Working CTRL+LOG v-2"
      DTS:CreationName="Microsoft.ScriptTask"
      DTS:Description="Script Task"
      DTS:Disabled="True"
      DTS:DTSID="{470E4ADA-74BF-4079-8080-0FF7D1BB2FDF}"
      DTS:ExecutableType="Microsoft.ScriptTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="Working CTRL+LOG v-2"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <ScriptProject
          Name="ST_1e823dcd85bb4b9580689d919333b656"
          VSTAMajorVersion="16"
          VSTAMinorVersion="0"
          Language="CSharp"
          ReadOnlyVariables="System::ClusterID,System::ClusterNodeCount,System::ContainerStartTime,System::CreationName,System::LocaleID,System::ParentContainerGUID,System::TaskID,System::TaskName,System::TaskTransactionOption,System::CancelEvent,System::CreationDate,System::CreatorComputerName,System::CreatorName,System::ExecutionInstanceGUID,System::FailedConfigurations,System::IgnoreConfigurationsOnLoad,System::InteractiveMode,System::LastModifiedProductVersion,System::MachineName,System::OfflineMode,System::PackageID,System::PackageName,System::ProductVersion,System::ServerExecutionID,System::StartTime,System::UserName,System::VersionBuild,System::VersionComments,System::VersionGUID,System::VersionMajor,System::VersionMinor">
          <ProjectItem
            Name="Properties\Settings.settings"
            Encoding="UTF8"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></ProjectItem>
          <ProjectItem
            Name="Properties\Resources.resx"
            Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></ProjectItem>
          <ProjectItem
            Name="ScriptMain.cs"
            Encoding="UTF8"><![CDATA[#region Help: Introduction to the script task
/* The Script Task allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services control flow. 
 * 
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script task. */
#endregion

#region Namespaces
using System;
using System.Data;
using Microsoft.SqlServer.Dts.Runtime;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Oracle.ManagedDataAccess.Client;
using System.Data.SqlClient;
#endregion

namespace ST_55c9b5057b574cf0a53a59ad88cd5f3a
{
    [Microsoft.SqlServer.Dts.Tasks.ScriptTask.SSISScriptTaskEntryPointAttribute]
    public partial class ScriptMain : Microsoft.SqlServer.Dts.Tasks.ScriptTask.VSTARTScriptObjectModelBase
    {
        private string loadID;

        public void Main()
        {

            loadID = (string)Dts.Variables["System::ExecutionInstanceGUID"].Value;

            string oracleConnectionString = "User Id=birjan;Password=Rfv,fi01;Data Source=192.168.81.99:1521/orcl1";
            string sqlServerConnectionString = "Data Source=172.17.17.22,54312;Initial Catalog=BRDB;Integrated Security=True;TrustServerCertificate=True;";

            try
            {
                LogStep("Start", "Process started", "", false);

                // Step 1: Read control table from SQL Server
                DataTable controlTable = new DataTable();

                using (SqlConnection sqlConnection = new SqlConnection(sqlServerConnectionString))
                {
                    sqlConnection.Open();
                    using (SqlCommand sqlCommand = new SqlCommand("SELECT * FROM CTRL.MasterOracleToSTG WHERE IsActive = 1", sqlConnection))
                    {
                        using (SqlDataAdapter sqlDataAdapter = new SqlDataAdapter(sqlCommand))
                        {
                            sqlDataAdapter.Fill(controlTable);
                        }
                    }
                    sqlConnection.Close();
                }
                LogStep("Read Control Table", "Control table read successfully", "", false);

                // Process each active source table
                foreach (DataRow masterRow in controlTable.Rows)
                {
                    string sourceTableName = masterRow["SourceTableName"].ToString();
                    string sourceQuery = masterRow["SourceQuery"].ToString();
                    string targetTableName = masterRow["TargetTableName"].ToString();

                    DataTable sourceDataTable = new DataTable();

                    try
                    {
                        // Step 2: Read data from Oracle
                        using (OracleConnection oracleConnection = new OracleConnection(oracleConnectionString))
                        {
                            oracleConnection.Open();

                            if (!string.IsNullOrEmpty(sourceQuery))
                            {
                                // Use SourceQuery if provided
                                using (OracleCommand oracleCommand = new OracleCommand(sourceQuery, oracleConnection))
                                {
                                    using (OracleDataReader reader = oracleCommand.ExecuteReader())
                                    {
                                        sourceDataTable.Load(reader);
                                    }
                                }
                            }
                            else
                            {
                                // Construct query based on mapping table if SourceQuery is null
                                using (SqlConnection sqlConnection = new SqlConnection(sqlServerConnectionString))
                                {
                                    sqlConnection.Open();
                                    DataTable mappingTable = new DataTable();
                                    using (SqlCommand sqlCommand = new SqlCommand("SELECT * FROM CTRL.MappingOracleToSTG WHERE MasterId = @MasterId AND IsActive = 1", sqlConnection))
                                    {
                                        sqlCommand.Parameters.AddWithValue("@MasterId", masterRow["Id"]);
                                        using (SqlDataAdapter sqlDataAdapter = new SqlDataAdapter(sqlCommand))
                                        {
                                            sqlDataAdapter.Fill(mappingTable);
                                        }
                                    }

                                    // Build the query to select and convert columns from Oracle
                                    StringBuilder selectQueryBuilder = new StringBuilder();
                                    selectQueryBuilder.Append("SELECT ");
                                    foreach (DataRow mappingRow in mappingTable.Rows)
                                    {
                                        string sourceColumnName = mappingRow["SourceColumnName"].ToString();
                                        string sourceDataType = mappingRow["SourceDataType"].ToString();
                                        selectQueryBuilder.Append($"CAST({sourceColumnName} AS {sourceDataType}) AS {sourceColumnName}, ");
                                    }
                                    selectQueryBuilder.Length -= 2; // Remove the last comma and space
                                    selectQueryBuilder.Append($" FROM {sourceTableName}");

                                    using (OracleCommand oracleCommand = new OracleCommand(selectQueryBuilder.ToString(), oracleConnection))
                                    {
                                        using (OracleDataReader reader = oracleCommand.ExecuteReader())
                                        {
                                            sourceDataTable.Load(reader);
                                        }
                                    }
                                }
                            }
                            oracleConnection.Close();
                        }
                        LogStep("Read Source Data", $"Data read successfully from {sourceTableName}", "", false);

                        // Step 3: Drop and create target table in SQL Server
                        CreateTargetTable(sqlServerConnectionString, targetTableName, masterRow["Id"].ToString());
                        LogStep("Create Target Table", $"Target table {targetTableName} created successfully", "", false);

                        // Step 4: Insert data into SQL Server using SqlBulkCopy
                        using (SqlConnection sqlConnection = new SqlConnection(sqlServerConnectionString))
                        {
                            sqlConnection.Open();
                            using (SqlBulkCopy sqlBulkCopy = new SqlBulkCopy(sqlConnection))
                            {
                                sqlBulkCopy.DestinationTableName = targetTableName;

                                // Get column mappings from the control table
                                DataTable mappingTable = new DataTable();
                                using (SqlCommand sqlCommand = new SqlCommand("SELECT * FROM CTRL.MappingOracleToSTG WHERE MasterId = @MasterId AND IsActive = 1", sqlConnection))
                                {
                                    sqlCommand.Parameters.AddWithValue("@MasterId", masterRow["Id"]);
                                    using (SqlDataAdapter sqlDataAdapter = new SqlDataAdapter(sqlCommand))
                                    {
                                        sqlDataAdapter.Fill(mappingTable);
                                    }
                                }

                                // Add column mappings
                                foreach (DataRow mappingRow in mappingTable.Rows)
                                {
                                    string sourceColumn = mappingRow["SourceColumnName"].ToString();
                                    string targetColumn = mappingRow["TargetColumnName"].ToString();
                                    sqlBulkCopy.ColumnMappings.Add(sourceColumn, targetColumn);
                                }

                                sqlBulkCopy.WriteToServer(sourceDataTable);
                            }
                            sqlConnection.Close();
                        }
                        LogStep("Insert Data", $"Data inserted successfully into {targetTableName}", "", false);
                    }
                    catch (Exception ex)
                    {
                        LogStep("Error", $"Error processing {sourceTableName}", ex.Message, true);
                        throw; // Re-throw the exception to stop the execution
                    }
                }

                LogStep("End", "Process completed successfully", "", false);
                Dts.TaskResult = (int)ScriptResults.Success;
            }
            catch (Exception ex)
            {
                LogStep("Critical Error", "Critical error occurred", ex.Message, true);
                Dts.TaskResult = (int)ScriptResults.Failure;
            }
        }

        private void LogStep(string stepName, string stepMessage, string stepErrorMessage, bool isError)
        {
            string connectionString = "Data Source=172.17.17.22,54312;Initial Catalog=BRDB;Integrated Security=True;TrustServerCertificate=True;";
            using (SqlConnection sqlConnection = new SqlConnection(connectionString))
            {
                sqlConnection.Open();
                using (SqlCommand sqlCommand = new SqlCommand("INSERT INTO LOG.CSOracleToSTG (StepName, StepMessage, StepErrorMessage, LoadID, IsError) VALUES (@StepName, @StepMessage, @StepErrorMessage, @LoadID, @IsError)", sqlConnection))
                {
                    sqlCommand.Parameters.AddWithValue("@StepName", stepName);
                    sqlCommand.Parameters.AddWithValue("@StepMessage", stepMessage);
                    sqlCommand.Parameters.AddWithValue("@StepErrorMessage", stepErrorMessage);
                    sqlCommand.Parameters.AddWithValue("@LoadID", loadID);
                    sqlCommand.Parameters.AddWithValue("@IsError", isError ? 1 : 0);
                    sqlCommand.ExecuteNonQuery();
                }
                sqlConnection.Close();
            }
        }

        private void CreateTargetTable(string sqlServerConnectionString, string targetTableName, string masterId)
        {
            using (SqlConnection sqlConnection = new SqlConnection(sqlServerConnectionString))
            {
                sqlConnection.Open();
                StringBuilder createTableQuery = new StringBuilder();

                // Drop the target table if it already exists
                createTableQuery.Append($"IF OBJECT_ID('{targetTableName}', 'U') IS NOT NULL DROP TABLE {targetTableName}; ");

                // Create the target table
                createTableQuery.Append($"CREATE TABLE {targetTableName} (");

                // Get the columns and their target data types from the mapping table
                using (SqlCommand sqlCommand = new SqlCommand("SELECT * FROM CTRL.MappingOracleToSTG WHERE MasterId = @MasterId AND IsActive = 1", sqlConnection))
                {
                    sqlCommand.Parameters.AddWithValue("@MasterId", masterId);
                    using (SqlDataReader reader = sqlCommand.ExecuteReader())
                    {
                        while (reader.Read())
                        {
                            string targetColumnName = reader["TargetColumnName"].ToString();
                            string targetDataType = reader["TargetDataType"].ToString();
                            createTableQuery.Append($"{targetColumnName} {targetDataType}, ");
                        }
                    }
                }

                createTableQuery.Length -= 2; // Remove the last comma and space
                createTableQuery.Append(");");

                using (SqlCommand sqlCommand = new SqlCommand(createTableQuery.ToString(), sqlConnection))
                {
                    sqlCommand.ExecuteNonQuery();
                }
                sqlConnection.Close();
            }
        }

        #region ScriptResults declaration
        enum ScriptResults
        {
            Success = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Success,
            Failure = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Failure
        };
        #endregion
    }
}]]></ProjectItem>
          <ProjectItem
            Name="Project"
            Encoding="UTF16LE"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="4.0" schemaVersion="1.0">
  <msb:PropertyGroup>
    <msb:CodeName>ST_1e823dcd85bb4b9580689d919333b656</msb:CodeName>
    <msb:Language>msBuild</msb:Language>
    <msb:DisplayName>ST_1e823dcd85bb4b9580689d919333b656</msb:DisplayName>
    <msb:ProjectId>{3E36E9D5-60AB-4865-B058-B98ED46992C7}</msb:ProjectId>
  </msb:PropertyGroup>
  <msb:ItemGroup>
    <msb:Project Include="ST_1e823dcd85bb4b9580689d919333b656.csproj" />
    <msb:File Include="Properties\Resources.Designer.cs" />
    <msb:File Include="Properties\Settings.settings" />
    <msb:File Include="Properties\AssemblyInfo.cs" />
    <msb:File Include="Properties\Resources.resx" />
    <msb:File Include="Properties\Settings.Designer.cs" />
    <msb:File Include="ScriptMain.cs" />
  </msb:ItemGroup>
</c:Project>]]></ProjectItem>
          <ProjectItem
            Name="Properties\Settings.Designer.cs"
            Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_1e823dcd85bb4b9580689d919333b656.Properties.Settings.get_Default():ST_1e823dcd85bb4b9580689d919333b656.Properties.Sett" +
    "ings")]

namespace ST_1e823dcd85bb4b9580689d919333b656.Properties {
    
    
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
    }
}]]></ProjectItem>
          <ProjectItem
            Name="ST_1e823dcd85bb4b9580689d919333b656.csproj"
            Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProductVersion>8.0.30703</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{80D1B549-EA7D-420F-8032-C6067FBF29BE}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>ST_1e823dcd85bb4b9580689d919333b656</RootNamespace>
    <AssemblyName>ST_1e823dcd85bb4b9580689d919333b656</AssemblyName>
    <TargetFrameworkVersion>v4.7</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
    <ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>true</ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>
    <TargetFrameworkProfile></TargetFrameworkProfile>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>.\bin\Debug\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DebugSymbols>false</DebugSymbols>
    <Optimize>true</Optimize>
    <OutputPath>.\bin\Release\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="Oracle.ManagedDataAccess, Version=4.122.19.1, Culture=neutral, PublicKeyToken=89b483f429c47342, processorArchitecture=MSIL" />
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
    <Reference Include="Microsoft.SqlServer.ManagedDTS, Version=16.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.ScriptTask, Version=16.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
  </ItemGroup>
  <ItemGroup>
    <AppDesigner Include="Properties\" />
    <Compile Include="Properties\AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <EmbeddedResource Include="Properties\Resources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
    <Compile Include="Properties\Resources.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Resources.resx</DependentUpon>
    </Compile>
    <None Include="Properties\Settings.settings">
      <Generator>SettingsSingleFileGenerator</Generator>
      <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <Compile Include="Properties\Settings.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Settings.settings</DependentUpon>
    </Compile>
    <Compile Include="ScriptMain.cs">
      <SubType>Code</SubType>
    </Compile>
  </ItemGroup>
  <ItemGroup>
    <WCFMetadata Include="Connected Services\" />
  </ItemGroup>
  <!-- Include the build rules for a C# project.-->
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <ProjectExtensions>
    <VisualStudio>
      <FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}">
        <ProjectProperties HostName="VSTAHostName" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="cs" TemplatesPath="" />
        <Host Name="ScriptTask" />
        <ProjectClient>
          <HostIdentifier>SSIS_ST160</HostIdentifier>
        </ProjectClient>
      </FlavorProperties>
    </VisualStudio>
  </ProjectExtensions>
</Project>]]></ProjectItem>
          <ProjectItem
            Name="Properties\AssemblyInfo.cs"
            Encoding="UTF8"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("ST_1e823dcd85bb4b9580689d919333b656")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("ST_1e823dcd85bb4b9580689d919333b656")]
[assembly: AssemblyCopyright("Copyright @  2024")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.*")]]]></ProjectItem>
          <ProjectItem
            Name="Properties\Resources.Designer.cs"
            Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_1e823dcd85bb4b9580689d919333b656.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_1e823dcd85bb4b9580689d919333b656.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_1e823dcd85bb4b9580689d919333b656.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace ST_1e823dcd85bb4b9580689d919333b656.Properties {
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if ((resourceMan == null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ST_1e823dcd85bb4b9580689d919333b656.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
    }
}]]></ProjectItem>
          <BinaryItem
            Name="ST_1e823dcd85bb4b9580689d919333b656.dll">TVqQAAMAAAAEAAAA//8AALgAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAgAAAAA4fug4AtAnNIbgBTM0hVGhpcyBwcm9ncmFtIGNhbm5vdCBiZSBydW4gaW4gRE9TIG1v
ZGUuDQ0KJAAAAAAAAABQRQAATAEDAD/chGYAAAAAAAAAAOAAIiALATAAACgAAAAIAAAAAAAAVkYA
AAAgAAAAYAAAAAAAEAAgAAAAAgAABAAAAAAAAAAGAAAAAAAAAACgAAAAAgAAAAAAAAMAYIUAABAA
ABAAAAAAEAAAEAAAAAAAABAAAAAAAAAAAAAAAARGAABPAAAAAGAAAHgEAAAAAAAAAAAAAAAAAAAA
AAAAAIAAAAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAIAAACAAAAAAAAAAAAAAACCAAAEgAAAAAAAAAAAAAAC50ZXh0AAAAXCYAAAAgAAAAKAAAAAIA
AAAAAAAAAAAAAAAAACAAAGAucnNyYwAAAHgEAAAAYAAAAAYAAAAqAAAAAAAAAAAAAAAAAABAAABA
LnJlbG9jAAAMAAAAAIAAAAACAAAAMAAAAAAAAAAAAAAAAAAAQAAAQgAAAAAAAAAAAAAAAAAAAAA4
RgAAAAAAAEgAAAACAAUAaCoAAOQaAAABAAAAAAAAAExFAAC4AAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAABswBQBFBQAAAQAAEQICKBAAAApvEQAACnIBAABwbxIAAApv
EwAACnQpAAABfQEAAARyPQAAcApyygAAcAsCcp8BAHByqwEAcHLLAQBwFigCAAAGcxQAAAoMB3MV
AAAKDQlvFgAACnLNAQBwCXMXAAAKEwQRBHMYAAAKEwURBQhvGQAACibeDBEFLAcRBW8aAAAK3N4M
EQQsBxEEbxoAAArcCW8bAAAK3goJLAYJbxoAAArcAnI9AgBwcmMCAHByywEAcBYoAgAABghvHAAA
Cm8dAAAKEwY4BgQAABEGbx4AAAp0FAAAARMHEQdyowIAcG8fAAAKbyAAAAoTCBEHcsMCAHBvHwAA
Cm8gAAAKEwkRB3LbAgBwbx8AAApvIAAAChMKcxQAAAoTCwZzIQAAChMMEQxvFgAAChEJKCIAAAot
PBEJEQxzIwAAChMNEQ1vJAAAChMOEQsRDm8lAAAK3gwRDiwHEQ5vGgAACtzdoQEAABENLAcRDW8a
AAAK3AdzFQAAChMPEQ9vFgAACnMUAAAKExBy+wIAcBEPcxcAAAoTEhESbyYAAApyoAMAcBEHcrQD
AHBvHwAACm8nAAAKJhEScxgAAAoTExETERBvGQAACibeDBETLAcRE28aAAAK3N4MERIsBxESbxoA
AArccygAAAoTERERcroDAHBvKQAACiYREG8cAAAKbx0AAAoTFCtxERRvHgAACnQUAAABJXLKAwBw
bx8AAApvIAAAChMVcuwDAHBvHwAACm8gAAAKExYRER2NKQAAASUWcgoEAHCiJRcRFaIlGHIWBABw
oiUZERaiJRpyIAQAcKIlGxEVoiUcciwEAHCiKCoAAApvKQAACiYRFG8rAAAKLYbeFREUdRkAAAET
FxEXLAcRF28aAAAK3BERJW8sAAAKGFlvLQAAChERcjIEAHARCCguAAAKbykAAAomERFvIAAAChEM
cyMAAAoTGBEYbyQAAAoTGRELERlvJQAACt4MERksBxEZbxoAAArc3gwRGCwHERhvGgAACtzeDBEP
LAcRD28aAAAK3BEMbxsAAAreDBEMLAcRDG8aAAAK3AJyQAQAcHJiBABwEQgoLgAACnLLAQBwFigC
AAAGAgcRChEHcrQDAHBvHwAACm8gAAAKKAMAAAYCcpwEAHByxAQAcBEKcuAEAHAoLwAACnLLAQBw
FigCAAAGB3MVAAAKExoRGm8WAAAKERpzMAAAChMbERsRCm8xAAAKcxQAAAoTHHL7AgBwERpzFwAA
ChMdER1vJgAACnKgAwBwEQdytAMAcG8fAAAKbycAAAomER1zGAAAChMeER4RHG8ZAAAKJt4MER4s
BxEebxoAAArc3gwRHSwHER1vGgAACtwRHG8cAAAKbx0AAAoTFCtAERRvHgAACnQUAAABJXLKAwBw
bx8AAApvIAAAChMfcgwFAHBvHwAACm8gAAAKEyARG28yAAAKER8RIG8zAAAKJhEUbysAAAott94V
ERR1GQAAARMXERcsBxEXbxoAAArcERsRC280AAAK3gwRGywHERtvGgAACtwRGm8bAAAK3gwRGiwH
ERpvGgAACtwCci4FAHByRgUAcBEKKC4AAApyywEAcBYoAgAABt4jEyECcogFAHBylAUAcBEIKC4A
AAoRIW81AAAKFygCAAAG/hoRBm8rAAAKOu77///eFREGdRkAAAETFxEXLAcRF28aAAAK3AJyuAUA
cHLABQBwcssBAHAWKAIAAAYCKBAAAAoWbzYAAAreKBMiAnL+BQBwchwGAHARIm81AAAKFygCAAAG
AigQAAAKF282AAAK3gAqAAAAQeQBAAIAAABwAAAACwAAAHsAAAAMAAAAAAAAAAIAAABnAAAAIgAA
AIkAAAAMAAAAAAAAAAIAAABUAAAASQAAAJ0AAAAKAAAAAAAAAAIAAABJAQAACwAAAFQBAAAMAAAA
AAAAAAIAAABAAQAAJQAAAGUBAAAMAAAAAAAAAAIAAAC8AQAADAAAAMgBAAAMAAAAAAAAAAIAAACV
AQAAQQAAANYBAAAMAAAAAAAAAAIAAAAEAgAAfgAAAIICAAAVAAAAAAAAAAIAAADTAgAACwAAAN4C
AAAMAAAAAAAAAAIAAADKAgAAIgAAAOwCAAAMAAAAAAAAAAIAAAB5AQAAgQEAAPoCAAAMAAAAAAAA
AAIAAAAlAQAA6gEAAA8DAAAMAAAAAAAAAAIAAADRAwAADAAAAN0DAAAMAAAAAAAAAAIAAACqAwAA
QQAAAOsDAAAMAAAAAAAAAAIAAAAFBAAATQAAAFIEAAAVAAAAAAAAAAIAAACMAwAA5gAAAHIEAAAM
AAAAAAAAAAIAAAB8AwAACwEAAIcEAAAMAAAAAAAAAAAAAAAdAQAAlQMAALIEAAAjAAAAGwAAAQIA
AADKAAAAGQQAAOMEAAAVAAAAAAAAAAAAAAAxAAAA6wQAABwFAAAoAAAAGwAAARswAwCuAAAAAgAA
EXLKAABwcxUAAAoKBm8WAAAKckwGAHAGcxcAAAoLB28mAAAKco0HAHADbycAAAomB28mAAAKcqEH
AHAEbycAAAomB28mAAAKcrsHAHAFbycAAAomB28mAAAKct8HAHACewEAAARvJwAACiYHbyYAAApy
7wcAcA4ELQMWKwEXjDMAAAFvJwAACiYHbzcAAAom3goHLAYHbxoAAArcBm8bAAAK3goGLAYGbxoA
AArcKgAAARwAAAIAHQB0kQAKAAAAAAIACwCYowAKAAAAABswBQAwAQAAAwAAEQNzFQAACgoGbxYA
AApzKAAACgsHG40pAAABJRZyAQgAcKIlFwSiJRhyHwgAcKIlGQSiJRpyXwgAcKIoKgAACm8pAAAK
JgdyZQgAcARygQgAcCgvAAAKbykAAAomcvsCAHAGcxcAAAoMCG8mAAAKcqADAHAFbycAAAomCG84
AAAKDSs+CXIMBQBwbzkAAApvIAAAChMECXKHCABwbzkAAApvIAAAChMFBxEEcqUIAHARBXIsBABw
KDoAAApvKQAACiYJbzsAAAotut4UCSwGCW8aAAAK3AgsBghvGgAACtwHJW8sAAAKGFlvLQAACgdy
qQgAcG8pAAAKJgdvIAAACgZzFwAAChMGEQZvNwAACibeDBEGLAcRBm8aAAAK3AZvGwAACt4KBiwG
Bm8aAAAK3CpBZAAAAgAAAIEAAABKAAAAywAAAAoAAAAAAAAAAgAAAGgAAABtAAAA1QAAAAoAAAAA
AAAAAgAAAAcBAAAKAAAAEQEAAAwAAAAAAAAAAgAAAAcAAAAeAQAAJQEAAAoAAAAAAAAAHgIoPAAA
CioeAig9AAAKKq5+AgAABC0ecq8IAHDQAwAAAig+AAAKbz8AAApzQAAACoACAAAEfgIAAAQqGn4D
AAAEKh4CgAMAAAQqGn4EAAAEKh4CKEEAAAoqLnMKAAAGgAQAAAQqAABCU0pCAQABAAAAAAAMAAAA
djQuMC4zMDMxOQAAAAAFAGwAAAC8BQAAI34AACgGAAAYCQAAI1N0cmluZ3MAAAAAQA8AACQJAAAj
VVMAZBgAABAAAAAjR1VJRAAAAHQYAABwAgAAI0Jsb2IAAAAAAAAAAgAAAVcdogEJAwAAAPoBMwAW
AAABAAAAOAAAAAUAAAAHAAAACwAAAAgAAABBAAAAAgAAABAAAAADAAAAAgAAAAMAAAAEAAAAAQAA
AAYAAAABAAAAAQAAAAAA9QQBAAAAAAAGAE8DGgcGAN4DGgcGAJsCBwcPAI4HAAAGAMgCfQUGADID
fQUGABMDfQUGAMUDfQUGAG8DfQUGAIgDfQUGAN8CfQUGAPoCGQQKAKMDpAQKAPEBpAQOABUBhgAO
APkFoQgOAMoAoQgOALsGoQgGAOAG9gcOANgIhgASAOgFgQgSALwAgQgSAFEGgQgGAH4GzAgGADoB
KwUOAO0IoQgGAAcGKwUOAGIGoQgGADIFKwUGAH4CBwcGAF8IKwUGAJAGOgcGACQGaAUWAE4C3wQW
AK8C3wQWACgCUwUGAGMCGgcKAM0EpAQaANAHnAEaADEBnAEGAGgEKwUOANsFEQYOAK0GEQYOAMkF
hgAOAA0ChgAOADgGhgAOALIFoQgOAKAGoQgOAI8FoQgOADMEoQgGAAEAKwUOALIAEQYOAEQGEQYG
ALwBKwUGAEYBKwUGAOQIfQUAAAAAKwAAAAAAAQABAAEAEABIBWIAOQABAAEAAAAQAEEHnQd9AAIA
BQAAARAA7QedB5EABAAJAAMBAABBCAAAdQAFAAwAAQA0AFoBEQA3BV0BEQDhAWIBEQDcAGcBBgZa
AGsBVoAxCG4BVoDBAW4BUCAAAAAAhgBOBQYAAQCIJwAAAACBADAGcgEBAGAoAAAAAIEAHwF6AQUA
ACoAAAAAhhj6BgYACAAIKgAAAACDGPoGBgAIABAqAAAAAJMIjAaBAQgAPCoAAAAAkwjJAYcBCABD
KgAAAACTCNUBjQEIAEsqAAAAAJYIZgiUAQkAUioAAAAAhhj6BgYACQBaKgAAAACRGAAHmQEJAAAA
AQCTAQAAAgD4AAAAAwAEAQAABADYBgAAAQBMBAAAAgCDAQAAAwCbAAAAAQATBAkA+gYBABEA+gYG
ABkA+gYKACkA+gYQADEA+gYQADkA+gYQAEEA+gYQAEkA+gYQAFEA+gYQAFkA+gYQAGEA+gYQAGkA
+gYGAPEA+gYGABkB+gYVACkB+gYGAHEAOQhcADEBzAdiADkBIgVoAEEB/ANvAHkA+gYGAIEA+gYQ
AFEBQwUGAIkA+gZzAJEA+gZ6AFkBHQWAAMkARgIGAFEBQAIGAHkATwiGAGkB7AaMAJkAtwhvAKEA
IgWRAPkAZgSWAKkA+gYQAEkBCQmaALEA+gafALEAcAamAHkAqQCrAIkACQiyAHkBBgS4AMEA+gYG
AMEA1QDAAEkBWAjGAJkAwwjMAMEAbwTQAMEAegQBAEkBWAjUAEkBWAjaANEA+gbhANEAagEQANEA
2gfnAIkBrgDtANEAygb1ANkA7ACWADEBcggBAKEB+QjQAIkAcAYRAakBIgWRAEkBWAgWAakBpADM
AHEA+gYGAPkA+gYGALEBWAEeAbEB4AgnAQEB+gYtASEB+gYGAAgAGABQAQgAHABVASkAcwDWAS4A
CwCuAS4AEwC3AS4AGwDWAS4AIwDfAS4AKwAIAi4AMwAIAi4AOwAIAi4AQwDfAS4ASwAOAi4AUwAI
Ai4AWwAlAkMAYwBVAUkAcwDWAWMAawBVAYEAewBVARwA+wACAQMAAQAEAAMAAACQBp0BAADpAaMB
AABqCKkBAgAGAAMAAgAHAAUAAQAIAAUAAgAJAAcABIAAAAEAAAD2IgdHAAAAAAAABwAAAAQAAAAA
AAAAAAAAADUBkgAAAAAAEAAAAAAAAAAAAAAAPgGFBAAAAAAEAAAAAAAAAAAAAAA1AYYAAAAAAAQA
egATAAEAAAAAAEcBGAgAAAAABAAAAAAAAAAAAAAANQErBQAAAAAQAAAAAAAAAAAAAAA+ATsAAAAA
AAAAAAABAAAASwcAAAUAAgAAAAAAAEludDMyAFNUXzFlODIzZGNkODViYjRiOTU4MDY4OWQ5MTkz
MzNiNjU2ADxNb2R1bGU+AGxvYWRJRABNaWNyb3NvZnQuU3FsU2VydmVyLk1hbmFnZWREVFMAdmFs
dWVfXwBTVF81NWM5YjUwNTdiNTc0Y2YwYTUzYTU5YWQ4OGNkNWYzYQBTeXN0ZW0uRGF0YQBtc2Nv
cmxpYgBtYXN0ZXJJZABSZWFkAExvYWQAQWRkAERiQ29tbWFuZABPcmFjbGVDb21tYW5kAFNxbENv
bW1hbmQAQXBwZW5kAGRlZmF1bHRJbnN0YW5jZQBnZXRfTWVzc2FnZQBzdGVwTWVzc2FnZQBzdGVw
RXJyb3JNZXNzYWdlAERhdGFUYWJsZQBDcmVhdGVUYXJnZXRUYWJsZQBWYXJpYWJsZQBJRGlzcG9z
YWJsZQBSdW50aW1lVHlwZUhhbmRsZQBHZXRUeXBlRnJvbUhhbmRsZQBzZXRfRGVzdGluYXRpb25U
YWJsZU5hbWUAdGFyZ2V0VGFibGVOYW1lAHN0ZXBOYW1lAE1pY3Jvc29mdC5TcWxTZXJ2ZXIuRHRz
LlJ1bnRpbWUAVHlwZQBGYWlsdXJlAGdldF9DdWx0dXJlAHNldF9DdWx0dXJlAHJlc291cmNlQ3Vs
dHVyZQBWU1RBUlRTY3JpcHRPYmplY3RNb2RlbEJhc2UASW50ZXJuYWxEYXRhQ29sbGVjdGlvbkJh
c2UAQXBwbGljYXRpb25TZXR0aW5nc0Jhc2UAQ2xvc2UARGlzcG9zZQBFZGl0b3JCcm93c2FibGVT
dGF0ZQBDb21waWxlckdlbmVyYXRlZEF0dHJpYnV0ZQBEZWJ1Z2dlck5vblVzZXJDb2RlQXR0cmli
dXRlAERlYnVnZ2FibGVBdHRyaWJ1dGUARWRpdG9yQnJvd3NhYmxlQXR0cmlidXRlAEFzc2VtYmx5
VGl0bGVBdHRyaWJ1dGUAQXNzZW1ibHlUcmFkZW1hcmtBdHRyaWJ1dGUAVGFyZ2V0RnJhbWV3b3Jr
QXR0cmlidXRlAEFzc2VtYmx5Q29uZmlndXJhdGlvbkF0dHJpYnV0ZQBBc3NlbWJseURlc2NyaXB0
aW9uQXR0cmlidXRlAENvbXBpbGF0aW9uUmVsYXhhdGlvbnNBdHRyaWJ1dGUAQXNzZW1ibHlQcm9k
dWN0QXR0cmlidXRlAEFzc2VtYmx5Q29weXJpZ2h0QXR0cmlidXRlAFNTSVNTY3JpcHRUYXNrRW50
cnlQb2ludEF0dHJpYnV0ZQBBc3NlbWJseUNvbXBhbnlBdHRyaWJ1dGUAUnVudGltZUNvbXBhdGli
aWxpdHlBdHRyaWJ1dGUAZ2V0X1ZhbHVlAEFkZFdpdGhWYWx1ZQB2YWx1ZQBTeXN0ZW0uUnVudGlt
ZS5WZXJzaW9uaW5nAFNxbEJ1bGtDb3B5Q29sdW1uTWFwcGluZwBzcWxTZXJ2ZXJDb25uZWN0aW9u
U3RyaW5nAFRvU3RyaW5nAGdldF9MZW5ndGgAc2V0X0xlbmd0aABNaWNyb3NvZnQuU3FsU2VydmVy
LlNjcmlwdFRhc2sATWljcm9zb2Z0LlNxbFNlcnZlci5EdHMuVGFza3MuU2NyaXB0VGFzawBTY3Jp
cHRPYmplY3RNb2RlbABTeXN0ZW0uQ29tcG9uZW50TW9kZWwAU1RfMWU4MjNkY2Q4NWJiNGI5NTgw
Njg5ZDkxOTMzM2I2NTYuZGxsAEZpbGwAZ2V0X0l0ZW0AU3lzdGVtAEVudW0AcmVzb3VyY2VNYW4A
T3BlbgBTY3JpcHRNYWluAFN5c3RlbS5Db25maWd1cmF0aW9uAFN5c3RlbS5HbG9iYWxpemF0aW9u
AFN5c3RlbS5SZWZsZWN0aW9uAFNxbEJ1bGtDb3B5Q29sdW1uTWFwcGluZ0NvbGxlY3Rpb24AU3Fs
UGFyYW1ldGVyQ29sbGVjdGlvbgBEYXRhUm93Q29sbGVjdGlvbgBEYkNvbm5lY3Rpb24AT3JhY2xl
Q29ubmVjdGlvbgBTcWxDb25uZWN0aW9uAEV4Y2VwdGlvbgBTeXN0ZW0uRGF0YS5Db21tb24AQ3Vs
dHVyZUluZm8ATG9nU3RlcABJRGF0YVJlYWRlcgBEYkRhdGFSZWFkZXIAT3JhY2xlRGF0YVJlYWRl
cgBTcWxEYXRhUmVhZGVyAEV4ZWN1dGVSZWFkZXIAU3RyaW5nQnVpbGRlcgBnZXRfUmVzb3VyY2VN
YW5hZ2VyAFNxbFBhcmFtZXRlcgBEYkRhdGFBZGFwdGVyAFNxbERhdGFBZGFwdGVyAFdyaXRlVG9T
ZXJ2ZXIAaXNFcnJvcgBJRW51bWVyYXRvcgBHZXRFbnVtZXJhdG9yAC5jdG9yAC5jY3RvcgBTeXN0
ZW0uRGlhZ25vc3RpY3MAU3lzdGVtLlJ1bnRpbWUuQ29tcGlsZXJTZXJ2aWNlcwBTeXN0ZW0uUmVz
b3VyY2VzAFNUXzFlODIzZGNkODViYjRiOTU4MDY4OWQ5MTkzMzNiNjU2LlByb3BlcnRpZXMuUmVz
b3VyY2VzLnJlc291cmNlcwBEZWJ1Z2dpbmdNb2RlcwBTVF8xZTgyM2RjZDg1YmI0Yjk1ODA2ODlk
OTE5MzMzYjY1Ni5Qcm9wZXJ0aWVzAGdldF9WYXJpYWJsZXMAZ2V0X0NvbHVtbk1hcHBpbmdzAFNl
dHRpbmdzAFN5c3RlbS5Db2xsZWN0aW9ucwBnZXRfUGFyYW1ldGVycwBPcmFjbGUuTWFuYWdlZERh
dGFBY2Nlc3MAU3VjY2VzcwBnZXRfRHRzAFNjcmlwdFJlc3VsdHMAZ2V0X1Jvd3MAQ29uY2F0AE9i
amVjdABnZXRfRGVmYXVsdABzZXRfVGFza1Jlc3VsdABPcmFjbGUuTWFuYWdlZERhdGFBY2Nlc3Mu
Q2xpZW50AFN5c3RlbS5EYXRhLlNxbENsaWVudABnZXRfQ3VycmVudABNb3ZlTmV4dABTeXN0ZW0u
VGV4dABEYXRhUm93AGdldF9Bc3NlbWJseQBTcWxCdWxrQ29weQBFeGVjdXRlTm9uUXVlcnkASXNO
dWxsT3JFbXB0eQAAADtTAHkAcwB0AGUAbQA6ADoARQB4AGUAYwB1AHQAaQBvAG4ASQBuAHMAdABh
AG4AYwBlAEcAVQBJAEQAAICLVQBzAGUAcgAgAEkAZAA9AGIAaQByAGoAYQBuADsAUABhAHMAcwB3
AG8AcgBkAD0AUgBmAHYALABmAGkAMAAxADsARABhAHQAYQAgAFMAbwB1AHIAYwBlAD0AMQA5ADIA
LgAxADYAOAAuADgAMQAuADkAOQA6ADEANQAyADEALwBvAHIAYwBsADEAAIDTRABhAHQAYQAgAFMA
bwB1AHIAYwBlAD0AMQA3ADIALgAxADcALgAxADcALgAyADIALAA1ADQAMwAxADIAOwBJAG4AaQB0
AGkAYQBsACAAQwBhAHQAYQBsAG8AZwA9AEIAUgBEAEIAOwBJAG4AdABlAGcAcgBhAHQAZQBkACAA
UwBlAGMAdQByAGkAdAB5AD0AVAByAHUAZQA7AFQAcgB1AHMAdABTAGUAcgB2AGUAcgBDAGUAcgB0
AGkAZgBpAGMAYQB0AGUAPQBUAHIAdQBlADsAAAtTAHQAYQByAHQAAB9QAHIAbwBjAGUAcwBzACAA
cwB0AGEAcgB0AGUAZAAAAQBvUwBFAEwARQBDAFQAIAAqACAARgBSAE8ATQAgAEMAVABSAEwALgBN
AGEAcwB0AGUAcgBPAHIAYQBjAGwAZQBUAG8AUwBUAEcAIABXAEgARQBSAEUAIABJAHMAQQBjAHQA
aQB2AGUAIAA9ACAAMQAAJVIAZQBhAGQAIABDAG8AbgB0AHIAbwBsACAAVABhAGIAbABlAAA/QwBv
AG4AdAByAG8AbAAgAHQAYQBiAGwAZQAgAHIAZQBhAGQAIABzAHUAYwBjAGUAcwBzAGYAdQBsAGwA
eQAAH1MAbwB1AHIAYwBlAFQAYQBiAGwAZQBOAGEAbQBlAAAXUwBvAHUAcgBjAGUAUQB1AGUAcgB5
AAAfVABhAHIAZwBlAHQAVABhAGIAbABlAE4AYQBtAGUAAICjUwBFAEwARQBDAFQAIAAqACAARgBS
AE8ATQAgAEMAVABSAEwALgBNAGEAcABwAGkAbgBnAE8AcgBhAGMAbABlAFQAbwBTAFQARwAgAFcA
SABFAFIARQAgAE0AYQBzAHQAZQByAEkAZAAgAD0AIABAAE0AYQBzAHQAZQByAEkAZAAgAEEATgBE
ACAASQBzAEEAYwB0AGkAdgBlACAAPQAgADEAABNAAE0AYQBzAHQAZQByAEkAZAAABUkAZAAAD1MA
RQBMAEUAQwBUACAAACFTAG8AdQByAGMAZQBDAG8AbAB1AG0AbgBOAGEAbQBlAAAdUwBvAHUAcgBj
AGUARABhAHQAYQBUAHkAcABlAAALQwBBAFMAVAAoAAAJIABBAFMAIAAACykAIABBAFMAIAAABSwA
IAAADSAARgBSAE8ATQAgAAAhUgBlAGEAZAAgAFMAbwB1AHIAYwBlACAARABhAHQAYQAAOUQAYQB0
AGEAIAByAGUAYQBkACAAcwB1AGMAYwBlAHMAcwBmAHUAbABsAHkAIABmAHIAbwBtACAAACdDAHIA
ZQBhAHQAZQAgAFQAYQByAGcAZQB0ACAAVABhAGIAbABlAAAbVABhAHIAZwBlAHQAIAB0AGEAYgBs
AGUAIAAAKyAAYwByAGUAYQB0AGUAZAAgAHMAdQBjAGMAZQBzAHMAZgB1AGwAbAB5AAAhVABhAHIA
ZwBlAHQAQwBvAGwAdQBtAG4ATgBhAG0AZQAAF0kAbgBzAGUAcgB0ACAARABhAHQAYQAAQUQAYQB0
AGEAIABpAG4AcwBlAHIAdABlAGQAIABzAHUAYwBjAGUAcwBzAGYAdQBsAGwAeQAgAGkAbgB0AG8A
IAAAC0UAcgByAG8AcgAAI0UAcgByAG8AcgAgAHAAcgBvAGMAZQBzAHMAaQBuAGcAIAAAB0UAbgBk
AAA9UAByAG8AYwBlAHMAcwAgAGMAbwBtAHAAbABlAHQAZQBkACAAcwB1AGMAYwBlAHMAcwBmAHUA
bABsAHkAAB1DAHIAaQB0AGkAYwBhAGwAIABFAHIAcgBvAHIAAC9DAHIAaQB0AGkAYwBhAGwAIABl
AHIAcgBvAHIAIABvAGMAYwB1AHIAcgBlAGQAAIE/SQBOAFMARQBSAFQAIABJAE4AVABPACAATABP
AEcALgBDAFMATwByAGEAYwBsAGUAVABvAFMAVABHACAAKABTAHQAZQBwAE4AYQBtAGUALAAgAFMA
dABlAHAATQBlAHMAcwBhAGcAZQAsACAAUwB0AGUAcABFAHIAcgBvAHIATQBlAHMAcwBhAGcAZQAs
ACAATABvAGEAZABJAEQALAAgAEkAcwBFAHIAcgBvAHIAKQAgAFYAQQBMAFUARQBTACAAKABAAFMA
dABlAHAATgBhAG0AZQAsACAAQABTAHQAZQBwAE0AZQBzAHMAYQBnAGUALAAgAEAAUwB0AGUAcABF
AHIAcgBvAHIATQBlAHMAcwBhAGcAZQAsACAAQABMAG8AYQBkAEkARAAsACAAQABJAHMARQByAHIA
bwByACkAABNAAFMAdABlAHAATgBhAG0AZQAAGUAAUwB0AGUAcABNAGUAcwBzAGEAZwBlAAAjQABT
AHQAZQBwAEUAcgByAG8AcgBNAGUAcwBzAGEAZwBlAAAPQABMAG8AYQBkAEkARAAAEUAASQBzAEUA
cgByAG8AcgAAHUkARgAgAE8AQgBKAEUAQwBUAF8ASQBEACgAJwABPycALAAgACcAVQAnACkAIABJ
AFMAIABOAE8AVAAgAE4AVQBMAEwAIABEAFIATwBQACAAVABBAEIATABFACAAAQU7ACAAABtDAFIA
RQBBAFQARQAgAFQAQQBCAEwARQAgAAAFIAAoAAAdVABhAHIAZwBlAHQARABhAHQAYQBUAHkAcABl
AAADIAAABSkAOwAAcVMAVABfADEAZQA4ADIAMwBkAGMAZAA4ADUAYgBiADQAYgA5ADUAOAAwADYA
OAA5AGQAOQAxADkAMwAzADMAYgA2ADUANgAuAFAAcgBvAHAAZQByAHQAaQBlAHMALgBSAGUAcwBv
AHUAcgBjAGUAcwAAAAAAevLBFMVfSUqnx4d3XRk4PQAEIAEBCAMgAAEFIAEBEREEIAEBDgYgAQER
gIk/ByMODhI9EkESRRJJEk0SUQ4ODhI9ElUSWRJdEkESPRJhEkUSSRJNDg4SZRJZEl0SQRJpEj0S
RRJJDg4SbRJtBSAAEoCZBSAAEoCdBiABEoChHAMgABwGIAIBDhJBBSABARJFBSABCBI9BSAAEoCx
BCAAEk0EIAEcDgMgAA4EAAECDgYgAgEOElUEIAASXQYgAQESgLkFIAASgL0HIAISgMEOHAUgARJh
DgUAAQ4dDgMgAAIDIAAIBQACDg4OBgADDg4ODgUgAQESQQUgABKAxQcgAhKAyQ4OBSABARI9BgcC
EkESRQ4HBxJBEmESRRJxDg4SRQQgABJxBwAEDg4ODg4IAAESgNkRgN0FIAASgOEHIAIBDhKA4Qi3
elxWGTTgiQiJhF3NgIDMkQiJtIP0KcRzQgQAAAAABAEAAAACBg4EBhKAgQQGEoCFAwYSEAIGCAMG
ERQHIAQBDg4OAgYgAwEODg4FAAASgIEFAAASgIUGAAEBEoCFBAAAEhADAAABBQgAEoCBBQgAEoCF
BAgAEhAIAQAIAAAAAAAeAQABAFQCFldyYXBOb25FeGNlcHRpb25UaHJvd3MBCAEAAgAAAAAAKAEA
I1NUXzFlODIzZGNkODViYjRiOTU4MDY4OWQ5MTkzMzNiNjU2AAAFAQAAAAAWAQARQ29weXJpZ2h0
IEAgIDIwMjQAAEkBABouTkVURnJhbWV3b3JrLFZlcnNpb249djQuNwEAVA4URnJhbWV3b3JrRGlz
cGxheU5hbWUSLk5FVCBGcmFtZXdvcmsgNC43ALQAAADOyu++AQAAAJEAAABsU3lzdGVtLlJlc291
cmNlcy5SZXNvdXJjZVJlYWRlciwgbXNjb3JsaWIsIFZlcnNpb249NC4wLjAuMCwgQ3VsdHVyZT1u
ZXV0cmFsLCBQdWJsaWNLZXlUb2tlbj1iNzdhNWM1NjE5MzRlMDg5I1N5c3RlbS5SZXNvdXJjZXMu
UnVudGltZVJlc291cmNlU2V0AgAAAAAAAAAAAAAAUEFEUEFEULQAAAAsRgAAAAAAAAAAAABGRgAA
ACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAOEYAAAAAAAAAAAAAAABfQ29yRGxsTWFpbgBtc2NvcmVl
LmRsbAAAAAAA/yUAIAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABABAAAAAY
AACAAAAAAAAAAAAAAAAAAAABAAEAAAAwAACAAAAAAAAAAAAAAAAAAAABAAAAAABIAAAAWGAAABoE
AAAAAAAAAAAAABoENAAAAFYAUwBfAFYARQBSAFMASQBPAE4AXwBJAE4ARgBPAAAAAAC9BO/+AAAB
AAAAAQAHR/YiAAABAAdH9iI/AAAAAAAAAAQAAAACAAAAAAAAAAAAAAAAAAAARAAAAAEAVgBhAHIA
RgBpAGwAZQBJAG4AZgBvAAAAAAAkAAQAAABUAHIAYQBuAHMAbABhAHQAaQBvAG4AAAAAAAAAsAR6
AwAAAQBTAHQAcgBpAG4AZwBGAGkAbABlAEkAbgBmAG8AAABWAwAAAQAwADAAMAAwADAANABiADAA
AAAaAAEAAQBDAG8AbQBtAGUAbgB0AHMAAAAAAAAAIgABAAEAQwBvAG0AcABhAG4AeQBOAGEAbQBl
AAAAAAAAAAAAcAAkAAEARgBpAGwAZQBEAGUAcwBjAHIAaQBwAHQAaQBvAG4AAAAAAFMAVABfADEA
ZQA4ADIAMwBkAGMAZAA4ADUAYgBiADQAYgA5ADUAOAAwADYAOAA5AGQAOQAxADkAMwAzADMAYgA2
ADUANgAAAD4ADwABAEYAaQBsAGUAVgBlAHIAcwBpAG8AbgAAAAAAMQAuADAALgA4ADkANQAwAC4A
MQA4ADEAOAAzAAAAAABwACgAAQBJAG4AdABlAHIAbgBhAGwATgBhAG0AZQAAAFMAVABfADEAZQA4
ADIAMwBkAGMAZAA4ADUAYgBiADQAYgA5ADUAOAAwADYAOAA5AGQAOQAxADkAMwAzADMAYgA2ADUA
NgAuAGQAbABsAAAASAASAAEATABlAGcAYQBsAEMAbwBwAHkAcgBpAGcAaAB0AAAAQwBvAHAAeQBy
AGkAZwBoAHQAIABAACAAIAAyADAAMgA0AAAAKgABAAEATABlAGcAYQBsAFQAcgBhAGQAZQBtAGEA
cgBrAHMAAAAAAAAAAAB4ACgAAQBPAHIAaQBnAGkAbgBhAGwARgBpAGwAZQBuAGEAbQBlAAAAUwBU
AF8AMQBlADgAMgAzAGQAYwBkADgANQBiAGIANABiADkANQA4ADAANgA4ADkAZAA5ADEAOQAzADMA
MwBiADYANQA2AC4AZABsAGwAAABoACQAAQBQAHIAbwBkAHUAYwB0AE4AYQBtAGUAAAAAAFMAVABf
ADEAZQA4ADIAMwBkAGMAZAA4ADUAYgBiADQAYgA5ADUAOAAwADYAOAA5AGQAOQAxADkAMwAzADMA
YgA2ADUANgAAAEIADwABAFAAcgBvAGQAdQBjAHQAVgBlAHIAcwBpAG8AbgAAADEALgAwAC4AOAA5
ADUAMAAuADEAOAAxADgAMwAAAAAARgAPAAEAQQBzAHMAZQBtAGIAbAB5ACAAVgBlAHIAcwBpAG8A
bgAAADEALgAwAC4AOAA5ADUAMAAuADEAOAAxADgAMwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAwAAABYNgAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=</BinaryItem>
        </ScriptProject>
      </DTS:ObjectData>
    </DTS:Executable>
  </DTS:Executables>
  <DTS:PrecedenceConstraints>
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint]"
      DTS:CreationName=""
      DTS:DTSID="{14AFEAE5-29BC-477D-B2DC-48D15263E9CB}"
      DTS:From="Package\OldReplicateMappingTableLogic v-0"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint"
      DTS:To="Package\NEwlogiv v-1" />
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint 1]"
      DTS:CreationName=""
      DTS:DTSID="{0BC63D1E-F972-4E06-91F4-2F9AFC3DAF47}"
      DTS:From="Package\NEwlogiv v-1"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint 1"
      DTS:To="Package\Working CTRL+LOG v-2" />
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint 2]"
      DTS:CreationName=""
      DTS:DTSID="{A27020FA-8508-4C62-B9BF-010736F969E5}"
      DTS:From="Package\Working CTRL+LOG v-2"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint 2"
      DTS:To="Package\Script v-3" />
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint 3]"
      DTS:CreationName=""
      DTS:DTSID="{DAD03CD7-205E-4334-9495-FFCCE1A500C9}"
      DTS:From="Package\Script v-3"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint 3"
      DTS:To="Package\Script v-4-batchload-try" />
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint 4]"
      DTS:CreationName=""
      DTS:DTSID="{C9D90960-65EC-43AB-B1A3-B89ADB16024A}"
      DTS:From="Package\Script v-4-batchload-try"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint 4"
      DTS:To="Package\Script v-5" />
  </DTS:PrecedenceConstraints>
  <DTS:DesignTimeProperties><![CDATA[<?xml version="1.0"?>
<!--This CDATA section contains the layout information of the package. The section includes information such as (x,y) coordinates, width, and height.-->
<!--If you manually edit this section and make a mistake, you can delete it. -->
<!--The package will still be able to load normally but the previous layout information will be lost and the designer will automatically re-arrange the elements on the design surface.-->
<Objects
  Version="8">
  <!--Each node below will contain properties that do not affect runtime behavior.-->
  <Package
    design-time-name="Package">
    <LayoutInfo>
      <GraphLayout
        Capacity="16" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph" xmlns:assembly="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:mssgle="clr-namespace:Microsoft.SqlServer.Graph.LayoutEngine;assembly=Microsoft.SqlServer.Graph">
        <NodeLayout
          Size="140,42"
          Id="Package\NEwlogiv v-1"
          TopLeft="549,128" />
        <NodeLayout
          Size="246,42"
          Id="Package\OldReplicateMappingTableLogic v-0"
          TopLeft="485,45" />
        <NodeLayout
          Size="192,42"
          Id="Package\Working CTRL+LOG v-2"
          TopLeft="532,241" />
        <AnnotationLayout
          Text="s"
          ParentId="Package"
          FontInfo="{assembly:Null}"
          Size="34,40"
          Id="c3976998-c501-4001-b351-c0a60a128741"
          TopLeft="5.5,15.5" />
        <AnnotationLayout
          Text="s"
          ParentId="Package"
          FontInfo="{assembly:Null}"
          Size="34,40"
          Id="c652613a-3b41-402b-9983-bb421a05778f"
          TopLeft="446,15.5" />
        <NodeLayout
          Size="124,42"
          Id="Package\Script v-3"
          TopLeft="533,335" />
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint]"
          TopLeft="608,87">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="11,41"
              Start="0,0"
              End="11,33.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,16.5" />
                  <mssgle:CubicBezierSegment
                    Point1="0,16.5"
                    Point2="0,20.5"
                    Point3="4,20.5" />
                  <mssgle:LineSegment
                    End="7,20.5" />
                  <mssgle:CubicBezierSegment
                    Point1="7,20.5"
                    Point2="11,20.5"
                    Point3="11,24.5" />
                  <mssgle:LineSegment
                    End="11,33.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint 1]"
          TopLeft="619,170">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="9,71"
              Start="0,0"
              End="9,63.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,31.5" />
                  <mssgle:CubicBezierSegment
                    Point1="0,31.5"
                    Point2="0,35.5"
                    Point3="4,35.5" />
                  <mssgle:LineSegment
                    End="5,35.5" />
                  <mssgle:CubicBezierSegment
                    Point1="5,35.5"
                    Point2="9,35.5"
                    Point3="9,39.5" />
                  <mssgle:LineSegment
                    End="9,63.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint 2]"
          TopLeft="628,283">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="-33,52"
              Start="0,0"
              End="-33,44.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,22" />
                  <mssgle:CubicBezierSegment
                    Point1="0,22"
                    Point2="0,26"
                    Point3="-4,26" />
                  <mssgle:LineSegment
                    End="-29,26" />
                  <mssgle:CubicBezierSegment
                    Point1="-29,26"
                    Point2="-33,26"
                    Point3="-33,30" />
                  <mssgle:LineSegment
                    End="-33,44.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <NodeLayout
          Size="190,42"
          Id="Package\Script v-4-batchload-try"
          TopLeft="840,347" />
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint 3]"
          TopLeft="657,356">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="183,12"
              Start="0,0"
              End="175.5,12">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="87.5,0" />
                  <mssgle:CubicBezierSegment
                    Point1="87.5,0"
                    Point2="91.5,0"
                    Point3="91.5,4" />
                  <mssgle:LineSegment
                    End="91.5,8" />
                  <mssgle:CubicBezierSegment
                    Point1="91.5,8"
                    Point2="91.5,12"
                    Point3="95.5,12" />
                  <mssgle:LineSegment
                    End="175.5,12" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <NodeLayout
          Size="124,42"
          Id="Package\Script v-5"
          TopLeft="581,456" />
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint 4]"
          TopLeft="935,389">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="-292,67"
              Start="0,0"
              End="-292,59.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,29.5" />
                  <mssgle:CubicBezierSegment
                    Point1="0,29.5"
                    Point2="0,33.5"
                    Point3="-4,33.5" />
                  <mssgle:LineSegment
                    End="-288,33.5" />
                  <mssgle:CubicBezierSegment
                    Point1="-288,33.5"
                    Point2="-292,33.5"
                    Point3="-292,37.5" />
                  <mssgle:LineSegment
                    End="-292,59.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
      </GraphLayout>
    </LayoutInfo>
  </Package>
</Objects>]]></DTS:DesignTimeProperties>
</DTS:Executable>